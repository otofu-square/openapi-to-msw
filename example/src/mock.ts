/**
 * This file is AUTO GENERATED by openapi-to-msw, you can also commit/edit it as you prefer.
 */
/* eslint-disable */
import faker from '@faker-js/faker';

faker.seed(1);

const MAX_ARRAY_LENGTH = 20;

export const factories = {
  '/': {
    get: {
      200: {
        current_user_url: faker.lorem.slug(),
        current_user_authorizations_html_url: faker.lorem.slug(),
        authorizations_url: faker.lorem.slug(),
        code_search_url: faker.lorem.slug(),
        commit_search_url: faker.lorem.slug(),
        emails_url: faker.lorem.slug(),
        emojis_url: faker.lorem.slug(),
        events_url: faker.lorem.slug(),
        feeds_url: faker.lorem.slug(),
        followers_url: faker.lorem.slug(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        hub_url: faker.lorem.slug(),
        issue_search_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        label_search_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        organization_url: faker.lorem.slug(),
        organization_repositories_url: faker.lorem.slug(),
        organization_teams_url: faker.lorem.slug(),
        public_gists_url: faker.lorem.slug(),
        rate_limit_url: faker.lorem.slug(),
        repository_url: faker.lorem.slug(),
        repository_search_url: faker.lorem.slug(),
        current_user_repositories_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        starred_gists_url: faker.lorem.slug(),
        topic_search_url: faker.lorem.slug(),
        user_url: faker.lorem.slug(),
        user_organizations_url: faker.lorem.slug(),
        user_repositories_url: faker.lorem.slug(),
        user_search_url: faker.lorem.slug(),
      },
    },
  },
  '/admin/hooks': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        type: faker.lorem.slug(),
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        active: faker.datatype.boolean(),
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        config: {
          url: faker.lorem.slug(),
          content_type: faker.lorem.slug(),
          insecure_ssl: faker.lorem.slug(),
          secret: faker.lorem.slug(),
        },
        updated_at: faker.lorem.slug(),
        created_at: faker.lorem.slug(),
        url: faker.lorem.slug(),
        ping_url: faker.lorem.slug(),
      })),
    },
    post: {
      201: {
        type: faker.lorem.slug(),
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        active: faker.datatype.boolean(),
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        config: {
          url: faker.lorem.slug(),
          content_type: faker.lorem.slug(),
          insecure_ssl: faker.lorem.slug(),
          secret: faker.lorem.slug(),
        },
        updated_at: faker.lorem.slug(),
        created_at: faker.lorem.slug(),
        url: faker.lorem.slug(),
        ping_url: faker.lorem.slug(),
      },
    },
  },
  '/admin/hooks/:hookId': {
    get: {
      200: {
        type: faker.lorem.slug(),
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        active: faker.datatype.boolean(),
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        config: {
          url: faker.lorem.slug(),
          content_type: faker.lorem.slug(),
          insecure_ssl: faker.lorem.slug(),
          secret: faker.lorem.slug(),
        },
        updated_at: faker.lorem.slug(),
        created_at: faker.lorem.slug(),
        url: faker.lorem.slug(),
        ping_url: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        type: faker.lorem.slug(),
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        active: faker.datatype.boolean(),
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        config: {
          url: faker.lorem.slug(),
          content_type: faker.lorem.slug(),
          insecure_ssl: faker.lorem.slug(),
        },
        updated_at: faker.lorem.slug(),
        created_at: faker.lorem.slug(),
        url: faker.lorem.slug(),
        ping_url: faker.lorem.slug(),
      },
    },
    delete: { 204: null },
  },
  '/admin/hooks/:hookId/pings': { post: { 204: null } },
  '/admin/keys': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        key: faker.lorem.slug(),
        user_id: faker.datatype.number(),
        repository_id: faker.datatype.number(),
        url: faker.lorem.slug(),
        title: faker.lorem.slug(),
        read_only: faker.datatype.boolean(),
        verified: faker.datatype.boolean(),
        created_at: faker.date.recent(),
        last_used: faker.date.recent(),
      })),
    },
  },
  '/admin/keys/:keyIds': { delete: { 204: null } },
  '/admin/ldap/teams/:teamId/mapping': {
    patch: {
      200: {
        ldap_dn: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        name: faker.lorem.slug(),
        slug: faker.lorem.slug(),
        description: faker.lorem.slug(),
        privacy: faker.lorem.slug(),
        permission: faker.lorem.slug(),
        members_url: faker.lorem.slug(),
        repositories_url: faker.lorem.slug(),
        parent: null,
      },
    },
  },
  '/admin/ldap/teams/:teamId/sync': {
    post: {
      201: {
        status: faker.lorem.slug(),
      },
    },
  },
  '/admin/ldap/users/:username/mapping': {
    patch: {
      200: {
        ldap_dn: faker.lorem.slug(),
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        name: faker.lorem.slug(),
        company: faker.lorem.slug(),
        blog: faker.lorem.slug(),
        location: faker.lorem.slug(),
        email: faker.internet.exampleEmail(),
        hireable: faker.datatype.boolean(),
        bio: faker.lorem.slug(),
        twitter_username: faker.lorem.slug(),
        public_repos: faker.datatype.number(),
        public_gists: faker.datatype.number(),
        followers: faker.datatype.number(),
        following: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        private_gists: faker.datatype.number(),
        total_private_repos: faker.datatype.number(),
        owned_private_repos: faker.datatype.number(),
        disk_usage: faker.datatype.number(),
        collaborators: faker.datatype.number(),
        two_factor_authentication: faker.datatype.boolean(),
        plan: {
          collaborators: faker.datatype.number(),
          name: faker.lorem.slug(),
          space: faker.datatype.number(),
          private_repos: faker.datatype.number(),
        },
        suspended_at: faker.date.recent(),
        business_plus: faker.datatype.boolean(),
      },
    },
  },
  '/admin/ldap/users/:username/sync': {
    post: {
      201: {
        status: faker.lorem.slug(),
      },
    },
  },
  '/admin/organizations': {
    post: {
      201: {
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.internet.url(),
        hooks_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        members_url: faker.lorem.slug(),
        public_members_url: faker.lorem.slug(),
        avatar_url: faker.lorem.slug(),
        description: faker.lorem.slug(),
      },
    },
  },
  '/admin/organizations/:org': {
    patch: {
      202: {
        message: faker.lorem.slug(),
        url: faker.lorem.slug(),
      },
    },
  },
  '/admin/pre-receive-environments': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        image_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        default_environment: faker.datatype.boolean(),
        created_at: faker.lorem.slug(),
        hooks_count: faker.datatype.number(),
        download: {
          url: faker.lorem.slug(),
          state: faker.lorem.slug(),
          downloaded_at: faker.lorem.slug(),
          message: faker.lorem.slug(),
        },
      })),
    },
    post: {
      201: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        image_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        default_environment: faker.datatype.boolean(),
        created_at: faker.lorem.slug(),
        hooks_count: faker.datatype.number(),
        download: {
          url: faker.lorem.slug(),
          state: faker.lorem.slug(),
          downloaded_at: faker.lorem.slug(),
          message: faker.lorem.slug(),
        },
      },
    },
  },
  '/admin/pre-receive-environments/:preReceiveEnvironmentId': {
    get: {
      200: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        image_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        default_environment: faker.datatype.boolean(),
        created_at: faker.lorem.slug(),
        hooks_count: faker.datatype.number(),
        download: {
          url: faker.lorem.slug(),
          state: faker.lorem.slug(),
          downloaded_at: faker.lorem.slug(),
          message: faker.lorem.slug(),
        },
      },
    },
    patch: {
      200: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        image_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        default_environment: faker.datatype.boolean(),
        created_at: faker.lorem.slug(),
        hooks_count: faker.datatype.number(),
        download: {
          url: faker.lorem.slug(),
          state: faker.lorem.slug(),
          downloaded_at: faker.lorem.slug(),
          message: faker.lorem.slug(),
        },
      },
      422: {
        message: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          code: faker.lorem.slug(),
          message: faker.lorem.slug(),
        })),
      },
    },
    delete: {
      204: null,
      422: {
        message: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          code: faker.lorem.slug(),
          message: faker.lorem.slug(),
        })),
      },
    },
  },
  '/admin/pre-receive-environments/:preReceiveEnvironmentId/downloads': {
    post: {
      202: {
        url: faker.lorem.slug(),
        state: faker.lorem.slug(),
        downloaded_at: faker.lorem.slug(),
        message: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          code: faker.lorem.slug(),
          message: faker.lorem.slug(),
        })),
      },
    },
  },
  '/admin/pre-receive-environments/:preReceiveEnvironmentId/downloads/latest': {
    get: {
      200: {
        url: faker.lorem.slug(),
        state: faker.lorem.slug(),
        downloaded_at: faker.lorem.slug(),
        message: faker.lorem.slug(),
      },
    },
  },
  '/admin/pre-receive-hooks': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        enforcement: faker.lorem.slug(),
        script: faker.lorem.slug(),
        script_repository: {
          id: faker.datatype.number(),
          full_name: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
        },
        environment: {
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          image_url: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          default_environment: faker.datatype.boolean(),
          created_at: faker.lorem.slug(),
          hooks_count: faker.datatype.number(),
          download: {
            url: faker.lorem.slug(),
            state: faker.lorem.slug(),
            downloaded_at: faker.lorem.slug(),
            message: faker.lorem.slug(),
          },
        },
        allow_downstream_configuration: faker.datatype.boolean(),
      })),
    },
    post: {
      201: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        enforcement: faker.lorem.slug(),
        script: faker.lorem.slug(),
        script_repository: {
          id: faker.datatype.number(),
          full_name: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
        },
        environment: {
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          image_url: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          default_environment: faker.datatype.boolean(),
          created_at: faker.lorem.slug(),
          hooks_count: faker.datatype.number(),
          download: {
            url: faker.lorem.slug(),
            state: faker.lorem.slug(),
            downloaded_at: faker.lorem.slug(),
            message: faker.lorem.slug(),
          },
        },
        allow_downstream_configuration: faker.datatype.boolean(),
      },
    },
  },
  '/admin/pre-receive-hooks/:preReceiveHookId': {
    get: {
      200: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        enforcement: faker.lorem.slug(),
        script: faker.lorem.slug(),
        script_repository: {
          id: faker.datatype.number(),
          full_name: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
        },
        environment: {
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          image_url: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          default_environment: faker.datatype.boolean(),
          created_at: faker.lorem.slug(),
          hooks_count: faker.datatype.number(),
          download: {
            url: faker.lorem.slug(),
            state: faker.lorem.slug(),
            downloaded_at: faker.lorem.slug(),
            message: faker.lorem.slug(),
          },
        },
        allow_downstream_configuration: faker.datatype.boolean(),
      },
    },
    patch: {
      200: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        enforcement: faker.lorem.slug(),
        script: faker.lorem.slug(),
        script_repository: {
          id: faker.datatype.number(),
          full_name: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
        },
        environment: {
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          image_url: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          default_environment: faker.datatype.boolean(),
          created_at: faker.lorem.slug(),
          hooks_count: faker.datatype.number(),
          download: {
            url: faker.lorem.slug(),
            state: faker.lorem.slug(),
            downloaded_at: faker.lorem.slug(),
            message: faker.lorem.slug(),
          },
        },
        allow_downstream_configuration: faker.datatype.boolean(),
      },
    },
    delete: { 204: null },
  },
  '/admin/tokens': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        url: faker.internet.url(),
        scopes: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        token: faker.lorem.slug(),
        token_last_eight: faker.lorem.slug(),
        hashed_token: faker.lorem.slug(),
        app: {
          client_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        note: faker.lorem.slug(),
        note_url: faker.internet.url(),
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        fingerprint: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        installation: {
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          single_file_name: faker.lorem.slug(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          repositories_url: faker.internet.url(),
          account: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        expires_at: faker.date.recent(),
      })),
    },
  },
  '/admin/tokens/:tokenId': { delete: { 204: null } },
  '/admin/users': {
    post: {
      201: {
        name: faker.lorem.slug(),
        email: faker.lorem.slug(),
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        starred_at: faker.lorem.slug(),
      },
    },
  },
  '/admin/users/:username': {
    patch: {
      202: {
        message: faker.lorem.slug(),
        url: faker.lorem.slug(),
      },
    },
    delete: { 204: null },
  },
  '/admin/users/:username/authorizations': {
    post: {
      201: {
        id: faker.datatype.number(),
        url: faker.internet.url(),
        scopes: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        token: faker.lorem.slug(),
        token_last_eight: faker.lorem.slug(),
        hashed_token: faker.lorem.slug(),
        app: {
          client_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        note: faker.lorem.slug(),
        note_url: faker.internet.url(),
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        fingerprint: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        installation: {
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          single_file_name: faker.lorem.slug(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          repositories_url: faker.internet.url(),
          account: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        expires_at: faker.date.recent(),
      },
    },
    delete: { 204: null },
  },
  '/app': {
    get: {
      200: {
        id: faker.datatype.number(),
        slug: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        name: faker.lorem.slug(),
        description: faker.lorem.slug(),
        external_url: faker.internet.url(),
        html_url: faker.internet.url(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        permissions: {
          issues: faker.lorem.slug(),
          checks: faker.lorem.slug(),
          metadata: faker.lorem.slug(),
          contents: faker.lorem.slug(),
          deployments: faker.lorem.slug(),
        },
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        installations_count: faker.datatype.number(),
        client_id: faker.lorem.slug(),
        client_secret: faker.lorem.slug(),
        webhook_secret: faker.lorem.slug(),
        pem: faker.lorem.slug(),
      },
    },
  },
  '/app-manifests/:code/conversions': {
    post: {
      201: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
  },
  '/app/hook/config': {
    get: {
      200: {
        url: faker.internet.url(),
        content_type: faker.lorem.slug(),
        secret: faker.lorem.slug(),
        insecure_ssl: null,
      },
    },
    patch: {
      200: {
        url: faker.internet.url(),
        content_type: faker.lorem.slug(),
        secret: faker.lorem.slug(),
        insecure_ssl: null,
      },
    },
  },
  '/app/hook/deliveries': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        guid: faker.lorem.slug(),
        delivered_at: faker.date.recent(),
        redelivery: faker.datatype.boolean(),
        duration: faker.datatype.number(),
        status: faker.lorem.slug(),
        status_code: faker.datatype.number(),
        event: faker.lorem.slug(),
        action: faker.lorem.slug(),
        installation_id: faker.datatype.number(),
        repository_id: faker.datatype.number(),
      })),
      400: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/app/hook/deliveries/:deliveryId': {
    get: {
      200: {
        id: faker.datatype.number(),
        guid: faker.lorem.slug(),
        delivered_at: faker.date.recent(),
        redelivery: faker.datatype.boolean(),
        duration: faker.datatype.number(),
        status: faker.lorem.slug(),
        status_code: faker.datatype.number(),
        event: faker.lorem.slug(),
        action: faker.lorem.slug(),
        installation_id: faker.datatype.number(),
        repository_id: faker.datatype.number(),
        url: faker.lorem.slug(),
        request: {
          headers: {},
          payload: {},
        },
        response: {
          headers: {},
          payload: faker.lorem.slug(),
        },
      },
      400: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/app/hook/deliveries/:deliveryId/attempts': {
    post: {
      202: {},
      400: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/app/installations': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        account: null,
        repository_selection: faker.random.arrayElement(['all', 'selected']),
        access_tokens_url: faker.internet.url(),
        repositories_url: faker.internet.url(),
        html_url: faker.internet.url(),
        app_id: faker.datatype.number(),
        target_id: faker.datatype.number(),
        target_type: faker.lorem.slug(),
        permissions: {
          actions: faker.random.arrayElement(['read', 'write']),
          administration: faker.random.arrayElement(['read', 'write']),
          checks: faker.random.arrayElement(['read', 'write']),
          contents: faker.random.arrayElement(['read', 'write']),
          deployments: faker.random.arrayElement(['read', 'write']),
          environments: faker.random.arrayElement(['read', 'write']),
          issues: faker.random.arrayElement(['read', 'write']),
          metadata: faker.random.arrayElement(['read', 'write']),
          packages: faker.random.arrayElement(['read', 'write']),
          pages: faker.random.arrayElement(['read', 'write']),
          pull_requests: faker.random.arrayElement(['read', 'write']),
          repository_hooks: faker.random.arrayElement(['read', 'write']),
          repository_projects: faker.random.arrayElement([
            'read',
            'write',
            'admin',
          ]),
          secret_scanning_alerts: faker.random.arrayElement(['read', 'write']),
          secrets: faker.random.arrayElement(['read', 'write']),
          security_events: faker.random.arrayElement(['read', 'write']),
          single_file: faker.random.arrayElement(['read', 'write']),
          statuses: faker.random.arrayElement(['read', 'write']),
          vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
          workflows: faker.random.arrayElement(['write']),
          members: faker.random.arrayElement(['read', 'write']),
          organization_administration: faker.random.arrayElement([
            'read',
            'write',
          ]),
          organization_hooks: faker.random.arrayElement(['read', 'write']),
          organization_plan: faker.random.arrayElement(['read']),
          organization_projects: faker.random.arrayElement([
            'read',
            'write',
            'admin',
          ]),
          organization_packages: faker.random.arrayElement(['read', 'write']),
          organization_secrets: faker.random.arrayElement(['read', 'write']),
          organization_self_hosted_runners: faker.random.arrayElement([
            'read',
            'write',
          ]),
          organization_user_blocking: faker.random.arrayElement([
            'read',
            'write',
          ]),
          team_discussions: faker.random.arrayElement(['read', 'write']),
          content_references: faker.random.arrayElement(['read', 'write']),
        },
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        single_file_name: faker.lorem.slug(),
        has_multiple_single_files: faker.datatype.boolean(),
        single_file_paths: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        app_slug: faker.lorem.slug(),
        suspended_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        suspended_at: faker.date.recent(),
        contact_email: faker.lorem.slug(),
      })),
    },
  },
  '/app/installations/:installationId': {
    get: {
      200: {
        id: faker.datatype.number(),
        account: null,
        repository_selection: faker.random.arrayElement(['all', 'selected']),
        access_tokens_url: faker.internet.url(),
        repositories_url: faker.internet.url(),
        html_url: faker.internet.url(),
        app_id: faker.datatype.number(),
        target_id: faker.datatype.number(),
        target_type: faker.lorem.slug(),
        permissions: {
          actions: faker.random.arrayElement(['read', 'write']),
          administration: faker.random.arrayElement(['read', 'write']),
          checks: faker.random.arrayElement(['read', 'write']),
          contents: faker.random.arrayElement(['read', 'write']),
          deployments: faker.random.arrayElement(['read', 'write']),
          environments: faker.random.arrayElement(['read', 'write']),
          issues: faker.random.arrayElement(['read', 'write']),
          metadata: faker.random.arrayElement(['read', 'write']),
          packages: faker.random.arrayElement(['read', 'write']),
          pages: faker.random.arrayElement(['read', 'write']),
          pull_requests: faker.random.arrayElement(['read', 'write']),
          repository_hooks: faker.random.arrayElement(['read', 'write']),
          repository_projects: faker.random.arrayElement([
            'read',
            'write',
            'admin',
          ]),
          secret_scanning_alerts: faker.random.arrayElement(['read', 'write']),
          secrets: faker.random.arrayElement(['read', 'write']),
          security_events: faker.random.arrayElement(['read', 'write']),
          single_file: faker.random.arrayElement(['read', 'write']),
          statuses: faker.random.arrayElement(['read', 'write']),
          vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
          workflows: faker.random.arrayElement(['write']),
          members: faker.random.arrayElement(['read', 'write']),
          organization_administration: faker.random.arrayElement([
            'read',
            'write',
          ]),
          organization_hooks: faker.random.arrayElement(['read', 'write']),
          organization_plan: faker.random.arrayElement(['read']),
          organization_projects: faker.random.arrayElement([
            'read',
            'write',
            'admin',
          ]),
          organization_packages: faker.random.arrayElement(['read', 'write']),
          organization_secrets: faker.random.arrayElement(['read', 'write']),
          organization_self_hosted_runners: faker.random.arrayElement([
            'read',
            'write',
          ]),
          organization_user_blocking: faker.random.arrayElement([
            'read',
            'write',
          ]),
          team_discussions: faker.random.arrayElement(['read', 'write']),
          content_references: faker.random.arrayElement(['read', 'write']),
        },
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        single_file_name: faker.lorem.slug(),
        has_multiple_single_files: faker.datatype.boolean(),
        single_file_paths: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        app_slug: faker.lorem.slug(),
        suspended_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        suspended_at: faker.date.recent(),
        contact_email: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      415: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
    delete: {
      204: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/app/installations/:installationId/access_tokens': {
    post: {
      201: {
        token: faker.lorem.slug(),
        expires_at: faker.lorem.slug(),
        permissions: {
          actions: faker.random.arrayElement(['read', 'write']),
          administration: faker.random.arrayElement(['read', 'write']),
          checks: faker.random.arrayElement(['read', 'write']),
          contents: faker.random.arrayElement(['read', 'write']),
          deployments: faker.random.arrayElement(['read', 'write']),
          environments: faker.random.arrayElement(['read', 'write']),
          issues: faker.random.arrayElement(['read', 'write']),
          metadata: faker.random.arrayElement(['read', 'write']),
          packages: faker.random.arrayElement(['read', 'write']),
          pages: faker.random.arrayElement(['read', 'write']),
          pull_requests: faker.random.arrayElement(['read', 'write']),
          repository_hooks: faker.random.arrayElement(['read', 'write']),
          repository_projects: faker.random.arrayElement([
            'read',
            'write',
            'admin',
          ]),
          secret_scanning_alerts: faker.random.arrayElement(['read', 'write']),
          secrets: faker.random.arrayElement(['read', 'write']),
          security_events: faker.random.arrayElement(['read', 'write']),
          single_file: faker.random.arrayElement(['read', 'write']),
          statuses: faker.random.arrayElement(['read', 'write']),
          vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
          workflows: faker.random.arrayElement(['write']),
          members: faker.random.arrayElement(['read', 'write']),
          organization_administration: faker.random.arrayElement([
            'read',
            'write',
          ]),
          organization_hooks: faker.random.arrayElement(['read', 'write']),
          organization_plan: faker.random.arrayElement(['read']),
          organization_projects: faker.random.arrayElement([
            'read',
            'write',
            'admin',
          ]),
          organization_packages: faker.random.arrayElement(['read', 'write']),
          organization_secrets: faker.random.arrayElement(['read', 'write']),
          organization_self_hosted_runners: faker.random.arrayElement([
            'read',
            'write',
          ]),
          organization_user_blocking: faker.random.arrayElement([
            'read',
            'write',
          ]),
          team_discussions: faker.random.arrayElement(['read', 'write']),
          content_references: faker.random.arrayElement(['read', 'write']),
        },
        repository_selection: faker.random.arrayElement(['all', 'selected']),
        repositories: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        })),
        single_file: faker.lorem.slug(),
        has_multiple_single_files: faker.datatype.boolean(),
        single_file_paths: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      415: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/app/installations/:installationId/suspended': {
    put: {
      204: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: {
      204: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/applications/grants': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        url: faker.internet.url(),
        app: {
          client_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        scopes: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/applications/grants/:grantId': {
    get: {
      200: {
        id: faker.datatype.number(),
        url: faker.internet.url(),
        app: {
          client_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        scopes: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: {
      204: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/applications/:clientId/grant': {
    delete: {
      204: null,
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/applications/:clientId/grants/:accessToken': { delete: { 204: null } },
  '/applications/:clientId/token': {
    post: {
      200: {
        id: faker.datatype.number(),
        url: faker.internet.url(),
        scopes: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        token: faker.lorem.slug(),
        token_last_eight: faker.lorem.slug(),
        hashed_token: faker.lorem.slug(),
        app: {
          client_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        note: faker.lorem.slug(),
        note_url: faker.internet.url(),
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        fingerprint: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        installation: {
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          single_file_name: faker.lorem.slug(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          repositories_url: faker.internet.url(),
          account: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        expires_at: faker.date.recent(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    patch: {
      200: {
        id: faker.datatype.number(),
        url: faker.internet.url(),
        scopes: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        token: faker.lorem.slug(),
        token_last_eight: faker.lorem.slug(),
        hashed_token: faker.lorem.slug(),
        app: {
          client_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        note: faker.lorem.slug(),
        note_url: faker.internet.url(),
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        fingerprint: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        installation: {
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          single_file_name: faker.lorem.slug(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          repositories_url: faker.internet.url(),
          account: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        expires_at: faker.date.recent(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: {
      204: null,
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/applications/:clientId/token/scoped': {
    post: {
      200: {
        id: faker.datatype.number(),
        url: faker.internet.url(),
        scopes: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        token: faker.lorem.slug(),
        token_last_eight: faker.lorem.slug(),
        hashed_token: faker.lorem.slug(),
        app: {
          client_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        note: faker.lorem.slug(),
        note_url: faker.internet.url(),
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        fingerprint: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        installation: {
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          single_file_name: faker.lorem.slug(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          repositories_url: faker.internet.url(),
          account: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        expires_at: faker.date.recent(),
      },
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/applications/:clientId/tokens/:accessToken': {
    get: {
      200: {
        id: faker.datatype.number(),
        url: faker.internet.url(),
        scopes: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        token: faker.lorem.slug(),
        token_last_eight: faker.lorem.slug(),
        hashed_token: faker.lorem.slug(),
        app: {
          client_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        note: faker.lorem.slug(),
        note_url: faker.internet.url(),
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        fingerprint: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        installation: {
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          single_file_name: faker.lorem.slug(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          repositories_url: faker.internet.url(),
          account: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        expires_at: faker.date.recent(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      200: {
        id: faker.datatype.number(),
        url: faker.internet.url(),
        scopes: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        token: faker.lorem.slug(),
        token_last_eight: faker.lorem.slug(),
        hashed_token: faker.lorem.slug(),
        app: {
          client_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        note: faker.lorem.slug(),
        note_url: faker.internet.url(),
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        fingerprint: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        installation: {
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          single_file_name: faker.lorem.slug(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          repositories_url: faker.internet.url(),
          account: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        expires_at: faker.date.recent(),
      },
    },
    delete: { 204: null },
  },
  '/apps/:appSlug': {
    get: {
      200: {
        id: faker.datatype.number(),
        slug: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        name: faker.lorem.slug(),
        description: faker.lorem.slug(),
        external_url: faker.internet.url(),
        html_url: faker.internet.url(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        permissions: {
          issues: faker.lorem.slug(),
          checks: faker.lorem.slug(),
          metadata: faker.lorem.slug(),
          contents: faker.lorem.slug(),
          deployments: faker.lorem.slug(),
        },
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        installations_count: faker.datatype.number(),
        client_id: faker.lorem.slug(),
        client_secret: faker.lorem.slug(),
        webhook_secret: faker.lorem.slug(),
        pem: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      415: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/authorizations': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        url: faker.internet.url(),
        scopes: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        token: faker.lorem.slug(),
        token_last_eight: faker.lorem.slug(),
        hashed_token: faker.lorem.slug(),
        app: {
          client_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        note: faker.lorem.slug(),
        note_url: faker.internet.url(),
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        fingerprint: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        installation: {
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          single_file_name: faker.lorem.slug(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          repositories_url: faker.internet.url(),
          account: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        expires_at: faker.date.recent(),
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      201: {
        id: faker.datatype.number(),
        url: faker.internet.url(),
        scopes: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        token: faker.lorem.slug(),
        token_last_eight: faker.lorem.slug(),
        hashed_token: faker.lorem.slug(),
        app: {
          client_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        note: faker.lorem.slug(),
        note_url: faker.internet.url(),
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        fingerprint: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        installation: {
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          single_file_name: faker.lorem.slug(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          repositories_url: faker.internet.url(),
          account: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        expires_at: faker.date.recent(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/authorizations/clients/:clientId': {
    put: {
      200: {
        id: faker.datatype.number(),
        url: faker.internet.url(),
        scopes: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        token: faker.lorem.slug(),
        token_last_eight: faker.lorem.slug(),
        hashed_token: faker.lorem.slug(),
        app: {
          client_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        note: faker.lorem.slug(),
        note_url: faker.internet.url(),
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        fingerprint: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        installation: {
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          single_file_name: faker.lorem.slug(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          repositories_url: faker.internet.url(),
          account: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        expires_at: faker.date.recent(),
      },
      201: {
        id: faker.datatype.number(),
        url: faker.internet.url(),
        scopes: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        token: faker.lorem.slug(),
        token_last_eight: faker.lorem.slug(),
        hashed_token: faker.lorem.slug(),
        app: {
          client_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        note: faker.lorem.slug(),
        note_url: faker.internet.url(),
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        fingerprint: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        installation: {
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          single_file_name: faker.lorem.slug(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          repositories_url: faker.internet.url(),
          account: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        expires_at: faker.date.recent(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/authorizations/clients/:clientId/:fingerprint': {
    put: {
      200: {
        id: faker.datatype.number(),
        url: faker.internet.url(),
        scopes: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        token: faker.lorem.slug(),
        token_last_eight: faker.lorem.slug(),
        hashed_token: faker.lorem.slug(),
        app: {
          client_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        note: faker.lorem.slug(),
        note_url: faker.internet.url(),
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        fingerprint: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        installation: {
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          single_file_name: faker.lorem.slug(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          repositories_url: faker.internet.url(),
          account: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        expires_at: faker.date.recent(),
      },
      201: {
        id: faker.datatype.number(),
        url: faker.internet.url(),
        scopes: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        token: faker.lorem.slug(),
        token_last_eight: faker.lorem.slug(),
        hashed_token: faker.lorem.slug(),
        app: {
          client_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        note: faker.lorem.slug(),
        note_url: faker.internet.url(),
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        fingerprint: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        installation: {
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          single_file_name: faker.lorem.slug(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          repositories_url: faker.internet.url(),
          account: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        expires_at: faker.date.recent(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/authorizations/:authorizationId': {
    get: {
      200: {
        id: faker.datatype.number(),
        url: faker.internet.url(),
        scopes: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        token: faker.lorem.slug(),
        token_last_eight: faker.lorem.slug(),
        hashed_token: faker.lorem.slug(),
        app: {
          client_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        note: faker.lorem.slug(),
        note_url: faker.internet.url(),
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        fingerprint: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        installation: {
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          single_file_name: faker.lorem.slug(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          repositories_url: faker.internet.url(),
          account: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        expires_at: faker.date.recent(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        id: faker.datatype.number(),
        url: faker.internet.url(),
        scopes: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        token: faker.lorem.slug(),
        token_last_eight: faker.lorem.slug(),
        hashed_token: faker.lorem.slug(),
        app: {
          client_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        note: faker.lorem.slug(),
        note_url: faker.internet.url(),
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        fingerprint: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        installation: {
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          single_file_name: faker.lorem.slug(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          repositories_url: faker.internet.url(),
          account: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        expires_at: faker.date.recent(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: {
      204: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/codes_of_conduct': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        key: faker.lorem.slug(),
        name: faker.lorem.slug(),
        url: faker.internet.url(),
        body: faker.lorem.slug(),
        html_url: faker.internet.url(),
      })),
      304: null,
    },
  },
  '/codes_of_conduct/:key': {
    get: {
      200: {
        key: faker.lorem.slug(),
        name: faker.lorem.slug(),
        url: faker.internet.url(),
        body: faker.lorem.slug(),
        html_url: faker.internet.url(),
      },
      304: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/emojis': {
    get: {
      200: [...new Array(5).keys()]
        .map(_ => ({ [faker.lorem.word()]: faker.lorem.slug() }))
        .reduce((acc, next) => Object.assign(acc, next), {}),
      304: null,
    },
  },
  '/enterprise/announcement': {
    get: {
      200: {
        announcement: faker.lorem.slug(),
        expires_at: faker.date.recent(),
      },
    },
    patch: {
      200: {
        announcement: faker.lorem.slug(),
        expires_at: faker.date.recent(),
      },
    },
    delete: { 204: null },
  },
  '/enterprise/settings/license': {
    get: {
      200: {
        seats: null,
        seats_used: faker.datatype.number(),
        seats_available: null,
        kind: faker.lorem.slug(),
        days_until_expiration: faker.datatype.number(),
        expire_at: faker.lorem.slug(),
      },
    },
  },
  '/enterprise/stats/all': {
    get: {
      200: {
        repos: {
          total_repos: faker.datatype.number(),
          root_repos: faker.datatype.number(),
          fork_repos: faker.datatype.number(),
          org_repos: faker.datatype.number(),
          total_pushes: faker.datatype.number(),
          total_wikis: faker.datatype.number(),
        },
        hooks: {
          total_hooks: faker.datatype.number(),
          active_hooks: faker.datatype.number(),
          inactive_hooks: faker.datatype.number(),
        },
        pages: {
          total_pages: faker.datatype.number(),
        },
        orgs: {
          total_orgs: faker.datatype.number(),
          disabled_orgs: faker.datatype.number(),
          total_teams: faker.datatype.number(),
          total_team_members: faker.datatype.number(),
        },
        users: {
          total_users: faker.datatype.number(),
          admin_users: faker.datatype.number(),
          suspended_users: faker.datatype.number(),
        },
        pulls: {
          total_pulls: faker.datatype.number(),
          merged_pulls: faker.datatype.number(),
          mergeable_pulls: faker.datatype.number(),
          unmergeable_pulls: faker.datatype.number(),
        },
        issues: {
          total_issues: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
        },
        milestones: {
          total_milestones: faker.datatype.number(),
          open_milestones: faker.datatype.number(),
          closed_milestones: faker.datatype.number(),
        },
        gists: {
          total_gists: faker.datatype.number(),
          private_gists: faker.datatype.number(),
          public_gists: faker.datatype.number(),
        },
        comments: {
          total_commit_comments: faker.datatype.number(),
          total_gist_comments: faker.datatype.number(),
          total_issue_comments: faker.datatype.number(),
          total_pull_request_comments: faker.datatype.number(),
        },
      },
    },
  },
  '/enterprise/stats/comments': {
    get: {
      200: {
        total_commit_comments: faker.datatype.number(),
        total_gist_comments: faker.datatype.number(),
        total_issue_comments: faker.datatype.number(),
        total_pull_request_comments: faker.datatype.number(),
      },
    },
  },
  '/enterprise/stats/gists': {
    get: {
      200: {
        total_gists: faker.datatype.number(),
        private_gists: faker.datatype.number(),
        public_gists: faker.datatype.number(),
      },
    },
  },
  '/enterprise/stats/hooks': {
    get: {
      200: {
        total_hooks: faker.datatype.number(),
        active_hooks: faker.datatype.number(),
        inactive_hooks: faker.datatype.number(),
      },
    },
  },
  '/enterprise/stats/issues': {
    get: {
      200: {
        total_issues: faker.datatype.number(),
        open_issues: faker.datatype.number(),
        closed_issues: faker.datatype.number(),
      },
    },
  },
  '/enterprise/stats/milestones': {
    get: {
      200: {
        total_milestones: faker.datatype.number(),
        open_milestones: faker.datatype.number(),
        closed_milestones: faker.datatype.number(),
      },
    },
  },
  '/enterprise/stats/orgs': {
    get: {
      200: {
        total_orgs: faker.datatype.number(),
        disabled_orgs: faker.datatype.number(),
        total_teams: faker.datatype.number(),
        total_team_members: faker.datatype.number(),
      },
    },
  },
  '/enterprise/stats/pages': {
    get: {
      200: {
        total_pages: faker.datatype.number(),
      },
    },
  },
  '/enterprise/stats/pulls': {
    get: {
      200: {
        total_pulls: faker.datatype.number(),
        merged_pulls: faker.datatype.number(),
        mergeable_pulls: faker.datatype.number(),
        unmergeable_pulls: faker.datatype.number(),
      },
    },
  },
  '/enterprise/stats/repos': {
    get: {
      200: {
        total_repos: faker.datatype.number(),
        root_repos: faker.datatype.number(),
        fork_repos: faker.datatype.number(),
        org_repos: faker.datatype.number(),
        total_pushes: faker.datatype.number(),
        total_wikis: faker.datatype.number(),
      },
    },
  },
  '/enterprise/stats/users': {
    get: {
      200: {
        total_users: faker.datatype.number(),
        admin_users: faker.datatype.number(),
        suspended_users: faker.datatype.number(),
      },
    },
  },
  '/enterprises/:enterprise/actions/permissions': {
    get: {
      200: {
        enabled_organizations: faker.random.arrayElement([
          'all',
          'none',
          'selected',
        ]),
        selected_organizations_url: faker.lorem.slug(),
        allowed_actions: faker.random.arrayElement([
          'all',
          'local_only',
          'selected',
        ]),
        selected_actions_url: faker.lorem.slug(),
      },
    },
    put: { 204: null },
  },
  '/enterprises/:enterprise/actions/permissions/organizations': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        organizations: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          hooks_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          members_url: faker.lorem.slug(),
          public_members_url: faker.lorem.slug(),
          avatar_url: faker.lorem.slug(),
          description: faker.lorem.slug(),
        })),
      },
    },
    put: { 204: null },
  },
  '/enterprises/:enterprise/actions/permissions/organizations/:orgId': {
    put: { 204: null },
    delete: { 204: null },
  },
  '/enterprises/:enterprise/actions/permissions/selected-actions': {
    get: {
      200: {
        github_owned_allowed: faker.datatype.boolean(),
        patterns_allowed: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
    put: { 204: null },
  },
  '/enterprises/:enterprise/actions/runner-groups': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        runner_groups: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          visibility: faker.lorem.slug(),
          default: faker.datatype.boolean(),
          selected_organizations_url: faker.lorem.slug(),
          runners_url: faker.lorem.slug(),
          allows_public_repositories: faker.datatype.boolean(),
        })),
      },
    },
    post: {
      201: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        visibility: faker.lorem.slug(),
        default: faker.datatype.boolean(),
        selected_organizations_url: faker.lorem.slug(),
        runners_url: faker.lorem.slug(),
        allows_public_repositories: faker.datatype.boolean(),
      },
    },
  },
  '/enterprises/:enterprise/actions/runner-groups/:runnerGroupId': {
    get: {
      200: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        visibility: faker.lorem.slug(),
        default: faker.datatype.boolean(),
        selected_organizations_url: faker.lorem.slug(),
        runners_url: faker.lorem.slug(),
        allows_public_repositories: faker.datatype.boolean(),
      },
    },
    patch: {
      200: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        visibility: faker.lorem.slug(),
        default: faker.datatype.boolean(),
        selected_organizations_url: faker.lorem.slug(),
        runners_url: faker.lorem.slug(),
        allows_public_repositories: faker.datatype.boolean(),
      },
    },
    delete: { 204: null },
  },
  '/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/organizations':
    {
      get: {
        200: {
          total_count: faker.datatype.number(),
          organizations: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.internet.url(),
            hooks_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            members_url: faker.lorem.slug(),
            public_members_url: faker.lorem.slug(),
            avatar_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
          })),
        },
      },
      put: { 204: null },
    },
  '/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/organizations/:orgId':
    { put: { 204: null }, delete: { 204: null } },
  '/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/runners': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        runners: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          os: faker.lorem.slug(),
          status: faker.lorem.slug(),
          busy: faker.datatype.boolean(),
          labels: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            name: faker.lorem.slug(),
            type: faker.random.arrayElement(['read-only', 'custom']),
          })),
        })),
      },
    },
    put: { 204: null },
  },
  '/enterprises/:enterprise/actions/runner-groups/:runnerGroupId/runners/:runnerId':
    { put: { 204: null }, delete: { 204: null } },
  '/enterprises/:enterprise/actions/runners': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        runners: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          os: faker.lorem.slug(),
          status: faker.lorem.slug(),
          busy: faker.datatype.boolean(),
          labels: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            name: faker.lorem.slug(),
            type: faker.random.arrayElement(['read-only', 'custom']),
          })),
        })),
      },
    },
  },
  '/enterprises/:enterprise/actions/runners/downloads': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        os: faker.lorem.slug(),
        architecture: faker.lorem.slug(),
        download_url: faker.lorem.slug(),
        filename: faker.lorem.slug(),
        temp_download_token: faker.lorem.slug(),
        sha256_checksum: faker.lorem.slug(),
      })),
    },
  },
  '/enterprises/:enterprise/actions/runners/registration-token': {
    post: {
      201: {
        token: faker.lorem.slug(),
        expires_at: faker.date.recent(),
        permissions: {},
        repositories: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        })),
        single_file: faker.lorem.slug(),
        repository_selection: faker.random.arrayElement(['all', 'selected']),
      },
    },
  },
  '/enterprises/:enterprise/actions/runners/remove-token': {
    post: {
      201: {
        token: faker.lorem.slug(),
        expires_at: faker.date.recent(),
        permissions: {},
        repositories: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        })),
        single_file: faker.lorem.slug(),
        repository_selection: faker.random.arrayElement(['all', 'selected']),
      },
    },
  },
  '/enterprises/:enterprise/actions/runners/:runnerId': {
    get: {
      200: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        os: faker.lorem.slug(),
        status: faker.lorem.slug(),
        busy: faker.datatype.boolean(),
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          type: faker.random.arrayElement(['read-only', 'custom']),
        })),
      },
    },
    delete: { 204: null },
  },
  '/enterprises/:enterprise/audit-log': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        '@timestamp': faker.datatype.number(),
        action: faker.lorem.slug(),
        active: faker.datatype.boolean(),
        active_was: faker.datatype.boolean(),
        actor: faker.lorem.slug(),
        actor_id: faker.datatype.number(),
        actor_location: {
          country_name: faker.lorem.slug(),
        },
        data: {},
        org_id: faker.datatype.number(),
        blocked_user: faker.lorem.slug(),
        business: faker.lorem.slug(),
        config: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({})),
        config_was: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({})),
        content_type: faker.lorem.slug(),
        created_at: faker.datatype.number(),
        deploy_key_fingerprint: faker.lorem.slug(),
        _document_id: faker.lorem.slug(),
        emoji: faker.lorem.slug(),
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({})),
        events_were: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({})),
        explanation: faker.lorem.slug(),
        fingerprint: faker.lorem.slug(),
        hook_id: faker.datatype.number(),
        limited_availability: faker.datatype.boolean(),
        message: faker.lorem.slug(),
        name: faker.lorem.slug(),
        old_user: faker.lorem.slug(),
        openssh_public_key: faker.lorem.slug(),
        org: faker.lorem.slug(),
        previous_visibility: faker.lorem.slug(),
        read_only: faker.datatype.boolean(),
        repo: faker.lorem.slug(),
        repository: faker.lorem.slug(),
        repository_public: faker.datatype.boolean(),
        target_login: faker.lorem.slug(),
        team: faker.lorem.slug(),
        transport_protocol: faker.datatype.number(),
        transport_protocol_name: faker.lorem.slug(),
        user: faker.lorem.slug(),
        visibility: faker.lorem.slug(),
      })),
    },
  },
  '/events': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.lorem.slug(),
        type: faker.lorem.slug(),
        actor: {
          id: faker.datatype.number(),
          login: faker.lorem.slug(),
          display_login: faker.lorem.slug(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          avatar_url: faker.internet.url(),
        },
        repo: {
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        org: {
          id: faker.datatype.number(),
          login: faker.lorem.slug(),
          display_login: faker.lorem.slug(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          avatar_url: faker.internet.url(),
        },
        payload: {
          action: faker.lorem.slug(),
          issue: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            repository_url: faker.internet.url(),
            labels_url: faker.lorem.slug(),
            comments_url: faker.internet.url(),
            events_url: faker.internet.url(),
            html_url: faker.internet.url(),
            number: faker.datatype.number(),
            state: faker.lorem.slug(),
            title: faker.lorem.slug(),
            body: faker.lorem.slug(),
            user: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            labels: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            assignee: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            })),
            milestone: {
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.lorem.slug(),
              description: faker.lorem.slug(),
              creator: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              closed_at: faker.date.recent(),
              due_on: faker.date.recent(),
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.lorem.slug(),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.date.recent(),
              diff_url: faker.internet.url(),
              html_url: faker.internet.url(),
              patch_url: faker.internet.url(),
              url: faker.internet.url(),
            },
            closed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            body_html: faker.lorem.slug(),
            body_text: faker.lorem.slug(),
            timeline_url: faker.internet.url(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              license: {
                key: faker.lorem.slug(),
                name: faker.lorem.slug(),
                url: faker.internet.url(),
                spdx_id: faker.lorem.slug(),
                node_id: faker.lorem.slug(),
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.date.recent(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                name: faker.lorem.slug(),
                full_name: faker.lorem.slug(),
                owner: {
                  login: faker.lorem.slug(),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(),
                  avatar_url: faker.lorem.slug(),
                  gravatar_id: faker.lorem.slug(),
                  url: faker.lorem.slug(),
                  html_url: faker.lorem.slug(),
                  followers_url: faker.lorem.slug(),
                  following_url: faker.lorem.slug(),
                  gists_url: faker.lorem.slug(),
                  starred_url: faker.lorem.slug(),
                  subscriptions_url: faker.lorem.slug(),
                  organizations_url: faker.lorem.slug(),
                  repos_url: faker.lorem.slug(),
                  events_url: faker.lorem.slug(),
                  received_events_url: faker.lorem.slug(),
                  type: faker.lorem.slug(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.lorem.slug(),
                description: faker.lorem.slug(),
                fork: faker.datatype.boolean(),
                url: faker.lorem.slug(),
                archive_url: faker.lorem.slug(),
                assignees_url: faker.lorem.slug(),
                blobs_url: faker.lorem.slug(),
                branches_url: faker.lorem.slug(),
                collaborators_url: faker.lorem.slug(),
                comments_url: faker.lorem.slug(),
                commits_url: faker.lorem.slug(),
                compare_url: faker.lorem.slug(),
                contents_url: faker.lorem.slug(),
                contributors_url: faker.lorem.slug(),
                deployments_url: faker.lorem.slug(),
                downloads_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                forks_url: faker.lorem.slug(),
                git_commits_url: faker.lorem.slug(),
                git_refs_url: faker.lorem.slug(),
                git_tags_url: faker.lorem.slug(),
                git_url: faker.lorem.slug(),
                issue_comment_url: faker.lorem.slug(),
                issue_events_url: faker.lorem.slug(),
                issues_url: faker.lorem.slug(),
                keys_url: faker.lorem.slug(),
                labels_url: faker.lorem.slug(),
                languages_url: faker.lorem.slug(),
                merges_url: faker.lorem.slug(),
                milestones_url: faker.lorem.slug(),
                notifications_url: faker.lorem.slug(),
                pulls_url: faker.lorem.slug(),
                releases_url: faker.lorem.slug(),
                ssh_url: faker.lorem.slug(),
                stargazers_url: faker.lorem.slug(),
                statuses_url: faker.lorem.slug(),
                subscribers_url: faker.lorem.slug(),
                subscription_url: faker.lorem.slug(),
                tags_url: faker.lorem.slug(),
                teams_url: faker.lorem.slug(),
                trees_url: faker.lorem.slug(),
                clone_url: faker.lorem.slug(),
                mirror_url: faker.lorem.slug(),
                hooks_url: faker.lorem.slug(),
                svn_url: faker.lorem.slug(),
                homepage: faker.lorem.slug(),
                language: faker.lorem.slug(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(),
                pushed_at: faker.lorem.slug(),
                created_at: faker.lorem.slug(),
                updated_at: faker.lorem.slug(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(),
              starred_at: faker.lorem.slug(),
            },
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          },
          comment: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            body_text: faker.lorem.slug(),
            body_html: faker.lorem.slug(),
            html_url: faker.internet.url(),
            user: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            issue_url: faker.internet.url(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          },
          pages: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            page_name: faker.lorem.slug(),
            title: faker.lorem.slug(),
            summary: faker.lorem.slug(),
            action: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
          })),
        },
        public: faker.datatype.boolean(),
        created_at: faker.date.recent(),
      })),
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/feeds': {
    get: {
      200: {
        timeline_url: faker.lorem.slug(),
        user_url: faker.lorem.slug(),
        current_user_public_url: faker.lorem.slug(),
        current_user_url: faker.lorem.slug(),
        current_user_actor_url: faker.lorem.slug(),
        current_user_organization_url: faker.lorem.slug(),
        current_user_organization_urls: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.internet.url()),
        security_advisories_url: faker.lorem.slug(),
        _links: {
          timeline: {
            href: faker.lorem.slug(),
            type: faker.lorem.slug(),
          },
          user: {
            href: faker.lorem.slug(),
            type: faker.lorem.slug(),
          },
          security_advisories: {
            href: faker.lorem.slug(),
            type: faker.lorem.slug(),
          },
          current_user: {
            href: faker.lorem.slug(),
            type: faker.lorem.slug(),
          },
          current_user_public: {
            href: faker.lorem.slug(),
            type: faker.lorem.slug(),
          },
          current_user_actor: {
            href: faker.lorem.slug(),
            type: faker.lorem.slug(),
          },
          current_user_organization: {
            href: faker.lorem.slug(),
            type: faker.lorem.slug(),
          },
          current_user_organizations: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            href: faker.lorem.slug(),
            type: faker.lorem.slug(),
          })),
        },
      },
    },
  },
  '/gists': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        forks_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        id: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        git_pull_url: faker.internet.url(),
        git_push_url: faker.internet.url(),
        html_url: faker.internet.url(),
        files: [...new Array(5).keys()]
          .map(_ => ({
            [faker.lorem.word()]: {
              filename: faker.lorem.slug(),
              type: faker.lorem.slug(),
              language: faker.lorem.slug(),
              raw_url: faker.lorem.slug(),
              size: faker.datatype.number(),
            },
          }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
        public: faker.datatype.boolean(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        description: faker.lorem.slug(),
        comments: faker.datatype.number(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        comments_url: faker.internet.url(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        truncated: faker.datatype.boolean(),
        forks: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
        history: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
      })),
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      201: {
        forks: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.lorem.slug(),
          url: faker.internet.url(),
          user: {
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            name: faker.lorem.slug(),
            company: faker.lorem.slug(),
            blog: faker.lorem.slug(),
            location: faker.lorem.slug(),
            email: faker.internet.exampleEmail(),
            hireable: faker.datatype.boolean(),
            bio: faker.lorem.slug(),
            twitter_username: faker.lorem.slug(),
            public_repos: faker.datatype.number(),
            public_gists: faker.datatype.number(),
            followers: faker.datatype.number(),
            following: faker.datatype.number(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            plan: {
              collaborators: faker.datatype.number(),
              name: faker.lorem.slug(),
              space: faker.datatype.number(),
              private_repos: faker.datatype.number(),
            },
            suspended_at: faker.date.recent(),
            private_gists: faker.datatype.number(),
            total_private_repos: faker.datatype.number(),
            owned_private_repos: faker.datatype.number(),
            disk_usage: faker.datatype.number(),
            collaborators: faker.datatype.number(),
          },
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
        })),
        history: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          version: faker.lorem.slug(),
          committed_at: faker.date.recent(),
          change_status: {
            total: faker.datatype.number(),
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
          },
          url: faker.internet.url(),
        })),
        fork_of: {
          url: faker.internet.url(),
          forks_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          id: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          git_pull_url: faker.internet.url(),
          git_push_url: faker.internet.url(),
          html_url: faker.internet.url(),
          files: [...new Array(5).keys()]
            .map(_ => ({
              [faker.lorem.word()]: {
                filename: faker.lorem.slug(),
                type: faker.lorem.slug(),
                language: faker.lorem.slug(),
                raw_url: faker.lorem.slug(),
                size: faker.datatype.number(),
              },
            }))
            .reduce((acc, next) => Object.assign(acc, next), {}),
          public: faker.datatype.boolean(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          description: faker.lorem.slug(),
          comments: faker.datatype.number(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          comments_url: faker.internet.url(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          truncated: faker.datatype.boolean(),
          forks: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
          history: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
        },
        url: faker.lorem.slug(),
        forks_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        id: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        git_pull_url: faker.lorem.slug(),
        git_push_url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        files: [...new Array(5).keys()]
          .map(_ => ({
            [faker.lorem.word()]: {
              filename: faker.lorem.slug(),
              type: faker.lorem.slug(),
              language: faker.lorem.slug(),
              raw_url: faker.lorem.slug(),
              size: faker.datatype.number(),
              truncated: faker.datatype.boolean(),
              content: faker.lorem.slug(),
            },
          }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
        public: faker.datatype.boolean(),
        created_at: faker.lorem.slug(),
        updated_at: faker.lorem.slug(),
        description: faker.lorem.slug(),
        comments: faker.datatype.number(),
        user: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        truncated: faker.datatype.boolean(),
      },
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/gists/public': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        forks_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        id: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        git_pull_url: faker.internet.url(),
        git_push_url: faker.internet.url(),
        html_url: faker.internet.url(),
        files: [...new Array(5).keys()]
          .map(_ => ({
            [faker.lorem.word()]: {
              filename: faker.lorem.slug(),
              type: faker.lorem.slug(),
              language: faker.lorem.slug(),
              raw_url: faker.lorem.slug(),
              size: faker.datatype.number(),
            },
          }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
        public: faker.datatype.boolean(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        description: faker.lorem.slug(),
        comments: faker.datatype.number(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        comments_url: faker.internet.url(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        truncated: faker.datatype.boolean(),
        forks: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
        history: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
      })),
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/gists/starred': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        forks_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        id: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        git_pull_url: faker.internet.url(),
        git_push_url: faker.internet.url(),
        html_url: faker.internet.url(),
        files: [...new Array(5).keys()]
          .map(_ => ({
            [faker.lorem.word()]: {
              filename: faker.lorem.slug(),
              type: faker.lorem.slug(),
              language: faker.lorem.slug(),
              raw_url: faker.lorem.slug(),
              size: faker.datatype.number(),
            },
          }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
        public: faker.datatype.boolean(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        description: faker.lorem.slug(),
        comments: faker.datatype.number(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        comments_url: faker.internet.url(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        truncated: faker.datatype.boolean(),
        forks: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
        history: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/gists/:gistId': {
    get: {
      200: {
        forks: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.lorem.slug(),
          url: faker.internet.url(),
          user: {
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            name: faker.lorem.slug(),
            company: faker.lorem.slug(),
            blog: faker.lorem.slug(),
            location: faker.lorem.slug(),
            email: faker.internet.exampleEmail(),
            hireable: faker.datatype.boolean(),
            bio: faker.lorem.slug(),
            twitter_username: faker.lorem.slug(),
            public_repos: faker.datatype.number(),
            public_gists: faker.datatype.number(),
            followers: faker.datatype.number(),
            following: faker.datatype.number(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            plan: {
              collaborators: faker.datatype.number(),
              name: faker.lorem.slug(),
              space: faker.datatype.number(),
              private_repos: faker.datatype.number(),
            },
            suspended_at: faker.date.recent(),
            private_gists: faker.datatype.number(),
            total_private_repos: faker.datatype.number(),
            owned_private_repos: faker.datatype.number(),
            disk_usage: faker.datatype.number(),
            collaborators: faker.datatype.number(),
          },
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
        })),
        history: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          version: faker.lorem.slug(),
          committed_at: faker.date.recent(),
          change_status: {
            total: faker.datatype.number(),
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
          },
          url: faker.internet.url(),
        })),
        fork_of: {
          url: faker.internet.url(),
          forks_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          id: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          git_pull_url: faker.internet.url(),
          git_push_url: faker.internet.url(),
          html_url: faker.internet.url(),
          files: [...new Array(5).keys()]
            .map(_ => ({
              [faker.lorem.word()]: {
                filename: faker.lorem.slug(),
                type: faker.lorem.slug(),
                language: faker.lorem.slug(),
                raw_url: faker.lorem.slug(),
                size: faker.datatype.number(),
              },
            }))
            .reduce((acc, next) => Object.assign(acc, next), {}),
          public: faker.datatype.boolean(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          description: faker.lorem.slug(),
          comments: faker.datatype.number(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          comments_url: faker.internet.url(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          truncated: faker.datatype.boolean(),
          forks: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
          history: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
        },
        url: faker.lorem.slug(),
        forks_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        id: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        git_pull_url: faker.lorem.slug(),
        git_push_url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        files: [...new Array(5).keys()]
          .map(_ => ({
            [faker.lorem.word()]: {
              filename: faker.lorem.slug(),
              type: faker.lorem.slug(),
              language: faker.lorem.slug(),
              raw_url: faker.lorem.slug(),
              size: faker.datatype.number(),
              truncated: faker.datatype.boolean(),
              content: faker.lorem.slug(),
            },
          }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
        public: faker.datatype.boolean(),
        created_at: faker.lorem.slug(),
        updated_at: faker.lorem.slug(),
        description: faker.lorem.slug(),
        comments: faker.datatype.number(),
        user: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        truncated: faker.datatype.boolean(),
      },
      304: null,
      403: {
        block: {
          reason: faker.lorem.slug(),
          created_at: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
        },
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        forks: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.lorem.slug(),
          url: faker.internet.url(),
          user: {
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            name: faker.lorem.slug(),
            company: faker.lorem.slug(),
            blog: faker.lorem.slug(),
            location: faker.lorem.slug(),
            email: faker.internet.exampleEmail(),
            hireable: faker.datatype.boolean(),
            bio: faker.lorem.slug(),
            twitter_username: faker.lorem.slug(),
            public_repos: faker.datatype.number(),
            public_gists: faker.datatype.number(),
            followers: faker.datatype.number(),
            following: faker.datatype.number(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            plan: {
              collaborators: faker.datatype.number(),
              name: faker.lorem.slug(),
              space: faker.datatype.number(),
              private_repos: faker.datatype.number(),
            },
            suspended_at: faker.date.recent(),
            private_gists: faker.datatype.number(),
            total_private_repos: faker.datatype.number(),
            owned_private_repos: faker.datatype.number(),
            disk_usage: faker.datatype.number(),
            collaborators: faker.datatype.number(),
          },
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
        })),
        history: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          version: faker.lorem.slug(),
          committed_at: faker.date.recent(),
          change_status: {
            total: faker.datatype.number(),
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
          },
          url: faker.internet.url(),
        })),
        fork_of: {
          url: faker.internet.url(),
          forks_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          id: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          git_pull_url: faker.internet.url(),
          git_push_url: faker.internet.url(),
          html_url: faker.internet.url(),
          files: [...new Array(5).keys()]
            .map(_ => ({
              [faker.lorem.word()]: {
                filename: faker.lorem.slug(),
                type: faker.lorem.slug(),
                language: faker.lorem.slug(),
                raw_url: faker.lorem.slug(),
                size: faker.datatype.number(),
              },
            }))
            .reduce((acc, next) => Object.assign(acc, next), {}),
          public: faker.datatype.boolean(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          description: faker.lorem.slug(),
          comments: faker.datatype.number(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          comments_url: faker.internet.url(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          truncated: faker.datatype.boolean(),
          forks: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
          history: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
        },
        url: faker.lorem.slug(),
        forks_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        id: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        git_pull_url: faker.lorem.slug(),
        git_push_url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        files: [...new Array(5).keys()]
          .map(_ => ({
            [faker.lorem.word()]: {
              filename: faker.lorem.slug(),
              type: faker.lorem.slug(),
              language: faker.lorem.slug(),
              raw_url: faker.lorem.slug(),
              size: faker.datatype.number(),
              truncated: faker.datatype.boolean(),
              content: faker.lorem.slug(),
            },
          }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
        public: faker.datatype.boolean(),
        created_at: faker.lorem.slug(),
        updated_at: faker.lorem.slug(),
        description: faker.lorem.slug(),
        comments: faker.datatype.number(),
        user: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        truncated: faker.datatype.boolean(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: {
      204: null,
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/gists/:gistId/comments': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        body: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
      })),
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      201: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        body: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
      },
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/gists/:gistId/comments/:commentId': {
    get: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        body: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
      },
      304: null,
      403: {
        block: {
          reason: faker.lorem.slug(),
          created_at: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
        },
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        body: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: {
      204: null,
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/gists/:gistId/commits': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        version: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        change_status: {
          total: faker.datatype.number(),
          additions: faker.datatype.number(),
          deletions: faker.datatype.number(),
        },
        committed_at: faker.date.recent(),
      })),
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/gists/:gistId/forks': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        forks: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.lorem.slug(),
          url: faker.internet.url(),
          user: {
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            name: faker.lorem.slug(),
            company: faker.lorem.slug(),
            blog: faker.lorem.slug(),
            location: faker.lorem.slug(),
            email: faker.internet.exampleEmail(),
            hireable: faker.datatype.boolean(),
            bio: faker.lorem.slug(),
            twitter_username: faker.lorem.slug(),
            public_repos: faker.datatype.number(),
            public_gists: faker.datatype.number(),
            followers: faker.datatype.number(),
            following: faker.datatype.number(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            plan: {
              collaborators: faker.datatype.number(),
              name: faker.lorem.slug(),
              space: faker.datatype.number(),
              private_repos: faker.datatype.number(),
            },
            suspended_at: faker.date.recent(),
            private_gists: faker.datatype.number(),
            total_private_repos: faker.datatype.number(),
            owned_private_repos: faker.datatype.number(),
            disk_usage: faker.datatype.number(),
            collaborators: faker.datatype.number(),
          },
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
        })),
        history: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          version: faker.lorem.slug(),
          committed_at: faker.date.recent(),
          change_status: {
            total: faker.datatype.number(),
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
          },
          url: faker.internet.url(),
        })),
        fork_of: {
          url: faker.internet.url(),
          forks_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          id: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          git_pull_url: faker.internet.url(),
          git_push_url: faker.internet.url(),
          html_url: faker.internet.url(),
          files: [...new Array(5).keys()]
            .map(_ => ({
              [faker.lorem.word()]: {
                filename: faker.lorem.slug(),
                type: faker.lorem.slug(),
                language: faker.lorem.slug(),
                raw_url: faker.lorem.slug(),
                size: faker.datatype.number(),
              },
            }))
            .reduce((acc, next) => Object.assign(acc, next), {}),
          public: faker.datatype.boolean(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          description: faker.lorem.slug(),
          comments: faker.datatype.number(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          comments_url: faker.internet.url(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          truncated: faker.datatype.boolean(),
          forks: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
          history: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
        },
        url: faker.lorem.slug(),
        forks_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        id: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        git_pull_url: faker.lorem.slug(),
        git_push_url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        files: [...new Array(5).keys()]
          .map(_ => ({
            [faker.lorem.word()]: {
              filename: faker.lorem.slug(),
              type: faker.lorem.slug(),
              language: faker.lorem.slug(),
              raw_url: faker.lorem.slug(),
              size: faker.datatype.number(),
              truncated: faker.datatype.boolean(),
              content: faker.lorem.slug(),
            },
          }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
        public: faker.datatype.boolean(),
        created_at: faker.lorem.slug(),
        updated_at: faker.lorem.slug(),
        description: faker.lorem.slug(),
        comments: faker.datatype.number(),
        user: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        truncated: faker.datatype.boolean(),
      })),
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      201: {
        url: faker.internet.url(),
        forks_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        id: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        git_pull_url: faker.internet.url(),
        git_push_url: faker.internet.url(),
        html_url: faker.internet.url(),
        files: [...new Array(5).keys()]
          .map(_ => ({
            [faker.lorem.word()]: {
              filename: faker.lorem.slug(),
              type: faker.lorem.slug(),
              language: faker.lorem.slug(),
              raw_url: faker.lorem.slug(),
              size: faker.datatype.number(),
            },
          }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
        public: faker.datatype.boolean(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        description: faker.lorem.slug(),
        comments: faker.datatype.number(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        comments_url: faker.internet.url(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        truncated: faker.datatype.boolean(),
        forks: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
        history: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
      },
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/gists/:gistId/star': {
    get: {
      204: null,
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {},
    },
    put: {
      204: null,
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: {
      204: null,
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/gists/:gistId/:sha': {
    get: {
      200: {
        forks: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.lorem.slug(),
          url: faker.internet.url(),
          user: {
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            name: faker.lorem.slug(),
            company: faker.lorem.slug(),
            blog: faker.lorem.slug(),
            location: faker.lorem.slug(),
            email: faker.internet.exampleEmail(),
            hireable: faker.datatype.boolean(),
            bio: faker.lorem.slug(),
            twitter_username: faker.lorem.slug(),
            public_repos: faker.datatype.number(),
            public_gists: faker.datatype.number(),
            followers: faker.datatype.number(),
            following: faker.datatype.number(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            plan: {
              collaborators: faker.datatype.number(),
              name: faker.lorem.slug(),
              space: faker.datatype.number(),
              private_repos: faker.datatype.number(),
            },
            suspended_at: faker.date.recent(),
            private_gists: faker.datatype.number(),
            total_private_repos: faker.datatype.number(),
            owned_private_repos: faker.datatype.number(),
            disk_usage: faker.datatype.number(),
            collaborators: faker.datatype.number(),
          },
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
        })),
        history: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          version: faker.lorem.slug(),
          committed_at: faker.date.recent(),
          change_status: {
            total: faker.datatype.number(),
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
          },
          url: faker.internet.url(),
        })),
        fork_of: {
          url: faker.internet.url(),
          forks_url: faker.internet.url(),
          commits_url: faker.internet.url(),
          id: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          git_pull_url: faker.internet.url(),
          git_push_url: faker.internet.url(),
          html_url: faker.internet.url(),
          files: [...new Array(5).keys()]
            .map(_ => ({
              [faker.lorem.word()]: {
                filename: faker.lorem.slug(),
                type: faker.lorem.slug(),
                language: faker.lorem.slug(),
                raw_url: faker.lorem.slug(),
                size: faker.datatype.number(),
              },
            }))
            .reduce((acc, next) => Object.assign(acc, next), {}),
          public: faker.datatype.boolean(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          description: faker.lorem.slug(),
          comments: faker.datatype.number(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          comments_url: faker.internet.url(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          truncated: faker.datatype.boolean(),
          forks: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
          history: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
        },
        url: faker.lorem.slug(),
        forks_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        id: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        git_pull_url: faker.lorem.slug(),
        git_push_url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        files: [...new Array(5).keys()]
          .map(_ => ({
            [faker.lorem.word()]: {
              filename: faker.lorem.slug(),
              type: faker.lorem.slug(),
              language: faker.lorem.slug(),
              raw_url: faker.lorem.slug(),
              size: faker.datatype.number(),
              truncated: faker.datatype.boolean(),
              content: faker.lorem.slug(),
            },
          }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
        public: faker.datatype.boolean(),
        created_at: faker.lorem.slug(),
        updated_at: faker.lorem.slug(),
        description: faker.lorem.slug(),
        comments: faker.datatype.number(),
        user: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        truncated: faker.datatype.boolean(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/gitignore/templates': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => faker.lorem.slug()),
      304: null,
    },
  },
  '/gitignore/templates/:name': {
    get: {
      200: {
        name: faker.lorem.slug(),
        source: faker.lorem.slug(),
      },
      304: null,
    },
  },
  '/installation/repositories': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        repositories: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        })),
        repository_selection: faker.lorem.slug(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/installation/token': { delete: { 204: null } },
  '/issues': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        repository_url: faker.internet.url(),
        labels_url: faker.lorem.slug(),
        comments_url: faker.internet.url(),
        events_url: faker.internet.url(),
        html_url: faker.internet.url(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        title: faker.lorem.slug(),
        body: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
        assignee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assignees: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        milestone: {
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          title: faker.lorem.slug(),
          description: faker.lorem.slug(),
          creator: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          closed_at: faker.date.recent(),
          due_on: faker.date.recent(),
        },
        locked: faker.datatype.boolean(),
        active_lock_reason: faker.lorem.slug(),
        comments: faker.datatype.number(),
        pull_request: {
          merged_at: faker.date.recent(),
          diff_url: faker.internet.url(),
          html_url: faker.internet.url(),
          patch_url: faker.internet.url(),
          url: faker.internet.url(),
        },
        closed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        draft: faker.datatype.boolean(),
        closed_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        timeline_url: faker.internet.url(),
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      })),
      304: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/licenses': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        key: faker.lorem.slug(),
        name: faker.lorem.slug(),
        url: faker.internet.url(),
        spdx_id: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        html_url: faker.internet.url(),
      })),
      304: null,
    },
  },
  '/licenses/:license': {
    get: {
      200: {
        key: faker.lorem.slug(),
        name: faker.lorem.slug(),
        spdx_id: faker.lorem.slug(),
        url: faker.internet.url(),
        node_id: faker.lorem.slug(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        implementation: faker.lorem.slug(),
        permissions: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        conditions: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        limitations: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        body: faker.lorem.slug(),
        featured: faker.datatype.boolean(),
      },
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/markdown': { post: { 200: null, 304: null } },
  '/markdown/raw': { post: { 200: null, 304: null } },
  '/meta': {
    get: {
      200: {
        verifiable_password_authentication: faker.datatype.boolean(),
        packages: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        dependabot: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        installed_version: faker.lorem.slug(),
      },
      304: null,
    },
  },
  '/networks/:owner/:repo/events': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.lorem.slug(),
        type: faker.lorem.slug(),
        actor: {
          id: faker.datatype.number(),
          login: faker.lorem.slug(),
          display_login: faker.lorem.slug(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          avatar_url: faker.internet.url(),
        },
        repo: {
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        org: {
          id: faker.datatype.number(),
          login: faker.lorem.slug(),
          display_login: faker.lorem.slug(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          avatar_url: faker.internet.url(),
        },
        payload: {
          action: faker.lorem.slug(),
          issue: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            repository_url: faker.internet.url(),
            labels_url: faker.lorem.slug(),
            comments_url: faker.internet.url(),
            events_url: faker.internet.url(),
            html_url: faker.internet.url(),
            number: faker.datatype.number(),
            state: faker.lorem.slug(),
            title: faker.lorem.slug(),
            body: faker.lorem.slug(),
            user: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            labels: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            assignee: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            })),
            milestone: {
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.lorem.slug(),
              description: faker.lorem.slug(),
              creator: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              closed_at: faker.date.recent(),
              due_on: faker.date.recent(),
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.lorem.slug(),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.date.recent(),
              diff_url: faker.internet.url(),
              html_url: faker.internet.url(),
              patch_url: faker.internet.url(),
              url: faker.internet.url(),
            },
            closed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            body_html: faker.lorem.slug(),
            body_text: faker.lorem.slug(),
            timeline_url: faker.internet.url(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              license: {
                key: faker.lorem.slug(),
                name: faker.lorem.slug(),
                url: faker.internet.url(),
                spdx_id: faker.lorem.slug(),
                node_id: faker.lorem.slug(),
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.date.recent(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                name: faker.lorem.slug(),
                full_name: faker.lorem.slug(),
                owner: {
                  login: faker.lorem.slug(),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(),
                  avatar_url: faker.lorem.slug(),
                  gravatar_id: faker.lorem.slug(),
                  url: faker.lorem.slug(),
                  html_url: faker.lorem.slug(),
                  followers_url: faker.lorem.slug(),
                  following_url: faker.lorem.slug(),
                  gists_url: faker.lorem.slug(),
                  starred_url: faker.lorem.slug(),
                  subscriptions_url: faker.lorem.slug(),
                  organizations_url: faker.lorem.slug(),
                  repos_url: faker.lorem.slug(),
                  events_url: faker.lorem.slug(),
                  received_events_url: faker.lorem.slug(),
                  type: faker.lorem.slug(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.lorem.slug(),
                description: faker.lorem.slug(),
                fork: faker.datatype.boolean(),
                url: faker.lorem.slug(),
                archive_url: faker.lorem.slug(),
                assignees_url: faker.lorem.slug(),
                blobs_url: faker.lorem.slug(),
                branches_url: faker.lorem.slug(),
                collaborators_url: faker.lorem.slug(),
                comments_url: faker.lorem.slug(),
                commits_url: faker.lorem.slug(),
                compare_url: faker.lorem.slug(),
                contents_url: faker.lorem.slug(),
                contributors_url: faker.lorem.slug(),
                deployments_url: faker.lorem.slug(),
                downloads_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                forks_url: faker.lorem.slug(),
                git_commits_url: faker.lorem.slug(),
                git_refs_url: faker.lorem.slug(),
                git_tags_url: faker.lorem.slug(),
                git_url: faker.lorem.slug(),
                issue_comment_url: faker.lorem.slug(),
                issue_events_url: faker.lorem.slug(),
                issues_url: faker.lorem.slug(),
                keys_url: faker.lorem.slug(),
                labels_url: faker.lorem.slug(),
                languages_url: faker.lorem.slug(),
                merges_url: faker.lorem.slug(),
                milestones_url: faker.lorem.slug(),
                notifications_url: faker.lorem.slug(),
                pulls_url: faker.lorem.slug(),
                releases_url: faker.lorem.slug(),
                ssh_url: faker.lorem.slug(),
                stargazers_url: faker.lorem.slug(),
                statuses_url: faker.lorem.slug(),
                subscribers_url: faker.lorem.slug(),
                subscription_url: faker.lorem.slug(),
                tags_url: faker.lorem.slug(),
                teams_url: faker.lorem.slug(),
                trees_url: faker.lorem.slug(),
                clone_url: faker.lorem.slug(),
                mirror_url: faker.lorem.slug(),
                hooks_url: faker.lorem.slug(),
                svn_url: faker.lorem.slug(),
                homepage: faker.lorem.slug(),
                language: faker.lorem.slug(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(),
                pushed_at: faker.lorem.slug(),
                created_at: faker.lorem.slug(),
                updated_at: faker.lorem.slug(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(),
              starred_at: faker.lorem.slug(),
            },
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          },
          comment: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            body_text: faker.lorem.slug(),
            body_html: faker.lorem.slug(),
            html_url: faker.internet.url(),
            user: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            issue_url: faker.internet.url(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          },
          pages: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            page_name: faker.lorem.slug(),
            title: faker.lorem.slug(),
            summary: faker.lorem.slug(),
            action: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
          })),
        },
        public: faker.datatype.boolean(),
        created_at: faker.date.recent(),
      })),
      301: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/notifications': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.lorem.slug(),
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.internet.url(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          temp_clone_token: faker.lorem.slug(),
          delete_branch_on_merge: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          code_of_conduct: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            spdx_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          allow_forking: faker.datatype.boolean(),
        },
        subject: {
          title: faker.lorem.slug(),
          url: faker.lorem.slug(),
          latest_comment_url: faker.lorem.slug(),
          type: faker.lorem.slug(),
        },
        reason: faker.lorem.slug(),
        unread: faker.datatype.boolean(),
        updated_at: faker.lorem.slug(),
        last_read_at: faker.lorem.slug(),
        url: faker.lorem.slug(),
        subscription_url: faker.lorem.slug(),
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    put: {
      202: {
        message: faker.lorem.slug(),
      },
      205: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/notifications/threads/:threadId': {
    get: {
      200: {
        id: faker.lorem.slug(),
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.internet.url(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          temp_clone_token: faker.lorem.slug(),
          delete_branch_on_merge: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          code_of_conduct: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            spdx_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          allow_forking: faker.datatype.boolean(),
        },
        subject: {
          title: faker.lorem.slug(),
          url: faker.lorem.slug(),
          latest_comment_url: faker.lorem.slug(),
          type: faker.lorem.slug(),
        },
        reason: faker.lorem.slug(),
        unread: faker.datatype.boolean(),
        updated_at: faker.lorem.slug(),
        last_read_at: faker.lorem.slug(),
        url: faker.lorem.slug(),
        subscription_url: faker.lorem.slug(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      205: null,
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/notifications/threads/:threadId/subscription': {
    get: {
      200: {
        subscribed: faker.datatype.boolean(),
        ignored: faker.datatype.boolean(),
        reason: faker.lorem.slug(),
        created_at: faker.date.recent(),
        url: faker.internet.url(),
        thread_url: faker.internet.url(),
        repository_url: faker.internet.url(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    put: {
      200: {
        subscribed: faker.datatype.boolean(),
        ignored: faker.datatype.boolean(),
        reason: faker.lorem.slug(),
        created_at: faker.date.recent(),
        url: faker.internet.url(),
        thread_url: faker.internet.url(),
        repository_url: faker.internet.url(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: {
      204: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/octocat': { get: { 200: null } },
  '/organizations': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.internet.url(),
        hooks_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        members_url: faker.lorem.slug(),
        public_members_url: faker.lorem.slug(),
        avatar_url: faker.lorem.slug(),
        description: faker.lorem.slug(),
      })),
      304: null,
    },
  },
  '/orgs/:org': {
    get: {
      200: {
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.internet.url(),
        hooks_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        members_url: faker.lorem.slug(),
        public_members_url: faker.lorem.slug(),
        avatar_url: faker.lorem.slug(),
        description: faker.lorem.slug(),
        name: faker.lorem.slug(),
        company: faker.lorem.slug(),
        blog: faker.internet.url(),
        location: faker.lorem.slug(),
        email: faker.internet.exampleEmail(),
        twitter_username: faker.lorem.slug(),
        is_verified: faker.datatype.boolean(),
        has_organization_projects: faker.datatype.boolean(),
        has_repository_projects: faker.datatype.boolean(),
        public_repos: faker.datatype.number(),
        public_gists: faker.datatype.number(),
        followers: faker.datatype.number(),
        following: faker.datatype.number(),
        html_url: faker.internet.url(),
        created_at: faker.date.recent(),
        type: faker.lorem.slug(),
        total_private_repos: faker.datatype.number(),
        owned_private_repos: faker.datatype.number(),
        private_gists: faker.datatype.number(),
        disk_usage: faker.datatype.number(),
        collaborators: faker.datatype.number(),
        billing_email: faker.internet.exampleEmail(),
        plan: {
          name: faker.lorem.slug(),
          space: faker.datatype.number(),
          private_repos: faker.datatype.number(),
          filled_seats: faker.datatype.number(),
          seats: faker.datatype.number(),
        },
        default_repository_permission: faker.lorem.slug(),
        members_can_create_repositories: faker.datatype.boolean(),
        two_factor_requirement_enabled: faker.datatype.boolean(),
        members_allowed_repository_creation_type: faker.lorem.slug(),
        members_can_create_public_repositories: faker.datatype.boolean(),
        members_can_create_private_repositories: faker.datatype.boolean(),
        members_can_create_internal_repositories: faker.datatype.boolean(),
        members_can_create_pages: faker.datatype.boolean(),
        members_can_create_public_pages: faker.datatype.boolean(),
        members_can_create_private_pages: faker.datatype.boolean(),
        members_can_fork_private_repositories: faker.datatype.boolean(),
        updated_at: faker.date.recent(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.internet.url(),
        hooks_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        members_url: faker.lorem.slug(),
        public_members_url: faker.lorem.slug(),
        avatar_url: faker.lorem.slug(),
        description: faker.lorem.slug(),
        name: faker.lorem.slug(),
        company: faker.lorem.slug(),
        blog: faker.internet.url(),
        location: faker.lorem.slug(),
        email: faker.internet.exampleEmail(),
        twitter_username: faker.lorem.slug(),
        is_verified: faker.datatype.boolean(),
        has_organization_projects: faker.datatype.boolean(),
        has_repository_projects: faker.datatype.boolean(),
        public_repos: faker.datatype.number(),
        public_gists: faker.datatype.number(),
        followers: faker.datatype.number(),
        following: faker.datatype.number(),
        html_url: faker.internet.url(),
        created_at: faker.date.recent(),
        type: faker.lorem.slug(),
        total_private_repos: faker.datatype.number(),
        owned_private_repos: faker.datatype.number(),
        private_gists: faker.datatype.number(),
        disk_usage: faker.datatype.number(),
        collaborators: faker.datatype.number(),
        billing_email: faker.internet.exampleEmail(),
        plan: {
          name: faker.lorem.slug(),
          space: faker.datatype.number(),
          private_repos: faker.datatype.number(),
          filled_seats: faker.datatype.number(),
          seats: faker.datatype.number(),
        },
        default_repository_permission: faker.lorem.slug(),
        members_can_create_repositories: faker.datatype.boolean(),
        two_factor_requirement_enabled: faker.datatype.boolean(),
        members_allowed_repository_creation_type: faker.lorem.slug(),
        members_can_create_public_repositories: faker.datatype.boolean(),
        members_can_create_private_repositories: faker.datatype.boolean(),
        members_can_create_internal_repositories: faker.datatype.boolean(),
        members_can_create_pages: faker.datatype.boolean(),
        members_can_create_public_pages: faker.datatype.boolean(),
        members_can_create_private_pages: faker.datatype.boolean(),
        members_can_fork_private_repositories: faker.datatype.boolean(),
        updated_at: faker.date.recent(),
      },
      409: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: null,
    },
  },
  '/orgs/:org/actions/permissions': {
    get: {
      200: {
        enabled_repositories: faker.random.arrayElement([
          'all',
          'none',
          'selected',
        ]),
        selected_repositories_url: faker.lorem.slug(),
        allowed_actions: faker.random.arrayElement([
          'all',
          'local_only',
          'selected',
        ]),
        selected_actions_url: faker.lorem.slug(),
      },
    },
    put: { 204: null },
  },
  '/orgs/:org/actions/permissions/repositories': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        repositories: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        })),
      },
    },
    put: { 204: null },
  },
  '/orgs/:org/actions/permissions/repositories/:repositoryId': {
    put: { 204: null },
    delete: { 204: null },
  },
  '/orgs/:org/actions/permissions/selected-actions': {
    get: {
      200: {
        github_owned_allowed: faker.datatype.boolean(),
        patterns_allowed: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
    put: { 204: null },
  },
  '/orgs/:org/actions/runner-groups': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        runner_groups: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          visibility: faker.lorem.slug(),
          default: faker.datatype.boolean(),
          selected_repositories_url: faker.lorem.slug(),
          runners_url: faker.lorem.slug(),
          inherited: faker.datatype.boolean(),
          inherited_allows_public_repositories: faker.datatype.boolean(),
          allows_public_repositories: faker.datatype.boolean(),
        })),
      },
    },
    post: {
      201: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        visibility: faker.lorem.slug(),
        default: faker.datatype.boolean(),
        selected_repositories_url: faker.lorem.slug(),
        runners_url: faker.lorem.slug(),
        inherited: faker.datatype.boolean(),
        inherited_allows_public_repositories: faker.datatype.boolean(),
        allows_public_repositories: faker.datatype.boolean(),
      },
    },
  },
  '/orgs/:org/actions/runner-groups/:runnerGroupId': {
    get: {
      200: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        visibility: faker.lorem.slug(),
        default: faker.datatype.boolean(),
        selected_repositories_url: faker.lorem.slug(),
        runners_url: faker.lorem.slug(),
        inherited: faker.datatype.boolean(),
        inherited_allows_public_repositories: faker.datatype.boolean(),
        allows_public_repositories: faker.datatype.boolean(),
      },
    },
    patch: {
      200: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        visibility: faker.lorem.slug(),
        default: faker.datatype.boolean(),
        selected_repositories_url: faker.lorem.slug(),
        runners_url: faker.lorem.slug(),
        inherited: faker.datatype.boolean(),
        inherited_allows_public_repositories: faker.datatype.boolean(),
        allows_public_repositories: faker.datatype.boolean(),
      },
    },
    delete: { 204: null },
  },
  '/orgs/:org/actions/runner-groups/:runnerGroupId/repositories': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        repositories: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.internet.url(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          temp_clone_token: faker.lorem.slug(),
          delete_branch_on_merge: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          code_of_conduct: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            spdx_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          allow_forking: faker.datatype.boolean(),
        })),
      },
    },
    put: { 204: null },
  },
  '/orgs/:org/actions/runner-groups/:runnerGroupId/repositories/:repositoryId':
    { put: { 204: null }, delete: { 204: null } },
  '/orgs/:org/actions/runner-groups/:runnerGroupId/runners': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        runners: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          os: faker.lorem.slug(),
          status: faker.lorem.slug(),
          busy: faker.datatype.boolean(),
          labels: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            name: faker.lorem.slug(),
            type: faker.random.arrayElement(['read-only', 'custom']),
          })),
        })),
      },
    },
    put: { 204: null },
  },
  '/orgs/:org/actions/runner-groups/:runnerGroupId/runners/:runnerId': {
    put: { 204: null },
    delete: { 204: null },
  },
  '/orgs/:org/actions/runners': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        runners: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          os: faker.lorem.slug(),
          status: faker.lorem.slug(),
          busy: faker.datatype.boolean(),
          labels: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            name: faker.lorem.slug(),
            type: faker.random.arrayElement(['read-only', 'custom']),
          })),
        })),
      },
    },
  },
  '/orgs/:org/actions/runners/downloads': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        os: faker.lorem.slug(),
        architecture: faker.lorem.slug(),
        download_url: faker.lorem.slug(),
        filename: faker.lorem.slug(),
        temp_download_token: faker.lorem.slug(),
        sha256_checksum: faker.lorem.slug(),
      })),
    },
  },
  '/orgs/:org/actions/runners/registration-token': {
    post: {
      201: {
        token: faker.lorem.slug(),
        expires_at: faker.date.recent(),
        permissions: {},
        repositories: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        })),
        single_file: faker.lorem.slug(),
        repository_selection: faker.random.arrayElement(['all', 'selected']),
      },
    },
  },
  '/orgs/:org/actions/runners/remove-token': {
    post: {
      201: {
        token: faker.lorem.slug(),
        expires_at: faker.date.recent(),
        permissions: {},
        repositories: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        })),
        single_file: faker.lorem.slug(),
        repository_selection: faker.random.arrayElement(['all', 'selected']),
      },
    },
  },
  '/orgs/:org/actions/runners/:runnerId': {
    get: {
      200: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        os: faker.lorem.slug(),
        status: faker.lorem.slug(),
        busy: faker.datatype.boolean(),
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          type: faker.random.arrayElement(['read-only', 'custom']),
        })),
      },
    },
    delete: { 204: null },
  },
  '/orgs/:org/actions/secrets': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        secrets: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          visibility: faker.random.arrayElement(['all', 'private', 'selected']),
          selected_repositories_url: faker.internet.url(),
        })),
      },
    },
  },
  '/orgs/:org/actions/secrets/public-key': {
    get: {
      200: {
        key_id: faker.lorem.slug(),
        key: faker.lorem.slug(),
        id: faker.datatype.number(),
        url: faker.lorem.slug(),
        title: faker.lorem.slug(),
        created_at: faker.lorem.slug(),
      },
    },
  },
  '/orgs/:org/actions/secrets/:secretName': {
    get: {
      200: {
        name: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        visibility: faker.random.arrayElement(['all', 'private', 'selected']),
        selected_repositories_url: faker.internet.url(),
      },
    },
    put: { 201: {}, 204: null },
    delete: { 204: null },
  },
  '/orgs/:org/actions/secrets/:secretName/repositories': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        repositories: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.internet.url(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          temp_clone_token: faker.lorem.slug(),
          delete_branch_on_merge: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          code_of_conduct: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            spdx_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          allow_forking: faker.datatype.boolean(),
        })),
      },
    },
    put: { 204: null },
  },
  '/orgs/:org/actions/secrets/:secretName/repositories/:repositoryId': {
    put: { 204: null, 409: null },
    delete: { 204: null, 409: null },
  },
  '/orgs/:org/audit-log': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        '@timestamp': faker.datatype.number(),
        action: faker.lorem.slug(),
        active: faker.datatype.boolean(),
        active_was: faker.datatype.boolean(),
        actor: faker.lorem.slug(),
        actor_id: faker.datatype.number(),
        actor_location: {
          country_name: faker.lorem.slug(),
        },
        data: {},
        org_id: faker.datatype.number(),
        blocked_user: faker.lorem.slug(),
        business: faker.lorem.slug(),
        config: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({})),
        config_was: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({})),
        content_type: faker.lorem.slug(),
        created_at: faker.datatype.number(),
        deploy_key_fingerprint: faker.lorem.slug(),
        _document_id: faker.lorem.slug(),
        emoji: faker.lorem.slug(),
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({})),
        events_were: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({})),
        explanation: faker.lorem.slug(),
        fingerprint: faker.lorem.slug(),
        hook_id: faker.datatype.number(),
        limited_availability: faker.datatype.boolean(),
        message: faker.lorem.slug(),
        name: faker.lorem.slug(),
        old_user: faker.lorem.slug(),
        openssh_public_key: faker.lorem.slug(),
        org: faker.lorem.slug(),
        previous_visibility: faker.lorem.slug(),
        read_only: faker.datatype.boolean(),
        repo: faker.lorem.slug(),
        repository: faker.lorem.slug(),
        repository_public: faker.datatype.boolean(),
        target_login: faker.lorem.slug(),
        team: faker.lorem.slug(),
        transport_protocol: faker.datatype.number(),
        transport_protocol_name: faker.lorem.slug(),
        user: faker.lorem.slug(),
        visibility: faker.lorem.slug(),
      })),
    },
  },
  '/orgs/:org/events': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.lorem.slug(),
        type: faker.lorem.slug(),
        actor: {
          id: faker.datatype.number(),
          login: faker.lorem.slug(),
          display_login: faker.lorem.slug(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          avatar_url: faker.internet.url(),
        },
        repo: {
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        org: {
          id: faker.datatype.number(),
          login: faker.lorem.slug(),
          display_login: faker.lorem.slug(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          avatar_url: faker.internet.url(),
        },
        payload: {
          action: faker.lorem.slug(),
          issue: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            repository_url: faker.internet.url(),
            labels_url: faker.lorem.slug(),
            comments_url: faker.internet.url(),
            events_url: faker.internet.url(),
            html_url: faker.internet.url(),
            number: faker.datatype.number(),
            state: faker.lorem.slug(),
            title: faker.lorem.slug(),
            body: faker.lorem.slug(),
            user: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            labels: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            assignee: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            })),
            milestone: {
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.lorem.slug(),
              description: faker.lorem.slug(),
              creator: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              closed_at: faker.date.recent(),
              due_on: faker.date.recent(),
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.lorem.slug(),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.date.recent(),
              diff_url: faker.internet.url(),
              html_url: faker.internet.url(),
              patch_url: faker.internet.url(),
              url: faker.internet.url(),
            },
            closed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            body_html: faker.lorem.slug(),
            body_text: faker.lorem.slug(),
            timeline_url: faker.internet.url(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              license: {
                key: faker.lorem.slug(),
                name: faker.lorem.slug(),
                url: faker.internet.url(),
                spdx_id: faker.lorem.slug(),
                node_id: faker.lorem.slug(),
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.date.recent(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                name: faker.lorem.slug(),
                full_name: faker.lorem.slug(),
                owner: {
                  login: faker.lorem.slug(),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(),
                  avatar_url: faker.lorem.slug(),
                  gravatar_id: faker.lorem.slug(),
                  url: faker.lorem.slug(),
                  html_url: faker.lorem.slug(),
                  followers_url: faker.lorem.slug(),
                  following_url: faker.lorem.slug(),
                  gists_url: faker.lorem.slug(),
                  starred_url: faker.lorem.slug(),
                  subscriptions_url: faker.lorem.slug(),
                  organizations_url: faker.lorem.slug(),
                  repos_url: faker.lorem.slug(),
                  events_url: faker.lorem.slug(),
                  received_events_url: faker.lorem.slug(),
                  type: faker.lorem.slug(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.lorem.slug(),
                description: faker.lorem.slug(),
                fork: faker.datatype.boolean(),
                url: faker.lorem.slug(),
                archive_url: faker.lorem.slug(),
                assignees_url: faker.lorem.slug(),
                blobs_url: faker.lorem.slug(),
                branches_url: faker.lorem.slug(),
                collaborators_url: faker.lorem.slug(),
                comments_url: faker.lorem.slug(),
                commits_url: faker.lorem.slug(),
                compare_url: faker.lorem.slug(),
                contents_url: faker.lorem.slug(),
                contributors_url: faker.lorem.slug(),
                deployments_url: faker.lorem.slug(),
                downloads_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                forks_url: faker.lorem.slug(),
                git_commits_url: faker.lorem.slug(),
                git_refs_url: faker.lorem.slug(),
                git_tags_url: faker.lorem.slug(),
                git_url: faker.lorem.slug(),
                issue_comment_url: faker.lorem.slug(),
                issue_events_url: faker.lorem.slug(),
                issues_url: faker.lorem.slug(),
                keys_url: faker.lorem.slug(),
                labels_url: faker.lorem.slug(),
                languages_url: faker.lorem.slug(),
                merges_url: faker.lorem.slug(),
                milestones_url: faker.lorem.slug(),
                notifications_url: faker.lorem.slug(),
                pulls_url: faker.lorem.slug(),
                releases_url: faker.lorem.slug(),
                ssh_url: faker.lorem.slug(),
                stargazers_url: faker.lorem.slug(),
                statuses_url: faker.lorem.slug(),
                subscribers_url: faker.lorem.slug(),
                subscription_url: faker.lorem.slug(),
                tags_url: faker.lorem.slug(),
                teams_url: faker.lorem.slug(),
                trees_url: faker.lorem.slug(),
                clone_url: faker.lorem.slug(),
                mirror_url: faker.lorem.slug(),
                hooks_url: faker.lorem.slug(),
                svn_url: faker.lorem.slug(),
                homepage: faker.lorem.slug(),
                language: faker.lorem.slug(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(),
                pushed_at: faker.lorem.slug(),
                created_at: faker.lorem.slug(),
                updated_at: faker.lorem.slug(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(),
              starred_at: faker.lorem.slug(),
            },
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          },
          comment: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            body_text: faker.lorem.slug(),
            body_html: faker.lorem.slug(),
            html_url: faker.internet.url(),
            user: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            issue_url: faker.internet.url(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          },
          pages: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            page_name: faker.lorem.slug(),
            title: faker.lorem.slug(),
            summary: faker.lorem.slug(),
            action: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
          })),
        },
        public: faker.datatype.boolean(),
        created_at: faker.date.recent(),
      })),
    },
  },
  '/orgs/:org/hooks': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        url: faker.internet.url(),
        ping_url: faker.internet.url(),
        deliveries_url: faker.internet.url(),
        name: faker.lorem.slug(),
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        active: faker.datatype.boolean(),
        config: {
          url: faker.lorem.slug(),
          insecure_ssl: faker.lorem.slug(),
          content_type: faker.lorem.slug(),
          secret: faker.lorem.slug(),
        },
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        type: faker.lorem.slug(),
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      201: {
        id: faker.datatype.number(),
        url: faker.internet.url(),
        ping_url: faker.internet.url(),
        deliveries_url: faker.internet.url(),
        name: faker.lorem.slug(),
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        active: faker.datatype.boolean(),
        config: {
          url: faker.lorem.slug(),
          insecure_ssl: faker.lorem.slug(),
          content_type: faker.lorem.slug(),
          secret: faker.lorem.slug(),
        },
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        type: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/orgs/:org/hooks/:hookId': {
    get: {
      200: {
        id: faker.datatype.number(),
        url: faker.internet.url(),
        ping_url: faker.internet.url(),
        deliveries_url: faker.internet.url(),
        name: faker.lorem.slug(),
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        active: faker.datatype.boolean(),
        config: {
          url: faker.lorem.slug(),
          insecure_ssl: faker.lorem.slug(),
          content_type: faker.lorem.slug(),
          secret: faker.lorem.slug(),
        },
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        type: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        id: faker.datatype.number(),
        url: faker.internet.url(),
        ping_url: faker.internet.url(),
        deliveries_url: faker.internet.url(),
        name: faker.lorem.slug(),
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        active: faker.datatype.boolean(),
        config: {
          url: faker.lorem.slug(),
          insecure_ssl: faker.lorem.slug(),
          content_type: faker.lorem.slug(),
          secret: faker.lorem.slug(),
        },
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        type: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: {
      204: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/orgs/:org/hooks/:hookId/config': {
    get: {
      200: {
        url: faker.internet.url(),
        content_type: faker.lorem.slug(),
        secret: faker.lorem.slug(),
        insecure_ssl: null,
      },
    },
    patch: {
      200: {
        url: faker.internet.url(),
        content_type: faker.lorem.slug(),
        secret: faker.lorem.slug(),
        insecure_ssl: null,
      },
    },
  },
  '/orgs/:org/hooks/:hookId/deliveries': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        guid: faker.lorem.slug(),
        delivered_at: faker.date.recent(),
        redelivery: faker.datatype.boolean(),
        duration: faker.datatype.number(),
        status: faker.lorem.slug(),
        status_code: faker.datatype.number(),
        event: faker.lorem.slug(),
        action: faker.lorem.slug(),
        installation_id: faker.datatype.number(),
        repository_id: faker.datatype.number(),
      })),
      400: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/orgs/:org/hooks/:hookId/deliveries/:deliveryId': {
    get: {
      200: {
        id: faker.datatype.number(),
        guid: faker.lorem.slug(),
        delivered_at: faker.date.recent(),
        redelivery: faker.datatype.boolean(),
        duration: faker.datatype.number(),
        status: faker.lorem.slug(),
        status_code: faker.datatype.number(),
        event: faker.lorem.slug(),
        action: faker.lorem.slug(),
        installation_id: faker.datatype.number(),
        repository_id: faker.datatype.number(),
        url: faker.lorem.slug(),
        request: {
          headers: {},
          payload: {},
        },
        response: {
          headers: {},
          payload: faker.lorem.slug(),
        },
      },
      400: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/orgs/:org/hooks/:hookId/deliveries/:deliveryId/attempts': {
    post: {
      202: {},
      400: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/orgs/:org/hooks/:hookId/pings': {
    post: {
      204: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/orgs/:org/installation': {
    get: {
      200: {
        id: faker.datatype.number(),
        account: null,
        repository_selection: faker.random.arrayElement(['all', 'selected']),
        access_tokens_url: faker.internet.url(),
        repositories_url: faker.internet.url(),
        html_url: faker.internet.url(),
        app_id: faker.datatype.number(),
        target_id: faker.datatype.number(),
        target_type: faker.lorem.slug(),
        permissions: {
          actions: faker.random.arrayElement(['read', 'write']),
          administration: faker.random.arrayElement(['read', 'write']),
          checks: faker.random.arrayElement(['read', 'write']),
          contents: faker.random.arrayElement(['read', 'write']),
          deployments: faker.random.arrayElement(['read', 'write']),
          environments: faker.random.arrayElement(['read', 'write']),
          issues: faker.random.arrayElement(['read', 'write']),
          metadata: faker.random.arrayElement(['read', 'write']),
          packages: faker.random.arrayElement(['read', 'write']),
          pages: faker.random.arrayElement(['read', 'write']),
          pull_requests: faker.random.arrayElement(['read', 'write']),
          repository_hooks: faker.random.arrayElement(['read', 'write']),
          repository_projects: faker.random.arrayElement([
            'read',
            'write',
            'admin',
          ]),
          secret_scanning_alerts: faker.random.arrayElement(['read', 'write']),
          secrets: faker.random.arrayElement(['read', 'write']),
          security_events: faker.random.arrayElement(['read', 'write']),
          single_file: faker.random.arrayElement(['read', 'write']),
          statuses: faker.random.arrayElement(['read', 'write']),
          vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
          workflows: faker.random.arrayElement(['write']),
          members: faker.random.arrayElement(['read', 'write']),
          organization_administration: faker.random.arrayElement([
            'read',
            'write',
          ]),
          organization_hooks: faker.random.arrayElement(['read', 'write']),
          organization_plan: faker.random.arrayElement(['read']),
          organization_projects: faker.random.arrayElement([
            'read',
            'write',
            'admin',
          ]),
          organization_packages: faker.random.arrayElement(['read', 'write']),
          organization_secrets: faker.random.arrayElement(['read', 'write']),
          organization_self_hosted_runners: faker.random.arrayElement([
            'read',
            'write',
          ]),
          organization_user_blocking: faker.random.arrayElement([
            'read',
            'write',
          ]),
          team_discussions: faker.random.arrayElement(['read', 'write']),
          content_references: faker.random.arrayElement(['read', 'write']),
        },
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        single_file_name: faker.lorem.slug(),
        has_multiple_single_files: faker.datatype.boolean(),
        single_file_paths: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        app_slug: faker.lorem.slug(),
        suspended_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        suspended_at: faker.date.recent(),
        contact_email: faker.lorem.slug(),
      },
    },
  },
  '/orgs/:org/installations': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        installations: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          account: null,
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          access_tokens_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          html_url: faker.internet.url(),
          app_id: faker.datatype.number(),
          target_id: faker.datatype.number(),
          target_type: faker.lorem.slug(),
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          single_file_name: faker.lorem.slug(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          app_slug: faker.lorem.slug(),
          suspended_by: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          suspended_at: faker.date.recent(),
          contact_email: faker.lorem.slug(),
        })),
      },
    },
  },
  '/orgs/:org/issues': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        repository_url: faker.internet.url(),
        labels_url: faker.lorem.slug(),
        comments_url: faker.internet.url(),
        events_url: faker.internet.url(),
        html_url: faker.internet.url(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        title: faker.lorem.slug(),
        body: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
        assignee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assignees: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        milestone: {
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          title: faker.lorem.slug(),
          description: faker.lorem.slug(),
          creator: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          closed_at: faker.date.recent(),
          due_on: faker.date.recent(),
        },
        locked: faker.datatype.boolean(),
        active_lock_reason: faker.lorem.slug(),
        comments: faker.datatype.number(),
        pull_request: {
          merged_at: faker.date.recent(),
          diff_url: faker.internet.url(),
          html_url: faker.internet.url(),
          patch_url: faker.internet.url(),
          url: faker.internet.url(),
        },
        closed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        draft: faker.datatype.boolean(),
        closed_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        timeline_url: faker.internet.url(),
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/orgs/:org/members': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        email: faker.lorem.slug(),
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        starred_at: faker.lorem.slug(),
      })),
      302: null,
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/orgs/:org/members/:username': {
    get: { 204: null, 302: null, 404: null },
    delete: {
      204: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/orgs/:org/memberships/:username': {
    get: {
      200: {
        url: faker.internet.url(),
        state: faker.random.arrayElement(['active', 'pending']),
        role: faker.random.arrayElement(['admin', 'member', 'billing_manager']),
        organization_url: faker.internet.url(),
        organization: {
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          hooks_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          members_url: faker.lorem.slug(),
          public_members_url: faker.lorem.slug(),
          avatar_url: faker.lorem.slug(),
          description: faker.lorem.slug(),
        },
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        permissions: {
          can_create_repository: faker.datatype.boolean(),
        },
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    put: {
      200: {
        url: faker.internet.url(),
        state: faker.random.arrayElement(['active', 'pending']),
        role: faker.random.arrayElement(['admin', 'member', 'billing_manager']),
        organization_url: faker.internet.url(),
        organization: {
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          hooks_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          members_url: faker.lorem.slug(),
          public_members_url: faker.lorem.slug(),
          avatar_url: faker.lorem.slug(),
          description: faker.lorem.slug(),
        },
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        permissions: {
          can_create_repository: faker.datatype.boolean(),
        },
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: {
      204: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/orgs/:org/outside_collaborators': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        email: faker.lorem.slug(),
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        starred_at: faker.lorem.slug(),
      })),
    },
  },
  '/orgs/:org/outside_collaborators/:username': {
    put: {
      202: {},
      204: null,
      403: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: {
      204: null,
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/orgs/:org/pre-receive-hooks': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        enforcement: faker.lorem.slug(),
        configuration_url: faker.lorem.slug(),
        allow_downstream_configuration: faker.datatype.boolean(),
      })),
    },
  },
  '/orgs/:org/pre-receive-hooks/:preReceiveHookId': {
    get: {
      200: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        enforcement: faker.lorem.slug(),
        configuration_url: faker.lorem.slug(),
        allow_downstream_configuration: faker.datatype.boolean(),
      },
    },
    patch: {
      200: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        enforcement: faker.lorem.slug(),
        configuration_url: faker.lorem.slug(),
        allow_downstream_configuration: faker.datatype.boolean(),
      },
    },
    delete: {
      200: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        enforcement: faker.lorem.slug(),
        configuration_url: faker.lorem.slug(),
        allow_downstream_configuration: faker.datatype.boolean(),
      },
    },
  },
  '/orgs/:org/projects': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        owner_url: faker.internet.url(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        columns_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        body: faker.lorem.slug(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        organization_permission: faker.random.arrayElement([
          'read',
          'write',
          'admin',
          'none',
        ]),
        private: faker.datatype.boolean(),
      })),
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
    post: {
      201: {
        owner_url: faker.internet.url(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        columns_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        body: faker.lorem.slug(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        organization_permission: faker.random.arrayElement([
          'read',
          'write',
          'admin',
          'none',
        ]),
        private: faker.datatype.boolean(),
      },
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
  },
  '/orgs/:org/public_members': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        email: faker.lorem.slug(),
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        starred_at: faker.lorem.slug(),
      })),
    },
  },
  '/orgs/:org/public_members/:username': {
    get: { 204: null, 404: null },
    put: {
      204: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: { 204: null },
  },
  '/orgs/:org/repos': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        full_name: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.lorem.slug(),
        assignees_url: faker.lorem.slug(),
        blobs_url: faker.lorem.slug(),
        branches_url: faker.lorem.slug(),
        collaborators_url: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        compare_url: faker.lorem.slug(),
        contents_url: faker.lorem.slug(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.lorem.slug(),
        git_refs_url: faker.lorem.slug(),
        git_tags_url: faker.lorem.slug(),
        git_url: faker.lorem.slug(),
        issue_comment_url: faker.lorem.slug(),
        issue_events_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        labels_url: faker.lorem.slug(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        pulls_url: faker.lorem.slug(),
        releases_url: faker.lorem.slug(),
        ssh_url: faker.lorem.slug(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.lorem.slug(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.lorem.slug(),
        clone_url: faker.lorem.slug(),
        mirror_url: faker.lorem.slug(),
        hooks_url: faker.internet.url(),
        svn_url: faker.lorem.slug(),
        homepage: faker.lorem.slug(),
        language: faker.lorem.slug(),
        forks_count: faker.datatype.number(),
        stargazers_count: faker.datatype.number(),
        watchers_count: faker.datatype.number(),
        size: faker.datatype.number(),
        default_branch: faker.lorem.slug(),
        open_issues_count: faker.datatype.number(),
        is_template: faker.datatype.boolean(),
        topics: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
        pushed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        template_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        temp_clone_token: faker.lorem.slug(),
        delete_branch_on_merge: faker.datatype.boolean(),
        subscribers_count: faker.datatype.number(),
        network_count: faker.datatype.number(),
        code_of_conduct: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          body: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          spdx_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
        },
        forks: faker.datatype.number(),
        open_issues: faker.datatype.number(),
        watchers: faker.datatype.number(),
        allow_forking: faker.datatype.boolean(),
      })),
    },
    post: {
      201: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        full_name: faker.lorem.slug(),
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          spdx_id: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        forks: faker.datatype.number(),
        permissions: {
          admin: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
        },
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.lorem.slug(),
        assignees_url: faker.lorem.slug(),
        blobs_url: faker.lorem.slug(),
        branches_url: faker.lorem.slug(),
        collaborators_url: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        compare_url: faker.lorem.slug(),
        contents_url: faker.lorem.slug(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.lorem.slug(),
        git_refs_url: faker.lorem.slug(),
        git_tags_url: faker.lorem.slug(),
        git_url: faker.lorem.slug(),
        issue_comment_url: faker.lorem.slug(),
        issue_events_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        labels_url: faker.lorem.slug(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        pulls_url: faker.lorem.slug(),
        releases_url: faker.lorem.slug(),
        ssh_url: faker.lorem.slug(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.lorem.slug(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.lorem.slug(),
        clone_url: faker.lorem.slug(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.internet.url(),
        language: faker.lorem.slug(),
        forks_count: faker.datatype.number(),
        stargazers_count: faker.datatype.number(),
        watchers_count: faker.datatype.number(),
        size: faker.datatype.number(),
        default_branch: faker.lorem.slug(),
        open_issues_count: faker.datatype.number(),
        is_template: faker.datatype.boolean(),
        topics: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
        pushed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        allow_rebase_merge: faker.datatype.boolean(),
        template_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.lorem.slug(),
            gravatar_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            followers_url: faker.lorem.slug(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.lorem.slug(),
            organizations_url: faker.lorem.slug(),
            repos_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.lorem.slug(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.lorem.slug(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.lorem.slug(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.lorem.slug(),
          deployments_url: faker.lorem.slug(),
          downloads_url: faker.lorem.slug(),
          events_url: faker.lorem.slug(),
          forks_url: faker.lorem.slug(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.lorem.slug(),
          merges_url: faker.lorem.slug(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.lorem.slug(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.lorem.slug(),
          subscription_url: faker.lorem.slug(),
          tags_url: faker.lorem.slug(),
          teams_url: faker.lorem.slug(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.lorem.slug(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.lorem.slug(),
          created_at: faker.lorem.slug(),
          updated_at: faker.lorem.slug(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
        },
        temp_clone_token: faker.lorem.slug(),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.datatype.number(),
        network_count: faker.datatype.number(),
        open_issues: faker.datatype.number(),
        watchers: faker.datatype.number(),
        master_branch: faker.lorem.slug(),
        starred_at: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/orgs/:org/secret-scanning/alerts': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        number: faker.datatype.number(),
        created_at: faker.date.recent(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        locations_url: faker.internet.url(),
        state: faker.random.arrayElement(['open', 'resolved']),
        resolution: faker.random.arrayElement([
          null,
          'false_positive',
          'wont_fix',
          'revoked',
          'used_in_tests',
        ]),
        resolved_at: faker.date.recent(),
        resolved_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        secret_type: faker.lorem.slug(),
        secret: faker.lorem.slug(),
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.internet.url(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          temp_clone_token: faker.lorem.slug(),
          delete_branch_on_merge: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          code_of_conduct: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            spdx_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          allow_forking: faker.datatype.boolean(),
        },
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/orgs/:org/teams': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        slug: faker.lorem.slug(),
        description: faker.lorem.slug(),
        privacy: faker.lorem.slug(),
        permission: faker.lorem.slug(),
        permissions: {
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          admin: faker.datatype.boolean(),
        },
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        members_url: faker.lorem.slug(),
        repositories_url: faker.internet.url(),
        parent: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          html_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          slug: faker.lorem.slug(),
          ldap_dn: faker.lorem.slug(),
        },
      })),
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      201: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        name: faker.lorem.slug(),
        slug: faker.lorem.slug(),
        description: faker.lorem.slug(),
        privacy: faker.random.arrayElement(['closed', 'secret']),
        permission: faker.lorem.slug(),
        members_url: faker.lorem.slug(),
        repositories_url: faker.internet.url(),
        parent: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          html_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          slug: faker.lorem.slug(),
          ldap_dn: faker.lorem.slug(),
        },
        members_count: faker.datatype.number(),
        repos_count: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        organization: {
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          hooks_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          members_url: faker.lorem.slug(),
          public_members_url: faker.lorem.slug(),
          avatar_url: faker.lorem.slug(),
          description: faker.lorem.slug(),
          name: faker.lorem.slug(),
          company: faker.lorem.slug(),
          blog: faker.internet.url(),
          location: faker.lorem.slug(),
          email: faker.internet.exampleEmail(),
          twitter_username: faker.lorem.slug(),
          is_verified: faker.datatype.boolean(),
          has_organization_projects: faker.datatype.boolean(),
          has_repository_projects: faker.datatype.boolean(),
          public_repos: faker.datatype.number(),
          public_gists: faker.datatype.number(),
          followers: faker.datatype.number(),
          following: faker.datatype.number(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          type: faker.lorem.slug(),
          total_private_repos: faker.datatype.number(),
          owned_private_repos: faker.datatype.number(),
          private_gists: faker.datatype.number(),
          disk_usage: faker.datatype.number(),
          collaborators: faker.datatype.number(),
          billing_email: faker.internet.exampleEmail(),
          plan: {
            name: faker.lorem.slug(),
            space: faker.datatype.number(),
            private_repos: faker.datatype.number(),
            filled_seats: faker.datatype.number(),
            seats: faker.datatype.number(),
          },
          default_repository_permission: faker.lorem.slug(),
          members_can_create_repositories: faker.datatype.boolean(),
          two_factor_requirement_enabled: faker.datatype.boolean(),
          members_allowed_repository_creation_type: faker.lorem.slug(),
          members_can_create_public_repositories: faker.datatype.boolean(),
          members_can_create_private_repositories: faker.datatype.boolean(),
          members_can_create_internal_repositories: faker.datatype.boolean(),
          members_can_create_pages: faker.datatype.boolean(),
          members_can_create_public_pages: faker.datatype.boolean(),
          members_can_create_private_pages: faker.datatype.boolean(),
          members_can_fork_private_repositories: faker.datatype.boolean(),
          updated_at: faker.date.recent(),
        },
        ldap_dn: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/orgs/:org/teams/:teamSlug': {
    get: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        name: faker.lorem.slug(),
        slug: faker.lorem.slug(),
        description: faker.lorem.slug(),
        privacy: faker.random.arrayElement(['closed', 'secret']),
        permission: faker.lorem.slug(),
        members_url: faker.lorem.slug(),
        repositories_url: faker.internet.url(),
        parent: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          html_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          slug: faker.lorem.slug(),
          ldap_dn: faker.lorem.slug(),
        },
        members_count: faker.datatype.number(),
        repos_count: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        organization: {
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          hooks_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          members_url: faker.lorem.slug(),
          public_members_url: faker.lorem.slug(),
          avatar_url: faker.lorem.slug(),
          description: faker.lorem.slug(),
          name: faker.lorem.slug(),
          company: faker.lorem.slug(),
          blog: faker.internet.url(),
          location: faker.lorem.slug(),
          email: faker.internet.exampleEmail(),
          twitter_username: faker.lorem.slug(),
          is_verified: faker.datatype.boolean(),
          has_organization_projects: faker.datatype.boolean(),
          has_repository_projects: faker.datatype.boolean(),
          public_repos: faker.datatype.number(),
          public_gists: faker.datatype.number(),
          followers: faker.datatype.number(),
          following: faker.datatype.number(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          type: faker.lorem.slug(),
          total_private_repos: faker.datatype.number(),
          owned_private_repos: faker.datatype.number(),
          private_gists: faker.datatype.number(),
          disk_usage: faker.datatype.number(),
          collaborators: faker.datatype.number(),
          billing_email: faker.internet.exampleEmail(),
          plan: {
            name: faker.lorem.slug(),
            space: faker.datatype.number(),
            private_repos: faker.datatype.number(),
            filled_seats: faker.datatype.number(),
            seats: faker.datatype.number(),
          },
          default_repository_permission: faker.lorem.slug(),
          members_can_create_repositories: faker.datatype.boolean(),
          two_factor_requirement_enabled: faker.datatype.boolean(),
          members_allowed_repository_creation_type: faker.lorem.slug(),
          members_can_create_public_repositories: faker.datatype.boolean(),
          members_can_create_private_repositories: faker.datatype.boolean(),
          members_can_create_internal_repositories: faker.datatype.boolean(),
          members_can_create_pages: faker.datatype.boolean(),
          members_can_create_public_pages: faker.datatype.boolean(),
          members_can_create_private_pages: faker.datatype.boolean(),
          members_can_fork_private_repositories: faker.datatype.boolean(),
          updated_at: faker.date.recent(),
        },
        ldap_dn: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      201: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        name: faker.lorem.slug(),
        slug: faker.lorem.slug(),
        description: faker.lorem.slug(),
        privacy: faker.random.arrayElement(['closed', 'secret']),
        permission: faker.lorem.slug(),
        members_url: faker.lorem.slug(),
        repositories_url: faker.internet.url(),
        parent: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          html_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          slug: faker.lorem.slug(),
          ldap_dn: faker.lorem.slug(),
        },
        members_count: faker.datatype.number(),
        repos_count: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        organization: {
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          hooks_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          members_url: faker.lorem.slug(),
          public_members_url: faker.lorem.slug(),
          avatar_url: faker.lorem.slug(),
          description: faker.lorem.slug(),
          name: faker.lorem.slug(),
          company: faker.lorem.slug(),
          blog: faker.internet.url(),
          location: faker.lorem.slug(),
          email: faker.internet.exampleEmail(),
          twitter_username: faker.lorem.slug(),
          is_verified: faker.datatype.boolean(),
          has_organization_projects: faker.datatype.boolean(),
          has_repository_projects: faker.datatype.boolean(),
          public_repos: faker.datatype.number(),
          public_gists: faker.datatype.number(),
          followers: faker.datatype.number(),
          following: faker.datatype.number(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          type: faker.lorem.slug(),
          total_private_repos: faker.datatype.number(),
          owned_private_repos: faker.datatype.number(),
          private_gists: faker.datatype.number(),
          disk_usage: faker.datatype.number(),
          collaborators: faker.datatype.number(),
          billing_email: faker.internet.exampleEmail(),
          plan: {
            name: faker.lorem.slug(),
            space: faker.datatype.number(),
            private_repos: faker.datatype.number(),
            filled_seats: faker.datatype.number(),
            seats: faker.datatype.number(),
          },
          default_repository_permission: faker.lorem.slug(),
          members_can_create_repositories: faker.datatype.boolean(),
          two_factor_requirement_enabled: faker.datatype.boolean(),
          members_allowed_repository_creation_type: faker.lorem.slug(),
          members_can_create_public_repositories: faker.datatype.boolean(),
          members_can_create_private_repositories: faker.datatype.boolean(),
          members_can_create_internal_repositories: faker.datatype.boolean(),
          members_can_create_pages: faker.datatype.boolean(),
          members_can_create_public_pages: faker.datatype.boolean(),
          members_can_create_private_pages: faker.datatype.boolean(),
          members_can_fork_private_repositories: faker.datatype.boolean(),
          updated_at: faker.date.recent(),
        },
        ldap_dn: faker.lorem.slug(),
      },
    },
    delete: { 204: null },
  },
  '/orgs/:org/teams/:teamSlug/discussions': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_version: faker.lorem.slug(),
        comments_count: faker.datatype.number(),
        comments_url: faker.internet.url(),
        created_at: faker.date.recent(),
        last_edited_at: faker.date.recent(),
        html_url: faker.internet.url(),
        node_id: faker.lorem.slug(),
        number: faker.datatype.number(),
        pinned: faker.datatype.boolean(),
        private: faker.datatype.boolean(),
        team_url: faker.internet.url(),
        title: faker.lorem.slug(),
        updated_at: faker.date.recent(),
        url: faker.internet.url(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      })),
    },
    post: {
      201: {
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_version: faker.lorem.slug(),
        comments_count: faker.datatype.number(),
        comments_url: faker.internet.url(),
        created_at: faker.date.recent(),
        last_edited_at: faker.date.recent(),
        html_url: faker.internet.url(),
        node_id: faker.lorem.slug(),
        number: faker.datatype.number(),
        pinned: faker.datatype.boolean(),
        private: faker.datatype.boolean(),
        team_url: faker.internet.url(),
        title: faker.lorem.slug(),
        updated_at: faker.date.recent(),
        url: faker.internet.url(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
    },
  },
  '/orgs/:org/teams/:teamSlug/discussions/:discussionNumber': {
    get: {
      200: {
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_version: faker.lorem.slug(),
        comments_count: faker.datatype.number(),
        comments_url: faker.internet.url(),
        created_at: faker.date.recent(),
        last_edited_at: faker.date.recent(),
        html_url: faker.internet.url(),
        node_id: faker.lorem.slug(),
        number: faker.datatype.number(),
        pinned: faker.datatype.boolean(),
        private: faker.datatype.boolean(),
        team_url: faker.internet.url(),
        title: faker.lorem.slug(),
        updated_at: faker.date.recent(),
        url: faker.internet.url(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
    },
    patch: {
      200: {
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_version: faker.lorem.slug(),
        comments_count: faker.datatype.number(),
        comments_url: faker.internet.url(),
        created_at: faker.date.recent(),
        last_edited_at: faker.date.recent(),
        html_url: faker.internet.url(),
        node_id: faker.lorem.slug(),
        number: faker.datatype.number(),
        pinned: faker.datatype.boolean(),
        private: faker.datatype.boolean(),
        team_url: faker.internet.url(),
        title: faker.lorem.slug(),
        updated_at: faker.date.recent(),
        url: faker.internet.url(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
    },
    delete: { 204: null },
  },
  '/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_version: faker.lorem.slug(),
        created_at: faker.date.recent(),
        last_edited_at: faker.date.recent(),
        discussion_url: faker.internet.url(),
        html_url: faker.internet.url(),
        node_id: faker.lorem.slug(),
        number: faker.datatype.number(),
        updated_at: faker.date.recent(),
        url: faker.internet.url(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      })),
    },
    post: {
      201: {
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_version: faker.lorem.slug(),
        created_at: faker.date.recent(),
        last_edited_at: faker.date.recent(),
        discussion_url: faker.internet.url(),
        html_url: faker.internet.url(),
        node_id: faker.lorem.slug(),
        number: faker.datatype.number(),
        updated_at: faker.date.recent(),
        url: faker.internet.url(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
    },
  },
  '/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber':
    {
      get: {
        200: {
          author: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          body: faker.lorem.slug(),
          body_html: faker.lorem.slug(),
          body_version: faker.lorem.slug(),
          created_at: faker.date.recent(),
          last_edited_at: faker.date.recent(),
          discussion_url: faker.internet.url(),
          html_url: faker.internet.url(),
          node_id: faker.lorem.slug(),
          number: faker.datatype.number(),
          updated_at: faker.date.recent(),
          url: faker.internet.url(),
          reactions: {
            url: faker.internet.url(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        },
      },
      patch: {
        200: {
          author: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          body: faker.lorem.slug(),
          body_html: faker.lorem.slug(),
          body_version: faker.lorem.slug(),
          created_at: faker.date.recent(),
          last_edited_at: faker.date.recent(),
          discussion_url: faker.internet.url(),
          html_url: faker.internet.url(),
          node_id: faker.lorem.slug(),
          number: faker.datatype.number(),
          updated_at: faker.date.recent(),
          url: faker.internet.url(),
          reactions: {
            url: faker.internet.url(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        },
      },
      delete: { 204: null },
    },
  '/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions':
    {
      get: {
        200: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          content: faker.random.arrayElement([
            '+1',
            '-1',
            'laugh',
            'confused',
            'heart',
            'hooray',
            'rocket',
            'eyes',
          ]),
          created_at: faker.date.recent(),
        })),
      },
      post: {
        200: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          content: faker.random.arrayElement([
            '+1',
            '-1',
            'laugh',
            'confused',
            'heart',
            'hooray',
            'rocket',
            'eyes',
          ]),
          created_at: faker.date.recent(),
        },
        201: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          content: faker.random.arrayElement([
            '+1',
            '-1',
            'laugh',
            'confused',
            'heart',
            'hooray',
            'rocket',
            'eyes',
          ]),
          created_at: faker.date.recent(),
        },
      },
    },
  '/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/comments/:commentNumber/reactions/:reactionId':
    { delete: { 204: null } },
  '/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        content: faker.random.arrayElement([
          '+1',
          '-1',
          'laugh',
          'confused',
          'heart',
          'hooray',
          'rocket',
          'eyes',
        ]),
        created_at: faker.date.recent(),
      })),
    },
    post: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        content: faker.random.arrayElement([
          '+1',
          '-1',
          'laugh',
          'confused',
          'heart',
          'hooray',
          'rocket',
          'eyes',
        ]),
        created_at: faker.date.recent(),
      },
      201: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        content: faker.random.arrayElement([
          '+1',
          '-1',
          'laugh',
          'confused',
          'heart',
          'hooray',
          'rocket',
          'eyes',
        ]),
        created_at: faker.date.recent(),
      },
    },
  },
  '/orgs/:org/teams/:teamSlug/discussions/:discussionNumber/reactions/:reactionId':
    { delete: { 204: null } },
  '/orgs/:org/teams/:teamSlug/members': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        email: faker.lorem.slug(),
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        starred_at: faker.lorem.slug(),
      })),
    },
  },
  '/orgs/:org/teams/:teamSlug/memberships/:username': {
    get: {
      200: {
        url: faker.internet.url(),
        role: faker.random.arrayElement(['member', 'maintainer']),
        state: faker.random.arrayElement(['active', 'pending']),
      },
      404: null,
    },
    put: {
      200: {
        url: faker.internet.url(),
        role: faker.random.arrayElement(['member', 'maintainer']),
        state: faker.random.arrayElement(['active', 'pending']),
      },
      403: null,
      422: null,
    },
    delete: { 204: null, 403: null },
  },
  '/orgs/:org/teams/:teamSlug/projects': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        owner_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        columns_url: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        body: faker.lorem.slug(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.lorem.slug(),
        updated_at: faker.lorem.slug(),
        organization_permission: faker.lorem.slug(),
        private: faker.datatype.boolean(),
        permissions: {
          read: faker.datatype.boolean(),
          write: faker.datatype.boolean(),
          admin: faker.datatype.boolean(),
        },
      })),
    },
  },
  '/orgs/:org/teams/:teamSlug/projects/:projectId': {
    get: {
      200: {
        owner_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        columns_url: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        body: faker.lorem.slug(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.lorem.slug(),
        updated_at: faker.lorem.slug(),
        organization_permission: faker.lorem.slug(),
        private: faker.datatype.boolean(),
        permissions: {
          read: faker.datatype.boolean(),
          write: faker.datatype.boolean(),
          admin: faker.datatype.boolean(),
        },
      },
      404: null,
    },
    put: {
      204: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
    delete: { 204: null },
  },
  '/orgs/:org/teams/:teamSlug/repos': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        full_name: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.lorem.slug(),
        assignees_url: faker.lorem.slug(),
        blobs_url: faker.lorem.slug(),
        branches_url: faker.lorem.slug(),
        collaborators_url: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        compare_url: faker.lorem.slug(),
        contents_url: faker.lorem.slug(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.lorem.slug(),
        git_refs_url: faker.lorem.slug(),
        git_tags_url: faker.lorem.slug(),
        git_url: faker.lorem.slug(),
        issue_comment_url: faker.lorem.slug(),
        issue_events_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        labels_url: faker.lorem.slug(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        pulls_url: faker.lorem.slug(),
        releases_url: faker.lorem.slug(),
        ssh_url: faker.lorem.slug(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.lorem.slug(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.lorem.slug(),
        clone_url: faker.lorem.slug(),
        mirror_url: faker.lorem.slug(),
        hooks_url: faker.internet.url(),
        svn_url: faker.lorem.slug(),
        homepage: faker.lorem.slug(),
        language: faker.lorem.slug(),
        forks_count: faker.datatype.number(),
        stargazers_count: faker.datatype.number(),
        watchers_count: faker.datatype.number(),
        size: faker.datatype.number(),
        default_branch: faker.lorem.slug(),
        open_issues_count: faker.datatype.number(),
        is_template: faker.datatype.boolean(),
        topics: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
        pushed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        template_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        temp_clone_token: faker.lorem.slug(),
        delete_branch_on_merge: faker.datatype.boolean(),
        subscribers_count: faker.datatype.number(),
        network_count: faker.datatype.number(),
        code_of_conduct: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          body: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          spdx_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
        },
        forks: faker.datatype.number(),
        open_issues: faker.datatype.number(),
        watchers: faker.datatype.number(),
        allow_forking: faker.datatype.boolean(),
      })),
    },
  },
  '/orgs/:org/teams/:teamSlug/repos/:owner/:repo': {
    get: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        full_name: faker.lorem.slug(),
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          spdx_id: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        forks: faker.datatype.number(),
        permissions: {
          admin: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
        },
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.lorem.slug(),
        assignees_url: faker.lorem.slug(),
        blobs_url: faker.lorem.slug(),
        branches_url: faker.lorem.slug(),
        collaborators_url: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        compare_url: faker.lorem.slug(),
        contents_url: faker.lorem.slug(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.lorem.slug(),
        git_refs_url: faker.lorem.slug(),
        git_tags_url: faker.lorem.slug(),
        git_url: faker.lorem.slug(),
        issue_comment_url: faker.lorem.slug(),
        issue_events_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        labels_url: faker.lorem.slug(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        pulls_url: faker.lorem.slug(),
        releases_url: faker.lorem.slug(),
        ssh_url: faker.lorem.slug(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.lorem.slug(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.lorem.slug(),
        clone_url: faker.lorem.slug(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.internet.url(),
        language: faker.lorem.slug(),
        forks_count: faker.datatype.number(),
        stargazers_count: faker.datatype.number(),
        watchers_count: faker.datatype.number(),
        size: faker.datatype.number(),
        default_branch: faker.lorem.slug(),
        open_issues_count: faker.datatype.number(),
        is_template: faker.datatype.boolean(),
        topics: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
        pushed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        allow_rebase_merge: faker.datatype.boolean(),
        template_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        temp_clone_token: faker.lorem.slug(),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.datatype.number(),
        network_count: faker.datatype.number(),
        open_issues: faker.datatype.number(),
        watchers: faker.datatype.number(),
        master_branch: faker.lorem.slug(),
      },
      204: null,
      404: null,
    },
    put: { 204: null },
    delete: { 204: null },
  },
  '/orgs/:org/teams/:teamSlug/teams': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        slug: faker.lorem.slug(),
        description: faker.lorem.slug(),
        privacy: faker.lorem.slug(),
        permission: faker.lorem.slug(),
        permissions: {
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          admin: faker.datatype.boolean(),
        },
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        members_url: faker.lorem.slug(),
        repositories_url: faker.internet.url(),
        parent: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          html_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          slug: faker.lorem.slug(),
          ldap_dn: faker.lorem.slug(),
        },
      })),
    },
  },
  '/projects/columns/cards/:cardId': {
    get: {
      200: {
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        note: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        archived: faker.datatype.boolean(),
        column_name: faker.lorem.slug(),
        project_id: faker.lorem.slug(),
        column_url: faker.internet.url(),
        content_url: faker.internet.url(),
        project_url: faker.internet.url(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        note: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        archived: faker.datatype.boolean(),
        column_name: faker.lorem.slug(),
        project_id: faker.lorem.slug(),
        column_url: faker.internet.url(),
        content_url: faker.internet.url(),
        project_url: faker.internet.url(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
    delete: {
      204: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/projects/columns/cards/:cardId/moves': {
    post: {
      201: {},
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          code: faker.lorem.slug(),
          message: faker.lorem.slug(),
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
        })),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          code: faker.lorem.slug(),
          message: faker.lorem.slug(),
        })),
      },
    },
  },
  '/projects/columns/:columnId': {
    get: {
      200: {
        url: faker.internet.url(),
        project_url: faker.internet.url(),
        cards_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        url: faker.internet.url(),
        project_url: faker.internet.url(),
        cards_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: {
      204: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/projects/columns/:columnId/cards': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        note: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        archived: faker.datatype.boolean(),
        column_name: faker.lorem.slug(),
        project_id: faker.lorem.slug(),
        column_url: faker.internet.url(),
        content_url: faker.internet.url(),
        project_url: faker.internet.url(),
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      201: {
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        note: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        archived: faker.datatype.boolean(),
        column_name: faker.lorem.slug(),
        project_id: faker.lorem.slug(),
        column_url: faker.internet.url(),
        content_url: faker.internet.url(),
        project_url: faker.internet.url(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: null,
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          code: faker.lorem.slug(),
          message: faker.lorem.slug(),
        })),
      },
    },
  },
  '/projects/columns/:columnId/moves': {
    post: {
      201: {},
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
  },
  '/projects/:projectId': {
    get: {
      200: {
        owner_url: faker.internet.url(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        columns_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        body: faker.lorem.slug(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        organization_permission: faker.random.arrayElement([
          'read',
          'write',
          'admin',
          'none',
        ]),
        private: faker.datatype.boolean(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        owner_url: faker.internet.url(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        columns_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        body: faker.lorem.slug(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        organization_permission: faker.random.arrayElement([
          'read',
          'write',
          'admin',
          'none',
        ]),
        private: faker.datatype.boolean(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
      404: null,
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
    delete: {
      204: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/projects/:projectId/collaborators': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        email: faker.lorem.slug(),
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        starred_at: faker.lorem.slug(),
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/projects/:projectId/collaborators/:username': {
    put: {
      204: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: {
      204: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/projects/:projectId/collaborators/:username/permission': {
    get: {
      200: {
        permission: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/projects/:projectId/columns': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        project_url: faker.internet.url(),
        cards_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      201: {
        url: faker.internet.url(),
        project_url: faker.internet.url(),
        cards_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
  },
  '/rate_limit': {
    get: {
      200: {
        resources: {
          core: {
            limit: faker.datatype.number(),
            remaining: faker.datatype.number(),
            reset: faker.datatype.number(),
            used: faker.datatype.number(),
          },
          graphql: {
            limit: faker.datatype.number(),
            remaining: faker.datatype.number(),
            reset: faker.datatype.number(),
            used: faker.datatype.number(),
          },
          search: {
            limit: faker.datatype.number(),
            remaining: faker.datatype.number(),
            reset: faker.datatype.number(),
            used: faker.datatype.number(),
          },
          source_import: {
            limit: faker.datatype.number(),
            remaining: faker.datatype.number(),
            reset: faker.datatype.number(),
            used: faker.datatype.number(),
          },
          integration_manifest: {
            limit: faker.datatype.number(),
            remaining: faker.datatype.number(),
            reset: faker.datatype.number(),
            used: faker.datatype.number(),
          },
          code_scanning_upload: {
            limit: faker.datatype.number(),
            remaining: faker.datatype.number(),
            reset: faker.datatype.number(),
            used: faker.datatype.number(),
          },
          actions_runner_registration: {
            limit: faker.datatype.number(),
            remaining: faker.datatype.number(),
            reset: faker.datatype.number(),
            used: faker.datatype.number(),
          },
          scim: {
            limit: faker.datatype.number(),
            remaining: faker.datatype.number(),
            reset: faker.datatype.number(),
            used: faker.datatype.number(),
          },
        },
        rate: {
          limit: faker.datatype.number(),
          remaining: faker.datatype.number(),
          reset: faker.datatype.number(),
          used: faker.datatype.number(),
        },
      },
      304: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/reactions/:reactionId': {
    delete: {
      204: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo': {
    get: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        full_name: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.lorem.slug(),
        assignees_url: faker.lorem.slug(),
        blobs_url: faker.lorem.slug(),
        branches_url: faker.lorem.slug(),
        collaborators_url: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        compare_url: faker.lorem.slug(),
        contents_url: faker.lorem.slug(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.lorem.slug(),
        git_refs_url: faker.lorem.slug(),
        git_tags_url: faker.lorem.slug(),
        git_url: faker.lorem.slug(),
        issue_comment_url: faker.lorem.slug(),
        issue_events_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        labels_url: faker.lorem.slug(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        pulls_url: faker.lorem.slug(),
        releases_url: faker.lorem.slug(),
        ssh_url: faker.lorem.slug(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.lorem.slug(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.lorem.slug(),
        clone_url: faker.lorem.slug(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.internet.url(),
        language: faker.lorem.slug(),
        forks_count: faker.datatype.number(),
        stargazers_count: faker.datatype.number(),
        watchers_count: faker.datatype.number(),
        size: faker.datatype.number(),
        default_branch: faker.lorem.slug(),
        open_issues_count: faker.datatype.number(),
        is_template: faker.datatype.boolean(),
        topics: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
        pushed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        template_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        temp_clone_token: faker.lorem.slug(),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.datatype.number(),
        network_count: faker.datatype.number(),
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          spdx_id: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        parent: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        source: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        forks: faker.datatype.number(),
        master_branch: faker.lorem.slug(),
        open_issues: faker.datatype.number(),
        watchers: faker.datatype.number(),
        anonymous_access_enabled: faker.datatype.boolean(),
        code_of_conduct: {
          url: faker.internet.url(),
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        security_and_analysis: {
          advanced_security: {
            status: faker.random.arrayElement(['enabled', 'disabled']),
          },
          secret_scanning: {
            status: faker.random.arrayElement(['enabled', 'disabled']),
          },
          secret_scanning_push_protection: {
            status: faker.random.arrayElement(['enabled', 'disabled']),
          },
        },
      },
      301: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        full_name: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.lorem.slug(),
        assignees_url: faker.lorem.slug(),
        blobs_url: faker.lorem.slug(),
        branches_url: faker.lorem.slug(),
        collaborators_url: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        compare_url: faker.lorem.slug(),
        contents_url: faker.lorem.slug(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.lorem.slug(),
        git_refs_url: faker.lorem.slug(),
        git_tags_url: faker.lorem.slug(),
        git_url: faker.lorem.slug(),
        issue_comment_url: faker.lorem.slug(),
        issue_events_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        labels_url: faker.lorem.slug(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        pulls_url: faker.lorem.slug(),
        releases_url: faker.lorem.slug(),
        ssh_url: faker.lorem.slug(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.lorem.slug(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.lorem.slug(),
        clone_url: faker.lorem.slug(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.internet.url(),
        language: faker.lorem.slug(),
        forks_count: faker.datatype.number(),
        stargazers_count: faker.datatype.number(),
        watchers_count: faker.datatype.number(),
        size: faker.datatype.number(),
        default_branch: faker.lorem.slug(),
        open_issues_count: faker.datatype.number(),
        is_template: faker.datatype.boolean(),
        topics: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
        pushed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        template_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        temp_clone_token: faker.lorem.slug(),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.datatype.number(),
        network_count: faker.datatype.number(),
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          spdx_id: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        parent: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        source: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        forks: faker.datatype.number(),
        master_branch: faker.lorem.slug(),
        open_issues: faker.datatype.number(),
        watchers: faker.datatype.number(),
        anonymous_access_enabled: faker.datatype.boolean(),
        code_of_conduct: {
          url: faker.internet.url(),
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        security_and_analysis: {
          advanced_security: {
            status: faker.random.arrayElement(['enabled', 'disabled']),
          },
          secret_scanning: {
            status: faker.random.arrayElement(['enabled', 'disabled']),
          },
          secret_scanning_push_protection: {
            status: faker.random.arrayElement(['enabled', 'disabled']),
          },
        },
      },
      307: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: {
      204: null,
      307: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/actions/artifacts': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        artifacts: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          size_in_bytes: faker.datatype.number(),
          url: faker.lorem.slug(),
          archive_download_url: faker.lorem.slug(),
          expired: faker.datatype.boolean(),
          created_at: faker.date.recent(),
          expires_at: faker.date.recent(),
          updated_at: faker.date.recent(),
        })),
      },
    },
  },
  '/repos/:owner/:repo/actions/artifacts/:artifactId': {
    get: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        size_in_bytes: faker.datatype.number(),
        url: faker.lorem.slug(),
        archive_download_url: faker.lorem.slug(),
        expired: faker.datatype.boolean(),
        created_at: faker.date.recent(),
        expires_at: faker.date.recent(),
        updated_at: faker.date.recent(),
      },
    },
    delete: { 204: null },
  },
  '/repos/:owner/:repo/actions/artifacts/:artifactId/:archiveFormat': {
    get: { 302: null },
  },
  '/repos/:owner/:repo/actions/jobs/:jobId': {
    get: {
      200: {
        id: faker.datatype.number(),
        run_id: faker.datatype.number(),
        run_url: faker.lorem.slug(),
        run_attempt: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        head_sha: faker.lorem.slug(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        status: faker.random.arrayElement([
          'queued',
          'in_progress',
          'completed',
        ]),
        conclusion: faker.lorem.slug(),
        started_at: faker.date.recent(),
        completed_at: faker.date.recent(),
        name: faker.lorem.slug(),
        steps: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          status: faker.random.arrayElement([
            'queued',
            'in_progress',
            'completed',
          ]),
          conclusion: faker.lorem.slug(),
          name: faker.lorem.slug(),
          number: faker.datatype.number(),
          started_at: faker.date.recent(),
          completed_at: faker.date.recent(),
        })),
        check_run_url: faker.lorem.slug(),
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        runner_id: faker.datatype.number(),
        runner_name: faker.lorem.slug(),
        runner_group_id: faker.datatype.number(),
        runner_group_name: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/actions/jobs/:jobId/logs': { get: { 302: null } },
  '/repos/:owner/:repo/actions/permissions': {
    get: {
      200: {
        enabled: faker.datatype.boolean(),
        allowed_actions: faker.random.arrayElement([
          'all',
          'local_only',
          'selected',
        ]),
        selected_actions_url: faker.lorem.slug(),
      },
    },
    put: { 204: null },
  },
  '/repos/:owner/:repo/actions/permissions/selected-actions': {
    get: {
      200: {
        github_owned_allowed: faker.datatype.boolean(),
        patterns_allowed: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
    put: { 204: null },
  },
  '/repos/:owner/:repo/actions/runners': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        runners: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          os: faker.lorem.slug(),
          status: faker.lorem.slug(),
          busy: faker.datatype.boolean(),
          labels: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            name: faker.lorem.slug(),
            type: faker.random.arrayElement(['read-only', 'custom']),
          })),
        })),
      },
    },
  },
  '/repos/:owner/:repo/actions/runners/downloads': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        os: faker.lorem.slug(),
        architecture: faker.lorem.slug(),
        download_url: faker.lorem.slug(),
        filename: faker.lorem.slug(),
        temp_download_token: faker.lorem.slug(),
        sha256_checksum: faker.lorem.slug(),
      })),
    },
  },
  '/repos/:owner/:repo/actions/runners/registration-token': {
    post: {
      201: {
        token: faker.lorem.slug(),
        expires_at: faker.date.recent(),
        permissions: {},
        repositories: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        })),
        single_file: faker.lorem.slug(),
        repository_selection: faker.random.arrayElement(['all', 'selected']),
      },
    },
  },
  '/repos/:owner/:repo/actions/runners/remove-token': {
    post: {
      201: {
        token: faker.lorem.slug(),
        expires_at: faker.date.recent(),
        permissions: {},
        repositories: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        })),
        single_file: faker.lorem.slug(),
        repository_selection: faker.random.arrayElement(['all', 'selected']),
      },
    },
  },
  '/repos/:owner/:repo/actions/runners/:runnerId': {
    get: {
      200: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        os: faker.lorem.slug(),
        status: faker.lorem.slug(),
        busy: faker.datatype.boolean(),
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          type: faker.random.arrayElement(['read-only', 'custom']),
        })),
      },
    },
    delete: { 204: null },
  },
  '/repos/:owner/:repo/actions/runs': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        workflow_runs: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          check_suite_id: faker.datatype.number(),
          check_suite_node_id: faker.lorem.slug(),
          head_branch: faker.lorem.slug(),
          head_sha: faker.lorem.slug(),
          run_number: faker.datatype.number(),
          run_attempt: faker.datatype.number(),
          event: faker.lorem.slug(),
          status: faker.lorem.slug(),
          conclusion: faker.lorem.slug(),
          workflow_id: faker.datatype.number(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          pull_requests: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            number: faker.datatype.number(),
            url: faker.lorem.slug(),
            head: {
              ref: faker.lorem.slug(),
              sha: faker.lorem.slug(),
              repo: {
                id: faker.datatype.number(),
                url: faker.lorem.slug(),
                name: faker.lorem.slug(),
              },
            },
            base: {
              ref: faker.lorem.slug(),
              sha: faker.lorem.slug(),
              repo: {
                id: faker.datatype.number(),
                url: faker.lorem.slug(),
                name: faker.lorem.slug(),
              },
            },
          })),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          run_started_at: faker.date.recent(),
          jobs_url: faker.lorem.slug(),
          logs_url: faker.lorem.slug(),
          check_suite_url: faker.lorem.slug(),
          artifacts_url: faker.lorem.slug(),
          cancel_url: faker.lorem.slug(),
          rerun_url: faker.lorem.slug(),
          previous_attempt_url: faker.lorem.slug(),
          workflow_url: faker.lorem.slug(),
          head_commit: {
            id: faker.lorem.slug(),
            tree_id: faker.lorem.slug(),
            message: faker.lorem.slug(),
            timestamp: faker.date.recent(),
            author: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
            },
            committer: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
            },
          },
          repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.internet.url(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              license: {
                key: faker.lorem.slug(),
                name: faker.lorem.slug(),
                url: faker.internet.url(),
                spdx_id: faker.lorem.slug(),
                node_id: faker.lorem.slug(),
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.date.recent(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                name: faker.lorem.slug(),
                full_name: faker.lorem.slug(),
                owner: {
                  login: faker.lorem.slug(),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(),
                  avatar_url: faker.lorem.slug(),
                  gravatar_id: faker.lorem.slug(),
                  url: faker.lorem.slug(),
                  html_url: faker.lorem.slug(),
                  followers_url: faker.lorem.slug(),
                  following_url: faker.lorem.slug(),
                  gists_url: faker.lorem.slug(),
                  starred_url: faker.lorem.slug(),
                  subscriptions_url: faker.lorem.slug(),
                  organizations_url: faker.lorem.slug(),
                  repos_url: faker.lorem.slug(),
                  events_url: faker.lorem.slug(),
                  received_events_url: faker.lorem.slug(),
                  type: faker.lorem.slug(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.lorem.slug(),
                description: faker.lorem.slug(),
                fork: faker.datatype.boolean(),
                url: faker.lorem.slug(),
                archive_url: faker.lorem.slug(),
                assignees_url: faker.lorem.slug(),
                blobs_url: faker.lorem.slug(),
                branches_url: faker.lorem.slug(),
                collaborators_url: faker.lorem.slug(),
                comments_url: faker.lorem.slug(),
                commits_url: faker.lorem.slug(),
                compare_url: faker.lorem.slug(),
                contents_url: faker.lorem.slug(),
                contributors_url: faker.lorem.slug(),
                deployments_url: faker.lorem.slug(),
                downloads_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                forks_url: faker.lorem.slug(),
                git_commits_url: faker.lorem.slug(),
                git_refs_url: faker.lorem.slug(),
                git_tags_url: faker.lorem.slug(),
                git_url: faker.lorem.slug(),
                issue_comment_url: faker.lorem.slug(),
                issue_events_url: faker.lorem.slug(),
                issues_url: faker.lorem.slug(),
                keys_url: faker.lorem.slug(),
                labels_url: faker.lorem.slug(),
                languages_url: faker.lorem.slug(),
                merges_url: faker.lorem.slug(),
                milestones_url: faker.lorem.slug(),
                notifications_url: faker.lorem.slug(),
                pulls_url: faker.lorem.slug(),
                releases_url: faker.lorem.slug(),
                ssh_url: faker.lorem.slug(),
                stargazers_url: faker.lorem.slug(),
                statuses_url: faker.lorem.slug(),
                subscribers_url: faker.lorem.slug(),
                subscription_url: faker.lorem.slug(),
                tags_url: faker.lorem.slug(),
                teams_url: faker.lorem.slug(),
                trees_url: faker.lorem.slug(),
                clone_url: faker.lorem.slug(),
                mirror_url: faker.lorem.slug(),
                hooks_url: faker.lorem.slug(),
                svn_url: faker.lorem.slug(),
                homepage: faker.lorem.slug(),
                language: faker.lorem.slug(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(),
                pushed_at: faker.lorem.slug(),
                created_at: faker.lorem.slug(),
                updated_at: faker.lorem.slug(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(),
              starred_at: faker.lorem.slug(),
            },
            temp_clone_token: faker.lorem.slug(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              body: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              spdx_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          },
          head_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.internet.url(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              license: {
                key: faker.lorem.slug(),
                name: faker.lorem.slug(),
                url: faker.internet.url(),
                spdx_id: faker.lorem.slug(),
                node_id: faker.lorem.slug(),
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.date.recent(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                name: faker.lorem.slug(),
                full_name: faker.lorem.slug(),
                owner: {
                  login: faker.lorem.slug(),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(),
                  avatar_url: faker.lorem.slug(),
                  gravatar_id: faker.lorem.slug(),
                  url: faker.lorem.slug(),
                  html_url: faker.lorem.slug(),
                  followers_url: faker.lorem.slug(),
                  following_url: faker.lorem.slug(),
                  gists_url: faker.lorem.slug(),
                  starred_url: faker.lorem.slug(),
                  subscriptions_url: faker.lorem.slug(),
                  organizations_url: faker.lorem.slug(),
                  repos_url: faker.lorem.slug(),
                  events_url: faker.lorem.slug(),
                  received_events_url: faker.lorem.slug(),
                  type: faker.lorem.slug(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.lorem.slug(),
                description: faker.lorem.slug(),
                fork: faker.datatype.boolean(),
                url: faker.lorem.slug(),
                archive_url: faker.lorem.slug(),
                assignees_url: faker.lorem.slug(),
                blobs_url: faker.lorem.slug(),
                branches_url: faker.lorem.slug(),
                collaborators_url: faker.lorem.slug(),
                comments_url: faker.lorem.slug(),
                commits_url: faker.lorem.slug(),
                compare_url: faker.lorem.slug(),
                contents_url: faker.lorem.slug(),
                contributors_url: faker.lorem.slug(),
                deployments_url: faker.lorem.slug(),
                downloads_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                forks_url: faker.lorem.slug(),
                git_commits_url: faker.lorem.slug(),
                git_refs_url: faker.lorem.slug(),
                git_tags_url: faker.lorem.slug(),
                git_url: faker.lorem.slug(),
                issue_comment_url: faker.lorem.slug(),
                issue_events_url: faker.lorem.slug(),
                issues_url: faker.lorem.slug(),
                keys_url: faker.lorem.slug(),
                labels_url: faker.lorem.slug(),
                languages_url: faker.lorem.slug(),
                merges_url: faker.lorem.slug(),
                milestones_url: faker.lorem.slug(),
                notifications_url: faker.lorem.slug(),
                pulls_url: faker.lorem.slug(),
                releases_url: faker.lorem.slug(),
                ssh_url: faker.lorem.slug(),
                stargazers_url: faker.lorem.slug(),
                statuses_url: faker.lorem.slug(),
                subscribers_url: faker.lorem.slug(),
                subscription_url: faker.lorem.slug(),
                tags_url: faker.lorem.slug(),
                teams_url: faker.lorem.slug(),
                trees_url: faker.lorem.slug(),
                clone_url: faker.lorem.slug(),
                mirror_url: faker.lorem.slug(),
                hooks_url: faker.lorem.slug(),
                svn_url: faker.lorem.slug(),
                homepage: faker.lorem.slug(),
                language: faker.lorem.slug(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(),
                pushed_at: faker.lorem.slug(),
                created_at: faker.lorem.slug(),
                updated_at: faker.lorem.slug(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(),
              starred_at: faker.lorem.slug(),
            },
            temp_clone_token: faker.lorem.slug(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              body: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              spdx_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          },
          head_repository_id: faker.datatype.number(),
        })),
      },
    },
  },
  '/repos/:owner/:repo/actions/runs/:runId': {
    get: {
      200: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        check_suite_id: faker.datatype.number(),
        check_suite_node_id: faker.lorem.slug(),
        head_branch: faker.lorem.slug(),
        head_sha: faker.lorem.slug(),
        run_number: faker.datatype.number(),
        run_attempt: faker.datatype.number(),
        event: faker.lorem.slug(),
        status: faker.lorem.slug(),
        conclusion: faker.lorem.slug(),
        workflow_id: faker.datatype.number(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        pull_requests: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          number: faker.datatype.number(),
          url: faker.lorem.slug(),
          head: {
            ref: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            repo: {
              id: faker.datatype.number(),
              url: faker.lorem.slug(),
              name: faker.lorem.slug(),
            },
          },
          base: {
            ref: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            repo: {
              id: faker.datatype.number(),
              url: faker.lorem.slug(),
              name: faker.lorem.slug(),
            },
          },
        })),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        run_started_at: faker.date.recent(),
        jobs_url: faker.lorem.slug(),
        logs_url: faker.lorem.slug(),
        check_suite_url: faker.lorem.slug(),
        artifacts_url: faker.lorem.slug(),
        cancel_url: faker.lorem.slug(),
        rerun_url: faker.lorem.slug(),
        previous_attempt_url: faker.lorem.slug(),
        workflow_url: faker.lorem.slug(),
        head_commit: {
          id: faker.lorem.slug(),
          tree_id: faker.lorem.slug(),
          message: faker.lorem.slug(),
          timestamp: faker.date.recent(),
          author: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
          },
          committer: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
          },
        },
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.internet.url(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          temp_clone_token: faker.lorem.slug(),
          delete_branch_on_merge: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          code_of_conduct: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            spdx_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          allow_forking: faker.datatype.boolean(),
        },
        head_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.internet.url(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          temp_clone_token: faker.lorem.slug(),
          delete_branch_on_merge: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          code_of_conduct: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            spdx_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          allow_forking: faker.datatype.boolean(),
        },
        head_repository_id: faker.datatype.number(),
      },
    },
    delete: { 204: null },
  },
  '/repos/:owner/:repo/actions/runs/:runId/approvals': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        environments: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
        })),
        state: faker.random.arrayElement(['approved', 'rejected']),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        comment: faker.lorem.slug(),
      })),
    },
  },
  '/repos/:owner/:repo/actions/runs/:runId/artifacts': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        artifacts: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          size_in_bytes: faker.datatype.number(),
          url: faker.lorem.slug(),
          archive_download_url: faker.lorem.slug(),
          expired: faker.datatype.boolean(),
          created_at: faker.date.recent(),
          expires_at: faker.date.recent(),
          updated_at: faker.date.recent(),
        })),
      },
    },
  },
  '/repos/:owner/:repo/actions/runs/:runId/cancel': {
    post: {
      202: {},
      409: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/actions/runs/:runId/jobs': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        jobs: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          run_id: faker.datatype.number(),
          run_url: faker.lorem.slug(),
          run_attempt: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          head_sha: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          status: faker.random.arrayElement([
            'queued',
            'in_progress',
            'completed',
          ]),
          conclusion: faker.lorem.slug(),
          started_at: faker.date.recent(),
          completed_at: faker.date.recent(),
          name: faker.lorem.slug(),
          steps: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            status: faker.random.arrayElement([
              'queued',
              'in_progress',
              'completed',
            ]),
            conclusion: faker.lorem.slug(),
            name: faker.lorem.slug(),
            number: faker.datatype.number(),
            started_at: faker.date.recent(),
            completed_at: faker.date.recent(),
          })),
          check_run_url: faker.lorem.slug(),
          labels: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          runner_id: faker.datatype.number(),
          runner_name: faker.lorem.slug(),
          runner_group_id: faker.datatype.number(),
          runner_group_name: faker.lorem.slug(),
        })),
      },
    },
  },
  '/repos/:owner/:repo/actions/runs/:runId/logs': {
    get: { 302: null },
    delete: {
      204: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      500: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/actions/runs/:runId/pending_deployments': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        environment: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
        },
        wait_timer: faker.datatype.number(),
        wait_timer_started_at: faker.date.recent(),
        current_user_can_approve: faker.datatype.boolean(),
        reviewers: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          type: faker.random.arrayElement(['User', 'Team']),
          reviewer: null,
        })),
      })),
    },
    post: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        sha: faker.lorem.slug(),
        ref: faker.lorem.slug(),
        task: faker.lorem.slug(),
        payload: null,
        original_environment: faker.lorem.slug(),
        environment: faker.lorem.slug(),
        description: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        statuses_url: faker.internet.url(),
        repository_url: faker.internet.url(),
        transient_environment: faker.datatype.boolean(),
        production_environment: faker.datatype.boolean(),
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
      })),
    },
  },
  '/repos/:owner/:repo/actions/runs/:runId/rerun': { post: { 201: {} } },
  '/repos/:owner/:repo/actions/secrets': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        secrets: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
        })),
      },
    },
  },
  '/repos/:owner/:repo/actions/secrets/public-key': {
    get: {
      200: {
        key_id: faker.lorem.slug(),
        key: faker.lorem.slug(),
        id: faker.datatype.number(),
        url: faker.lorem.slug(),
        title: faker.lorem.slug(),
        created_at: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/actions/secrets/:secretName': {
    get: {
      200: {
        name: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
      },
    },
    put: { 201: {}, 204: null },
    delete: { 204: null },
  },
  '/repos/:owner/:repo/actions/workflows': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        workflows: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          path: faker.lorem.slug(),
          state: faker.random.arrayElement([
            'active',
            'deleted',
            'disabled_fork',
            'disabled_inactivity',
            'disabled_manually',
          ]),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          badge_url: faker.lorem.slug(),
          deleted_at: faker.date.recent(),
        })),
      },
    },
  },
  '/repos/:owner/:repo/actions/workflows/:workflowId': {
    get: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        path: faker.lorem.slug(),
        state: faker.random.arrayElement([
          'active',
          'deleted',
          'disabled_fork',
          'disabled_inactivity',
          'disabled_manually',
        ]),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        badge_url: faker.lorem.slug(),
        deleted_at: faker.date.recent(),
      },
    },
  },
  '/repos/:owner/:repo/actions/workflows/:workflowId/disable': {
    put: { 204: null },
  },
  '/repos/:owner/:repo/actions/workflows/:workflowId/dispatches': {
    post: { 204: null },
  },
  '/repos/:owner/:repo/actions/workflows/:workflowId/enable': {
    put: { 204: null },
  },
  '/repos/:owner/:repo/actions/workflows/:workflowId/runs': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        workflow_runs: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          check_suite_id: faker.datatype.number(),
          check_suite_node_id: faker.lorem.slug(),
          head_branch: faker.lorem.slug(),
          head_sha: faker.lorem.slug(),
          run_number: faker.datatype.number(),
          run_attempt: faker.datatype.number(),
          event: faker.lorem.slug(),
          status: faker.lorem.slug(),
          conclusion: faker.lorem.slug(),
          workflow_id: faker.datatype.number(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          pull_requests: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            number: faker.datatype.number(),
            url: faker.lorem.slug(),
            head: {
              ref: faker.lorem.slug(),
              sha: faker.lorem.slug(),
              repo: {
                id: faker.datatype.number(),
                url: faker.lorem.slug(),
                name: faker.lorem.slug(),
              },
            },
            base: {
              ref: faker.lorem.slug(),
              sha: faker.lorem.slug(),
              repo: {
                id: faker.datatype.number(),
                url: faker.lorem.slug(),
                name: faker.lorem.slug(),
              },
            },
          })),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          run_started_at: faker.date.recent(),
          jobs_url: faker.lorem.slug(),
          logs_url: faker.lorem.slug(),
          check_suite_url: faker.lorem.slug(),
          artifacts_url: faker.lorem.slug(),
          cancel_url: faker.lorem.slug(),
          rerun_url: faker.lorem.slug(),
          previous_attempt_url: faker.lorem.slug(),
          workflow_url: faker.lorem.slug(),
          head_commit: {
            id: faker.lorem.slug(),
            tree_id: faker.lorem.slug(),
            message: faker.lorem.slug(),
            timestamp: faker.date.recent(),
            author: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
            },
            committer: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
            },
          },
          repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.internet.url(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              license: {
                key: faker.lorem.slug(),
                name: faker.lorem.slug(),
                url: faker.internet.url(),
                spdx_id: faker.lorem.slug(),
                node_id: faker.lorem.slug(),
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.date.recent(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                name: faker.lorem.slug(),
                full_name: faker.lorem.slug(),
                owner: {
                  login: faker.lorem.slug(),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(),
                  avatar_url: faker.lorem.slug(),
                  gravatar_id: faker.lorem.slug(),
                  url: faker.lorem.slug(),
                  html_url: faker.lorem.slug(),
                  followers_url: faker.lorem.slug(),
                  following_url: faker.lorem.slug(),
                  gists_url: faker.lorem.slug(),
                  starred_url: faker.lorem.slug(),
                  subscriptions_url: faker.lorem.slug(),
                  organizations_url: faker.lorem.slug(),
                  repos_url: faker.lorem.slug(),
                  events_url: faker.lorem.slug(),
                  received_events_url: faker.lorem.slug(),
                  type: faker.lorem.slug(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.lorem.slug(),
                description: faker.lorem.slug(),
                fork: faker.datatype.boolean(),
                url: faker.lorem.slug(),
                archive_url: faker.lorem.slug(),
                assignees_url: faker.lorem.slug(),
                blobs_url: faker.lorem.slug(),
                branches_url: faker.lorem.slug(),
                collaborators_url: faker.lorem.slug(),
                comments_url: faker.lorem.slug(),
                commits_url: faker.lorem.slug(),
                compare_url: faker.lorem.slug(),
                contents_url: faker.lorem.slug(),
                contributors_url: faker.lorem.slug(),
                deployments_url: faker.lorem.slug(),
                downloads_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                forks_url: faker.lorem.slug(),
                git_commits_url: faker.lorem.slug(),
                git_refs_url: faker.lorem.slug(),
                git_tags_url: faker.lorem.slug(),
                git_url: faker.lorem.slug(),
                issue_comment_url: faker.lorem.slug(),
                issue_events_url: faker.lorem.slug(),
                issues_url: faker.lorem.slug(),
                keys_url: faker.lorem.slug(),
                labels_url: faker.lorem.slug(),
                languages_url: faker.lorem.slug(),
                merges_url: faker.lorem.slug(),
                milestones_url: faker.lorem.slug(),
                notifications_url: faker.lorem.slug(),
                pulls_url: faker.lorem.slug(),
                releases_url: faker.lorem.slug(),
                ssh_url: faker.lorem.slug(),
                stargazers_url: faker.lorem.slug(),
                statuses_url: faker.lorem.slug(),
                subscribers_url: faker.lorem.slug(),
                subscription_url: faker.lorem.slug(),
                tags_url: faker.lorem.slug(),
                teams_url: faker.lorem.slug(),
                trees_url: faker.lorem.slug(),
                clone_url: faker.lorem.slug(),
                mirror_url: faker.lorem.slug(),
                hooks_url: faker.lorem.slug(),
                svn_url: faker.lorem.slug(),
                homepage: faker.lorem.slug(),
                language: faker.lorem.slug(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(),
                pushed_at: faker.lorem.slug(),
                created_at: faker.lorem.slug(),
                updated_at: faker.lorem.slug(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(),
              starred_at: faker.lorem.slug(),
            },
            temp_clone_token: faker.lorem.slug(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              body: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              spdx_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          },
          head_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.internet.url(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              license: {
                key: faker.lorem.slug(),
                name: faker.lorem.slug(),
                url: faker.internet.url(),
                spdx_id: faker.lorem.slug(),
                node_id: faker.lorem.slug(),
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.date.recent(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                name: faker.lorem.slug(),
                full_name: faker.lorem.slug(),
                owner: {
                  login: faker.lorem.slug(),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(),
                  avatar_url: faker.lorem.slug(),
                  gravatar_id: faker.lorem.slug(),
                  url: faker.lorem.slug(),
                  html_url: faker.lorem.slug(),
                  followers_url: faker.lorem.slug(),
                  following_url: faker.lorem.slug(),
                  gists_url: faker.lorem.slug(),
                  starred_url: faker.lorem.slug(),
                  subscriptions_url: faker.lorem.slug(),
                  organizations_url: faker.lorem.slug(),
                  repos_url: faker.lorem.slug(),
                  events_url: faker.lorem.slug(),
                  received_events_url: faker.lorem.slug(),
                  type: faker.lorem.slug(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.lorem.slug(),
                description: faker.lorem.slug(),
                fork: faker.datatype.boolean(),
                url: faker.lorem.slug(),
                archive_url: faker.lorem.slug(),
                assignees_url: faker.lorem.slug(),
                blobs_url: faker.lorem.slug(),
                branches_url: faker.lorem.slug(),
                collaborators_url: faker.lorem.slug(),
                comments_url: faker.lorem.slug(),
                commits_url: faker.lorem.slug(),
                compare_url: faker.lorem.slug(),
                contents_url: faker.lorem.slug(),
                contributors_url: faker.lorem.slug(),
                deployments_url: faker.lorem.slug(),
                downloads_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                forks_url: faker.lorem.slug(),
                git_commits_url: faker.lorem.slug(),
                git_refs_url: faker.lorem.slug(),
                git_tags_url: faker.lorem.slug(),
                git_url: faker.lorem.slug(),
                issue_comment_url: faker.lorem.slug(),
                issue_events_url: faker.lorem.slug(),
                issues_url: faker.lorem.slug(),
                keys_url: faker.lorem.slug(),
                labels_url: faker.lorem.slug(),
                languages_url: faker.lorem.slug(),
                merges_url: faker.lorem.slug(),
                milestones_url: faker.lorem.slug(),
                notifications_url: faker.lorem.slug(),
                pulls_url: faker.lorem.slug(),
                releases_url: faker.lorem.slug(),
                ssh_url: faker.lorem.slug(),
                stargazers_url: faker.lorem.slug(),
                statuses_url: faker.lorem.slug(),
                subscribers_url: faker.lorem.slug(),
                subscription_url: faker.lorem.slug(),
                tags_url: faker.lorem.slug(),
                teams_url: faker.lorem.slug(),
                trees_url: faker.lorem.slug(),
                clone_url: faker.lorem.slug(),
                mirror_url: faker.lorem.slug(),
                hooks_url: faker.lorem.slug(),
                svn_url: faker.lorem.slug(),
                homepage: faker.lorem.slug(),
                language: faker.lorem.slug(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(),
                pushed_at: faker.lorem.slug(),
                created_at: faker.lorem.slug(),
                updated_at: faker.lorem.slug(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(),
              starred_at: faker.lorem.slug(),
            },
            temp_clone_token: faker.lorem.slug(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              body: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              spdx_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          },
          head_repository_id: faker.datatype.number(),
        })),
      },
    },
  },
  '/repos/:owner/:repo/assignees': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        email: faker.lorem.slug(),
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        starred_at: faker.lorem.slug(),
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/assignees/:assignee': {
    get: {
      204: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/autolinks': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        key_prefix: faker.lorem.slug(),
        url_template: faker.lorem.slug(),
      })),
    },
    post: {
      201: {
        id: faker.datatype.number(),
        key_prefix: faker.lorem.slug(),
        url_template: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/autolinks/:autolinkId': {
    get: {
      200: {
        id: faker.datatype.number(),
        key_prefix: faker.lorem.slug(),
        url_template: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: {
      204: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/branches': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        commit: {
          sha: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        protected: faker.datatype.boolean(),
        protection: {
          url: faker.lorem.slug(),
          enabled: faker.datatype.boolean(),
          required_status_checks: {
            url: faker.lorem.slug(),
            enforcement_level: faker.lorem.slug(),
            contexts: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            contexts_url: faker.lorem.slug(),
            strict: faker.datatype.boolean(),
          },
          enforce_admins: {
            url: faker.internet.url(),
            enabled: faker.datatype.boolean(),
          },
          required_pull_request_reviews: {
            url: faker.internet.url(),
            dismissal_restrictions: {
              users: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              })),
              teams: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                name: faker.lorem.slug(),
                slug: faker.lorem.slug(),
                description: faker.lorem.slug(),
                privacy: faker.lorem.slug(),
                permission: faker.lorem.slug(),
                permissions: {
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  admin: faker.datatype.boolean(),
                },
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                members_url: faker.lorem.slug(),
                repositories_url: faker.internet.url(),
                parent: {
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(),
                  url: faker.internet.url(),
                  members_url: faker.lorem.slug(),
                  name: faker.lorem.slug(),
                  description: faker.lorem.slug(),
                  permission: faker.lorem.slug(),
                  privacy: faker.lorem.slug(),
                  html_url: faker.internet.url(),
                  repositories_url: faker.internet.url(),
                  slug: faker.lorem.slug(),
                  ldap_dn: faker.lorem.slug(),
                },
              })),
              url: faker.lorem.slug(),
              users_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
            },
            dismiss_stale_reviews: faker.datatype.boolean(),
            require_code_owner_reviews: faker.datatype.boolean(),
            required_approving_review_count: faker.datatype.number(),
          },
          restrictions: {
            url: faker.internet.url(),
            users_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            apps_url: faker.internet.url(),
            users: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            })),
            teams: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              name: faker.lorem.slug(),
              slug: faker.lorem.slug(),
              description: faker.lorem.slug(),
              privacy: faker.lorem.slug(),
              permission: faker.lorem.slug(),
              members_url: faker.lorem.slug(),
              repositories_url: faker.lorem.slug(),
              parent: faker.lorem.slug(),
            })),
            apps: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                hooks_url: faker.lorem.slug(),
                issues_url: faker.lorem.slug(),
                members_url: faker.lorem.slug(),
                public_members_url: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                description: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                issues: faker.lorem.slug(),
                single_file: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
            })),
          },
          required_linear_history: {
            enabled: faker.datatype.boolean(),
          },
          allow_force_pushes: {
            enabled: faker.datatype.boolean(),
          },
          allow_deletions: {
            enabled: faker.datatype.boolean(),
          },
          required_conversation_resolution: {
            enabled: faker.datatype.boolean(),
          },
          name: faker.lorem.slug(),
          protection_url: faker.lorem.slug(),
          required_signatures: {
            url: faker.internet.url(),
            enabled: faker.datatype.boolean(),
          },
        },
        protection_url: faker.internet.url(),
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/branches/:branch': {
    get: {
      200: {
        name: faker.lorem.slug(),
        commit: {
          url: faker.internet.url(),
          sha: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          html_url: faker.internet.url(),
          comments_url: faker.internet.url(),
          commit: {
            url: faker.internet.url(),
            author: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              date: faker.lorem.slug(),
            },
            committer: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              date: faker.lorem.slug(),
            },
            message: faker.lorem.slug(),
            comment_count: faker.datatype.number(),
            tree: {
              sha: faker.lorem.slug(),
              url: faker.internet.url(),
            },
            verification: {
              verified: faker.datatype.boolean(),
              reason: faker.lorem.slug(),
              payload: faker.lorem.slug(),
              signature: faker.lorem.slug(),
            },
          },
          author: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          committer: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          parents: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            sha: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
          })),
          stats: {
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
            total: faker.datatype.number(),
          },
          files: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            sha: faker.lorem.slug(),
            filename: faker.lorem.slug(),
            status: faker.random.arrayElement([
              'added',
              'removed',
              'modified',
              'renamed',
              'copied',
              'changed',
              'unchanged',
            ]),
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
            changes: faker.datatype.number(),
            blob_url: faker.internet.url(),
            raw_url: faker.internet.url(),
            contents_url: faker.internet.url(),
            patch: faker.lorem.slug(),
            previous_filename: faker.lorem.slug(),
          })),
        },
        _links: {
          html: faker.lorem.slug(),
          self: faker.internet.url(),
        },
        protected: faker.datatype.boolean(),
        protection: {
          url: faker.lorem.slug(),
          enabled: faker.datatype.boolean(),
          required_status_checks: {
            url: faker.lorem.slug(),
            enforcement_level: faker.lorem.slug(),
            contexts: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            contexts_url: faker.lorem.slug(),
            strict: faker.datatype.boolean(),
          },
          enforce_admins: {
            url: faker.internet.url(),
            enabled: faker.datatype.boolean(),
          },
          required_pull_request_reviews: {
            url: faker.internet.url(),
            dismissal_restrictions: {
              users: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              })),
              teams: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                name: faker.lorem.slug(),
                slug: faker.lorem.slug(),
                description: faker.lorem.slug(),
                privacy: faker.lorem.slug(),
                permission: faker.lorem.slug(),
                permissions: {
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  admin: faker.datatype.boolean(),
                },
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                members_url: faker.lorem.slug(),
                repositories_url: faker.internet.url(),
                parent: {
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(),
                  url: faker.internet.url(),
                  members_url: faker.lorem.slug(),
                  name: faker.lorem.slug(),
                  description: faker.lorem.slug(),
                  permission: faker.lorem.slug(),
                  privacy: faker.lorem.slug(),
                  html_url: faker.internet.url(),
                  repositories_url: faker.internet.url(),
                  slug: faker.lorem.slug(),
                  ldap_dn: faker.lorem.slug(),
                },
              })),
              url: faker.lorem.slug(),
              users_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
            },
            dismiss_stale_reviews: faker.datatype.boolean(),
            require_code_owner_reviews: faker.datatype.boolean(),
            required_approving_review_count: faker.datatype.number(),
          },
          restrictions: {
            url: faker.internet.url(),
            users_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            apps_url: faker.internet.url(),
            users: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            })),
            teams: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              name: faker.lorem.slug(),
              slug: faker.lorem.slug(),
              description: faker.lorem.slug(),
              privacy: faker.lorem.slug(),
              permission: faker.lorem.slug(),
              members_url: faker.lorem.slug(),
              repositories_url: faker.lorem.slug(),
              parent: faker.lorem.slug(),
            })),
            apps: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                hooks_url: faker.lorem.slug(),
                issues_url: faker.lorem.slug(),
                members_url: faker.lorem.slug(),
                public_members_url: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                description: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                issues: faker.lorem.slug(),
                single_file: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
            })),
          },
          required_linear_history: {
            enabled: faker.datatype.boolean(),
          },
          allow_force_pushes: {
            enabled: faker.datatype.boolean(),
          },
          allow_deletions: {
            enabled: faker.datatype.boolean(),
          },
          required_conversation_resolution: {
            enabled: faker.datatype.boolean(),
          },
          name: faker.lorem.slug(),
          protection_url: faker.lorem.slug(),
          required_signatures: {
            url: faker.internet.url(),
            enabled: faker.datatype.boolean(),
          },
        },
        protection_url: faker.internet.url(),
        pattern: faker.lorem.slug(),
        required_approving_review_count: faker.datatype.number(),
      },
      301: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      415: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/branches/:branch/protection': {
    get: {
      200: {
        url: faker.lorem.slug(),
        enabled: faker.datatype.boolean(),
        required_status_checks: {
          url: faker.lorem.slug(),
          enforcement_level: faker.lorem.slug(),
          contexts: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          contexts_url: faker.lorem.slug(),
          strict: faker.datatype.boolean(),
        },
        enforce_admins: {
          url: faker.internet.url(),
          enabled: faker.datatype.boolean(),
        },
        required_pull_request_reviews: {
          url: faker.internet.url(),
          dismissal_restrictions: {
            users: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            })),
            teams: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              slug: faker.lorem.slug(),
              description: faker.lorem.slug(),
              privacy: faker.lorem.slug(),
              permission: faker.lorem.slug(),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              members_url: faker.lorem.slug(),
              repositories_url: faker.internet.url(),
              parent: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                url: faker.internet.url(),
                members_url: faker.lorem.slug(),
                name: faker.lorem.slug(),
                description: faker.lorem.slug(),
                permission: faker.lorem.slug(),
                privacy: faker.lorem.slug(),
                html_url: faker.internet.url(),
                repositories_url: faker.internet.url(),
                slug: faker.lorem.slug(),
                ldap_dn: faker.lorem.slug(),
              },
            })),
            url: faker.lorem.slug(),
            users_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
          },
          dismiss_stale_reviews: faker.datatype.boolean(),
          require_code_owner_reviews: faker.datatype.boolean(),
          required_approving_review_count: faker.datatype.number(),
        },
        restrictions: {
          url: faker.internet.url(),
          users_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          apps_url: faker.internet.url(),
          users: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.lorem.slug(),
            gravatar_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            followers_url: faker.lorem.slug(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.lorem.slug(),
            organizations_url: faker.lorem.slug(),
            repos_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.lorem.slug(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
          })),
          teams: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            name: faker.lorem.slug(),
            slug: faker.lorem.slug(),
            description: faker.lorem.slug(),
            privacy: faker.lorem.slug(),
            permission: faker.lorem.slug(),
            members_url: faker.lorem.slug(),
            repositories_url: faker.lorem.slug(),
            parent: faker.lorem.slug(),
          })),
          apps: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            slug: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              members_url: faker.lorem.slug(),
              public_members_url: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            name: faker.lorem.slug(),
            description: faker.lorem.slug(),
            external_url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              metadata: faker.lorem.slug(),
              contents: faker.lorem.slug(),
              issues: faker.lorem.slug(),
              single_file: faker.lorem.slug(),
            },
            events: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
          })),
        },
        required_linear_history: {
          enabled: faker.datatype.boolean(),
        },
        allow_force_pushes: {
          enabled: faker.datatype.boolean(),
        },
        allow_deletions: {
          enabled: faker.datatype.boolean(),
        },
        required_conversation_resolution: {
          enabled: faker.datatype.boolean(),
        },
        name: faker.lorem.slug(),
        protection_url: faker.lorem.slug(),
        required_signatures: {
          url: faker.internet.url(),
          enabled: faker.datatype.boolean(),
        },
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    put: {
      200: {
        url: faker.internet.url(),
        required_status_checks: {
          url: faker.internet.url(),
          strict: faker.datatype.boolean(),
          contexts: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          contexts_url: faker.internet.url(),
        },
        required_pull_request_reviews: {
          url: faker.internet.url(),
          dismiss_stale_reviews: faker.datatype.boolean(),
          require_code_owner_reviews: faker.datatype.boolean(),
          required_approving_review_count: faker.datatype.number(),
          dismissal_restrictions: {
            url: faker.internet.url(),
            users_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            users: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            })),
            teams: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              slug: faker.lorem.slug(),
              description: faker.lorem.slug(),
              privacy: faker.lorem.slug(),
              permission: faker.lorem.slug(),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              members_url: faker.lorem.slug(),
              repositories_url: faker.internet.url(),
              parent: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                url: faker.internet.url(),
                members_url: faker.lorem.slug(),
                name: faker.lorem.slug(),
                description: faker.lorem.slug(),
                permission: faker.lorem.slug(),
                privacy: faker.lorem.slug(),
                html_url: faker.internet.url(),
                repositories_url: faker.internet.url(),
                slug: faker.lorem.slug(),
                ldap_dn: faker.lorem.slug(),
              },
            })),
          },
        },
        required_signatures: {
          url: faker.internet.url(),
          enabled: faker.datatype.boolean(),
        },
        enforce_admins: {
          url: faker.internet.url(),
          enabled: faker.datatype.boolean(),
        },
        required_linear_history: {
          enabled: faker.datatype.boolean(),
        },
        allow_force_pushes: {
          enabled: faker.datatype.boolean(),
        },
        allow_deletions: {
          enabled: faker.datatype.boolean(),
        },
        restrictions: {
          url: faker.internet.url(),
          users_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          apps_url: faker.internet.url(),
          users: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.lorem.slug(),
            gravatar_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            followers_url: faker.lorem.slug(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.lorem.slug(),
            organizations_url: faker.lorem.slug(),
            repos_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.lorem.slug(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
          })),
          teams: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            name: faker.lorem.slug(),
            slug: faker.lorem.slug(),
            description: faker.lorem.slug(),
            privacy: faker.lorem.slug(),
            permission: faker.lorem.slug(),
            members_url: faker.lorem.slug(),
            repositories_url: faker.lorem.slug(),
            parent: faker.lorem.slug(),
          })),
          apps: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            slug: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              members_url: faker.lorem.slug(),
              public_members_url: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            name: faker.lorem.slug(),
            description: faker.lorem.slug(),
            external_url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              metadata: faker.lorem.slug(),
              contents: faker.lorem.slug(),
              issues: faker.lorem.slug(),
              single_file: faker.lorem.slug(),
            },
            events: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
          })),
        },
        required_conversation_resolution: {
          enabled: faker.datatype.boolean(),
        },
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
    delete: {
      204: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/branches/:branch/protection/enforce_admins': {
    get: {
      200: {
        url: faker.internet.url(),
        enabled: faker.datatype.boolean(),
      },
    },
    post: {
      200: {
        url: faker.internet.url(),
        enabled: faker.datatype.boolean(),
      },
    },
    delete: {
      204: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/branches/:branch/protection/required_pull_request_reviews':
    {
      get: {
        200: {
          url: faker.internet.url(),
          dismissal_restrictions: {
            users: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            })),
            teams: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              slug: faker.lorem.slug(),
              description: faker.lorem.slug(),
              privacy: faker.lorem.slug(),
              permission: faker.lorem.slug(),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              members_url: faker.lorem.slug(),
              repositories_url: faker.internet.url(),
              parent: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                url: faker.internet.url(),
                members_url: faker.lorem.slug(),
                name: faker.lorem.slug(),
                description: faker.lorem.slug(),
                permission: faker.lorem.slug(),
                privacy: faker.lorem.slug(),
                html_url: faker.internet.url(),
                repositories_url: faker.internet.url(),
                slug: faker.lorem.slug(),
                ldap_dn: faker.lorem.slug(),
              },
            })),
            url: faker.lorem.slug(),
            users_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
          },
          dismiss_stale_reviews: faker.datatype.boolean(),
          require_code_owner_reviews: faker.datatype.boolean(),
          required_approving_review_count: faker.datatype.number(),
        },
      },
      patch: {
        200: {
          url: faker.internet.url(),
          dismissal_restrictions: {
            users: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            })),
            teams: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              slug: faker.lorem.slug(),
              description: faker.lorem.slug(),
              privacy: faker.lorem.slug(),
              permission: faker.lorem.slug(),
              permissions: {
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                admin: faker.datatype.boolean(),
              },
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              members_url: faker.lorem.slug(),
              repositories_url: faker.internet.url(),
              parent: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                url: faker.internet.url(),
                members_url: faker.lorem.slug(),
                name: faker.lorem.slug(),
                description: faker.lorem.slug(),
                permission: faker.lorem.slug(),
                privacy: faker.lorem.slug(),
                html_url: faker.internet.url(),
                repositories_url: faker.internet.url(),
                slug: faker.lorem.slug(),
                ldap_dn: faker.lorem.slug(),
              },
            })),
            url: faker.lorem.slug(),
            users_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
          },
          dismiss_stale_reviews: faker.datatype.boolean(),
          require_code_owner_reviews: faker.datatype.boolean(),
          required_approving_review_count: faker.datatype.number(),
        },
        422: {
          message: faker.lorem.slug(),
          documentation_url: faker.lorem.slug(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(),
            field: faker.lorem.slug(),
            message: faker.lorem.slug(),
            code: faker.lorem.slug(),
            index: faker.datatype.number(),
            value: null,
          })),
        },
      },
      delete: {
        204: null,
        404: {
          message: faker.lorem.slug(),
          documentation_url: faker.lorem.slug(),
          url: faker.lorem.slug(),
          status: faker.lorem.slug(),
        },
      },
    },
  '/repos/:owner/:repo/branches/:branch/protection/required_signatures': {
    get: {
      200: {
        url: faker.internet.url(),
        enabled: faker.datatype.boolean(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      200: {
        url: faker.internet.url(),
        enabled: faker.datatype.boolean(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: {
      204: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/branches/:branch/protection/required_status_checks': {
    get: {
      200: {
        url: faker.internet.url(),
        strict: faker.datatype.boolean(),
        contexts: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        contexts_url: faker.internet.url(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        url: faker.internet.url(),
        strict: faker.datatype.boolean(),
        contexts: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        contexts_url: faker.internet.url(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: { 204: null },
  },
  '/repos/:owner/:repo/branches/:branch/protection/required_status_checks/contexts':
    {
      get: {
        200: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        404: {
          message: faker.lorem.slug(),
          documentation_url: faker.lorem.slug(),
          url: faker.lorem.slug(),
          status: faker.lorem.slug(),
        },
      },
      post: {
        200: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        403: {
          message: faker.lorem.slug(),
          documentation_url: faker.lorem.slug(),
          url: faker.lorem.slug(),
          status: faker.lorem.slug(),
        },
        404: {
          message: faker.lorem.slug(),
          documentation_url: faker.lorem.slug(),
          url: faker.lorem.slug(),
          status: faker.lorem.slug(),
        },
        422: {
          message: faker.lorem.slug(),
          documentation_url: faker.lorem.slug(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(),
            field: faker.lorem.slug(),
            message: faker.lorem.slug(),
            code: faker.lorem.slug(),
            index: faker.datatype.number(),
            value: null,
          })),
        },
      },
      put: {
        200: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        404: {
          message: faker.lorem.slug(),
          documentation_url: faker.lorem.slug(),
          url: faker.lorem.slug(),
          status: faker.lorem.slug(),
        },
        422: {
          message: faker.lorem.slug(),
          documentation_url: faker.lorem.slug(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(),
            field: faker.lorem.slug(),
            message: faker.lorem.slug(),
            code: faker.lorem.slug(),
            index: faker.datatype.number(),
            value: null,
          })),
        },
      },
      delete: {
        200: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        404: {
          message: faker.lorem.slug(),
          documentation_url: faker.lorem.slug(),
          url: faker.lorem.slug(),
          status: faker.lorem.slug(),
        },
        422: {
          message: faker.lorem.slug(),
          documentation_url: faker.lorem.slug(),
          errors: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            resource: faker.lorem.slug(),
            field: faker.lorem.slug(),
            message: faker.lorem.slug(),
            code: faker.lorem.slug(),
            index: faker.datatype.number(),
            value: null,
          })),
        },
      },
    },
  '/repos/:owner/:repo/branches/:branch/protection/restrictions': {
    get: {
      200: {
        url: faker.internet.url(),
        users_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        apps_url: faker.internet.url(),
        users: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.lorem.slug(),
          gravatar_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          followers_url: faker.lorem.slug(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.lorem.slug(),
          organizations_url: faker.lorem.slug(),
          repos_url: faker.lorem.slug(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.lorem.slug(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
        })),
        teams: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          slug: faker.lorem.slug(),
          description: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          members_url: faker.lorem.slug(),
          repositories_url: faker.lorem.slug(),
          parent: faker.lorem.slug(),
        })),
        apps: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            repos_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            members_url: faker.lorem.slug(),
            public_members_url: faker.lorem.slug(),
            avatar_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            gravatar_id: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            followers_url: faker.lorem.slug(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.lorem.slug(),
            organizations_url: faker.lorem.slug(),
            received_events_url: faker.lorem.slug(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          created_at: faker.lorem.slug(),
          updated_at: faker.lorem.slug(),
          permissions: {
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            issues: faker.lorem.slug(),
            single_file: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
        })),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: { 204: null },
  },
  '/repos/:owner/:repo/branches/:branch/protection/restrictions/apps': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        slug: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        name: faker.lorem.slug(),
        description: faker.lorem.slug(),
        external_url: faker.internet.url(),
        html_url: faker.internet.url(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        permissions: {
          issues: faker.lorem.slug(),
          checks: faker.lorem.slug(),
          metadata: faker.lorem.slug(),
          contents: faker.lorem.slug(),
          deployments: faker.lorem.slug(),
        },
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        installations_count: faker.datatype.number(),
        client_id: faker.lorem.slug(),
        client_secret: faker.lorem.slug(),
        webhook_secret: faker.lorem.slug(),
        pem: faker.lorem.slug(),
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        slug: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        name: faker.lorem.slug(),
        description: faker.lorem.slug(),
        external_url: faker.internet.url(),
        html_url: faker.internet.url(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        permissions: {
          issues: faker.lorem.slug(),
          checks: faker.lorem.slug(),
          metadata: faker.lorem.slug(),
          contents: faker.lorem.slug(),
          deployments: faker.lorem.slug(),
        },
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        installations_count: faker.datatype.number(),
        client_id: faker.lorem.slug(),
        client_secret: faker.lorem.slug(),
        webhook_secret: faker.lorem.slug(),
        pem: faker.lorem.slug(),
      })),
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    put: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        slug: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        name: faker.lorem.slug(),
        description: faker.lorem.slug(),
        external_url: faker.internet.url(),
        html_url: faker.internet.url(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        permissions: {
          issues: faker.lorem.slug(),
          checks: faker.lorem.slug(),
          metadata: faker.lorem.slug(),
          contents: faker.lorem.slug(),
          deployments: faker.lorem.slug(),
        },
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        installations_count: faker.datatype.number(),
        client_id: faker.lorem.slug(),
        client_secret: faker.lorem.slug(),
        webhook_secret: faker.lorem.slug(),
        pem: faker.lorem.slug(),
      })),
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        slug: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        name: faker.lorem.slug(),
        description: faker.lorem.slug(),
        external_url: faker.internet.url(),
        html_url: faker.internet.url(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        permissions: {
          issues: faker.lorem.slug(),
          checks: faker.lorem.slug(),
          metadata: faker.lorem.slug(),
          contents: faker.lorem.slug(),
          deployments: faker.lorem.slug(),
        },
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        installations_count: faker.datatype.number(),
        client_id: faker.lorem.slug(),
        client_secret: faker.lorem.slug(),
        webhook_secret: faker.lorem.slug(),
        pem: faker.lorem.slug(),
      })),
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/branches/:branch/protection/restrictions/teams': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        slug: faker.lorem.slug(),
        description: faker.lorem.slug(),
        privacy: faker.lorem.slug(),
        permission: faker.lorem.slug(),
        permissions: {
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          admin: faker.datatype.boolean(),
        },
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        members_url: faker.lorem.slug(),
        repositories_url: faker.internet.url(),
        parent: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          html_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          slug: faker.lorem.slug(),
          ldap_dn: faker.lorem.slug(),
        },
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        slug: faker.lorem.slug(),
        description: faker.lorem.slug(),
        privacy: faker.lorem.slug(),
        permission: faker.lorem.slug(),
        permissions: {
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          admin: faker.datatype.boolean(),
        },
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        members_url: faker.lorem.slug(),
        repositories_url: faker.internet.url(),
        parent: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          html_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          slug: faker.lorem.slug(),
          ldap_dn: faker.lorem.slug(),
        },
      })),
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    put: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        slug: faker.lorem.slug(),
        description: faker.lorem.slug(),
        privacy: faker.lorem.slug(),
        permission: faker.lorem.slug(),
        permissions: {
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          admin: faker.datatype.boolean(),
        },
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        members_url: faker.lorem.slug(),
        repositories_url: faker.internet.url(),
        parent: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          html_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          slug: faker.lorem.slug(),
          ldap_dn: faker.lorem.slug(),
        },
      })),
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        slug: faker.lorem.slug(),
        description: faker.lorem.slug(),
        privacy: faker.lorem.slug(),
        permission: faker.lorem.slug(),
        permissions: {
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          admin: faker.datatype.boolean(),
        },
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        members_url: faker.lorem.slug(),
        repositories_url: faker.internet.url(),
        parent: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          html_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          slug: faker.lorem.slug(),
          ldap_dn: faker.lorem.slug(),
        },
      })),
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/branches/:branch/protection/restrictions/users': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        email: faker.lorem.slug(),
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        starred_at: faker.lorem.slug(),
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        email: faker.lorem.slug(),
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        starred_at: faker.lorem.slug(),
      })),
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    put: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        email: faker.lorem.slug(),
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        starred_at: faker.lorem.slug(),
      })),
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        email: faker.lorem.slug(),
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        starred_at: faker.lorem.slug(),
      })),
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/branches/:branch/rename': {
    post: {
      201: {
        name: faker.lorem.slug(),
        commit: {
          url: faker.internet.url(),
          sha: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          html_url: faker.internet.url(),
          comments_url: faker.internet.url(),
          commit: {
            url: faker.internet.url(),
            author: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              date: faker.lorem.slug(),
            },
            committer: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              date: faker.lorem.slug(),
            },
            message: faker.lorem.slug(),
            comment_count: faker.datatype.number(),
            tree: {
              sha: faker.lorem.slug(),
              url: faker.internet.url(),
            },
            verification: {
              verified: faker.datatype.boolean(),
              reason: faker.lorem.slug(),
              payload: faker.lorem.slug(),
              signature: faker.lorem.slug(),
            },
          },
          author: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          committer: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          parents: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            sha: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
          })),
          stats: {
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
            total: faker.datatype.number(),
          },
          files: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            sha: faker.lorem.slug(),
            filename: faker.lorem.slug(),
            status: faker.random.arrayElement([
              'added',
              'removed',
              'modified',
              'renamed',
              'copied',
              'changed',
              'unchanged',
            ]),
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
            changes: faker.datatype.number(),
            blob_url: faker.internet.url(),
            raw_url: faker.internet.url(),
            contents_url: faker.internet.url(),
            patch: faker.lorem.slug(),
            previous_filename: faker.lorem.slug(),
          })),
        },
        _links: {
          html: faker.lorem.slug(),
          self: faker.internet.url(),
        },
        protected: faker.datatype.boolean(),
        protection: {
          url: faker.lorem.slug(),
          enabled: faker.datatype.boolean(),
          required_status_checks: {
            url: faker.lorem.slug(),
            enforcement_level: faker.lorem.slug(),
            contexts: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            contexts_url: faker.lorem.slug(),
            strict: faker.datatype.boolean(),
          },
          enforce_admins: {
            url: faker.internet.url(),
            enabled: faker.datatype.boolean(),
          },
          required_pull_request_reviews: {
            url: faker.internet.url(),
            dismissal_restrictions: {
              users: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              })),
              teams: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => ({
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                name: faker.lorem.slug(),
                slug: faker.lorem.slug(),
                description: faker.lorem.slug(),
                privacy: faker.lorem.slug(),
                permission: faker.lorem.slug(),
                permissions: {
                  pull: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  admin: faker.datatype.boolean(),
                },
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                members_url: faker.lorem.slug(),
                repositories_url: faker.internet.url(),
                parent: {
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(),
                  url: faker.internet.url(),
                  members_url: faker.lorem.slug(),
                  name: faker.lorem.slug(),
                  description: faker.lorem.slug(),
                  permission: faker.lorem.slug(),
                  privacy: faker.lorem.slug(),
                  html_url: faker.internet.url(),
                  repositories_url: faker.internet.url(),
                  slug: faker.lorem.slug(),
                  ldap_dn: faker.lorem.slug(),
                },
              })),
              url: faker.lorem.slug(),
              users_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
            },
            dismiss_stale_reviews: faker.datatype.boolean(),
            require_code_owner_reviews: faker.datatype.boolean(),
            required_approving_review_count: faker.datatype.number(),
          },
          restrictions: {
            url: faker.internet.url(),
            users_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            apps_url: faker.internet.url(),
            users: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            })),
            teams: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              name: faker.lorem.slug(),
              slug: faker.lorem.slug(),
              description: faker.lorem.slug(),
              privacy: faker.lorem.slug(),
              permission: faker.lorem.slug(),
              members_url: faker.lorem.slug(),
              repositories_url: faker.lorem.slug(),
              parent: faker.lorem.slug(),
            })),
            apps: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                hooks_url: faker.lorem.slug(),
                issues_url: faker.lorem.slug(),
                members_url: faker.lorem.slug(),
                public_members_url: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                description: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                issues: faker.lorem.slug(),
                single_file: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
            })),
          },
          required_linear_history: {
            enabled: faker.datatype.boolean(),
          },
          allow_force_pushes: {
            enabled: faker.datatype.boolean(),
          },
          allow_deletions: {
            enabled: faker.datatype.boolean(),
          },
          required_conversation_resolution: {
            enabled: faker.datatype.boolean(),
          },
          name: faker.lorem.slug(),
          protection_url: faker.lorem.slug(),
          required_signatures: {
            url: faker.internet.url(),
            enabled: faker.datatype.boolean(),
          },
        },
        protection_url: faker.internet.url(),
        pattern: faker.lorem.slug(),
        required_approving_review_count: faker.datatype.number(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/check-runs': {
    post: {
      201: {
        id: faker.datatype.number(),
        head_sha: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        external_id: faker.lorem.slug(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        details_url: faker.lorem.slug(),
        status: faker.random.arrayElement([
          'queued',
          'in_progress',
          'completed',
        ]),
        conclusion: faker.random.arrayElement([
          'success',
          'failure',
          'neutral',
          'cancelled',
          'skipped',
          'timed_out',
          'action_required',
        ]),
        started_at: faker.date.recent(),
        completed_at: faker.date.recent(),
        output: {
          title: faker.lorem.slug(),
          summary: faker.lorem.slug(),
          text: faker.lorem.slug(),
          annotations_count: faker.datatype.number(),
          annotations_url: faker.internet.url(),
        },
        name: faker.lorem.slug(),
        check_suite: {
          id: faker.datatype.number(),
        },
        app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        pull_requests: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          number: faker.datatype.number(),
          url: faker.lorem.slug(),
          head: {
            ref: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            repo: {
              id: faker.datatype.number(),
              url: faker.lorem.slug(),
              name: faker.lorem.slug(),
            },
          },
          base: {
            ref: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            repo: {
              id: faker.datatype.number(),
              url: faker.lorem.slug(),
              name: faker.lorem.slug(),
            },
          },
        })),
        deployment: {
          url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          task: faker.lorem.slug(),
          original_environment: faker.lorem.slug(),
          environment: faker.lorem.slug(),
          description: faker.lorem.slug(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          statuses_url: faker.internet.url(),
          repository_url: faker.internet.url(),
          transient_environment: faker.datatype.boolean(),
          production_environment: faker.datatype.boolean(),
          performed_via_github_app: {
            id: faker.datatype.number(),
            slug: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            name: faker.lorem.slug(),
            description: faker.lorem.slug(),
            external_url: faker.internet.url(),
            html_url: faker.internet.url(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            permissions: {
              issues: faker.lorem.slug(),
              checks: faker.lorem.slug(),
              metadata: faker.lorem.slug(),
              contents: faker.lorem.slug(),
              deployments: faker.lorem.slug(),
            },
            events: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            installations_count: faker.datatype.number(),
            client_id: faker.lorem.slug(),
            client_secret: faker.lorem.slug(),
            webhook_secret: faker.lorem.slug(),
            pem: faker.lorem.slug(),
          },
        },
      },
    },
  },
  '/repos/:owner/:repo/check-runs/:checkRunId': {
    get: {
      200: {
        id: faker.datatype.number(),
        head_sha: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        external_id: faker.lorem.slug(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        details_url: faker.lorem.slug(),
        status: faker.random.arrayElement([
          'queued',
          'in_progress',
          'completed',
        ]),
        conclusion: faker.random.arrayElement([
          'success',
          'failure',
          'neutral',
          'cancelled',
          'skipped',
          'timed_out',
          'action_required',
        ]),
        started_at: faker.date.recent(),
        completed_at: faker.date.recent(),
        output: {
          title: faker.lorem.slug(),
          summary: faker.lorem.slug(),
          text: faker.lorem.slug(),
          annotations_count: faker.datatype.number(),
          annotations_url: faker.internet.url(),
        },
        name: faker.lorem.slug(),
        check_suite: {
          id: faker.datatype.number(),
        },
        app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        pull_requests: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          number: faker.datatype.number(),
          url: faker.lorem.slug(),
          head: {
            ref: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            repo: {
              id: faker.datatype.number(),
              url: faker.lorem.slug(),
              name: faker.lorem.slug(),
            },
          },
          base: {
            ref: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            repo: {
              id: faker.datatype.number(),
              url: faker.lorem.slug(),
              name: faker.lorem.slug(),
            },
          },
        })),
        deployment: {
          url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          task: faker.lorem.slug(),
          original_environment: faker.lorem.slug(),
          environment: faker.lorem.slug(),
          description: faker.lorem.slug(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          statuses_url: faker.internet.url(),
          repository_url: faker.internet.url(),
          transient_environment: faker.datatype.boolean(),
          production_environment: faker.datatype.boolean(),
          performed_via_github_app: {
            id: faker.datatype.number(),
            slug: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            name: faker.lorem.slug(),
            description: faker.lorem.slug(),
            external_url: faker.internet.url(),
            html_url: faker.internet.url(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            permissions: {
              issues: faker.lorem.slug(),
              checks: faker.lorem.slug(),
              metadata: faker.lorem.slug(),
              contents: faker.lorem.slug(),
              deployments: faker.lorem.slug(),
            },
            events: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            installations_count: faker.datatype.number(),
            client_id: faker.lorem.slug(),
            client_secret: faker.lorem.slug(),
            webhook_secret: faker.lorem.slug(),
            pem: faker.lorem.slug(),
          },
        },
      },
    },
    patch: {
      200: {
        id: faker.datatype.number(),
        head_sha: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        external_id: faker.lorem.slug(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        details_url: faker.lorem.slug(),
        status: faker.random.arrayElement([
          'queued',
          'in_progress',
          'completed',
        ]),
        conclusion: faker.random.arrayElement([
          'success',
          'failure',
          'neutral',
          'cancelled',
          'skipped',
          'timed_out',
          'action_required',
        ]),
        started_at: faker.date.recent(),
        completed_at: faker.date.recent(),
        output: {
          title: faker.lorem.slug(),
          summary: faker.lorem.slug(),
          text: faker.lorem.slug(),
          annotations_count: faker.datatype.number(),
          annotations_url: faker.internet.url(),
        },
        name: faker.lorem.slug(),
        check_suite: {
          id: faker.datatype.number(),
        },
        app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        pull_requests: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          number: faker.datatype.number(),
          url: faker.lorem.slug(),
          head: {
            ref: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            repo: {
              id: faker.datatype.number(),
              url: faker.lorem.slug(),
              name: faker.lorem.slug(),
            },
          },
          base: {
            ref: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            repo: {
              id: faker.datatype.number(),
              url: faker.lorem.slug(),
              name: faker.lorem.slug(),
            },
          },
        })),
        deployment: {
          url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          task: faker.lorem.slug(),
          original_environment: faker.lorem.slug(),
          environment: faker.lorem.slug(),
          description: faker.lorem.slug(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          statuses_url: faker.internet.url(),
          repository_url: faker.internet.url(),
          transient_environment: faker.datatype.boolean(),
          production_environment: faker.datatype.boolean(),
          performed_via_github_app: {
            id: faker.datatype.number(),
            slug: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            name: faker.lorem.slug(),
            description: faker.lorem.slug(),
            external_url: faker.internet.url(),
            html_url: faker.internet.url(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            permissions: {
              issues: faker.lorem.slug(),
              checks: faker.lorem.slug(),
              metadata: faker.lorem.slug(),
              contents: faker.lorem.slug(),
              deployments: faker.lorem.slug(),
            },
            events: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            installations_count: faker.datatype.number(),
            client_id: faker.lorem.slug(),
            client_secret: faker.lorem.slug(),
            webhook_secret: faker.lorem.slug(),
            pem: faker.lorem.slug(),
          },
        },
      },
    },
  },
  '/repos/:owner/:repo/check-runs/:checkRunId/annotations': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        path: faker.lorem.slug(),
        start_line: faker.datatype.number(),
        end_line: faker.datatype.number(),
        start_column: faker.datatype.number(),
        end_column: faker.datatype.number(),
        annotation_level: faker.lorem.slug(),
        title: faker.lorem.slug(),
        message: faker.lorem.slug(),
        raw_details: faker.lorem.slug(),
        blob_href: faker.lorem.slug(),
      })),
    },
  },
  '/repos/:owner/:repo/check-runs/:checkRunId/rerequest': {
    post: {
      201: {},
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/check-suites': {
    post: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        head_branch: faker.lorem.slug(),
        head_sha: faker.lorem.slug(),
        status: faker.random.arrayElement([
          'queued',
          'in_progress',
          'completed',
        ]),
        conclusion: faker.random.arrayElement([
          'success',
          'failure',
          'neutral',
          'cancelled',
          'skipped',
          'timed_out',
          'action_required',
        ]),
        url: faker.lorem.slug(),
        before: faker.lorem.slug(),
        after: faker.lorem.slug(),
        pull_requests: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          number: faker.datatype.number(),
          url: faker.lorem.slug(),
          head: {
            ref: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            repo: {
              id: faker.datatype.number(),
              url: faker.lorem.slug(),
              name: faker.lorem.slug(),
            },
          },
          base: {
            ref: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            repo: {
              id: faker.datatype.number(),
              url: faker.lorem.slug(),
              name: faker.lorem.slug(),
            },
          },
        })),
        app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.internet.url(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          temp_clone_token: faker.lorem.slug(),
          delete_branch_on_merge: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          code_of_conduct: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            spdx_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          allow_forking: faker.datatype.boolean(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        head_commit: {
          id: faker.lorem.slug(),
          tree_id: faker.lorem.slug(),
          message: faker.lorem.slug(),
          timestamp: faker.date.recent(),
          author: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
          },
          committer: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
          },
        },
        latest_check_runs_count: faker.datatype.number(),
        check_runs_url: faker.lorem.slug(),
        rerequestable: faker.datatype.boolean(),
        runs_rerequestable: faker.datatype.boolean(),
      },
      201: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        head_branch: faker.lorem.slug(),
        head_sha: faker.lorem.slug(),
        status: faker.random.arrayElement([
          'queued',
          'in_progress',
          'completed',
        ]),
        conclusion: faker.random.arrayElement([
          'success',
          'failure',
          'neutral',
          'cancelled',
          'skipped',
          'timed_out',
          'action_required',
        ]),
        url: faker.lorem.slug(),
        before: faker.lorem.slug(),
        after: faker.lorem.slug(),
        pull_requests: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          number: faker.datatype.number(),
          url: faker.lorem.slug(),
          head: {
            ref: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            repo: {
              id: faker.datatype.number(),
              url: faker.lorem.slug(),
              name: faker.lorem.slug(),
            },
          },
          base: {
            ref: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            repo: {
              id: faker.datatype.number(),
              url: faker.lorem.slug(),
              name: faker.lorem.slug(),
            },
          },
        })),
        app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.internet.url(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          temp_clone_token: faker.lorem.slug(),
          delete_branch_on_merge: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          code_of_conduct: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            spdx_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          allow_forking: faker.datatype.boolean(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        head_commit: {
          id: faker.lorem.slug(),
          tree_id: faker.lorem.slug(),
          message: faker.lorem.slug(),
          timestamp: faker.date.recent(),
          author: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
          },
          committer: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
          },
        },
        latest_check_runs_count: faker.datatype.number(),
        check_runs_url: faker.lorem.slug(),
        rerequestable: faker.datatype.boolean(),
        runs_rerequestable: faker.datatype.boolean(),
      },
    },
  },
  '/repos/:owner/:repo/check-suites/preferences': {
    patch: {
      200: {
        preferences: {
          auto_trigger_checks: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            app_id: faker.datatype.number(),
            setting: faker.datatype.boolean(),
          })),
        },
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.internet.url(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          temp_clone_token: faker.lorem.slug(),
          delete_branch_on_merge: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          code_of_conduct: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            spdx_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          allow_forking: faker.datatype.boolean(),
        },
      },
    },
  },
  '/repos/:owner/:repo/check-suites/:checkSuiteId': {
    get: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        head_branch: faker.lorem.slug(),
        head_sha: faker.lorem.slug(),
        status: faker.random.arrayElement([
          'queued',
          'in_progress',
          'completed',
        ]),
        conclusion: faker.random.arrayElement([
          'success',
          'failure',
          'neutral',
          'cancelled',
          'skipped',
          'timed_out',
          'action_required',
        ]),
        url: faker.lorem.slug(),
        before: faker.lorem.slug(),
        after: faker.lorem.slug(),
        pull_requests: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          number: faker.datatype.number(),
          url: faker.lorem.slug(),
          head: {
            ref: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            repo: {
              id: faker.datatype.number(),
              url: faker.lorem.slug(),
              name: faker.lorem.slug(),
            },
          },
          base: {
            ref: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            repo: {
              id: faker.datatype.number(),
              url: faker.lorem.slug(),
              name: faker.lorem.slug(),
            },
          },
        })),
        app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.internet.url(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          temp_clone_token: faker.lorem.slug(),
          delete_branch_on_merge: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          code_of_conduct: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            spdx_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          allow_forking: faker.datatype.boolean(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        head_commit: {
          id: faker.lorem.slug(),
          tree_id: faker.lorem.slug(),
          message: faker.lorem.slug(),
          timestamp: faker.date.recent(),
          author: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
          },
          committer: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
          },
        },
        latest_check_runs_count: faker.datatype.number(),
        check_runs_url: faker.lorem.slug(),
        rerequestable: faker.datatype.boolean(),
        runs_rerequestable: faker.datatype.boolean(),
      },
    },
  },
  '/repos/:owner/:repo/check-suites/:checkSuiteId/check-runs': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        check_runs: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          head_sha: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          external_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          details_url: faker.lorem.slug(),
          status: faker.random.arrayElement([
            'queued',
            'in_progress',
            'completed',
          ]),
          conclusion: faker.random.arrayElement([
            'success',
            'failure',
            'neutral',
            'cancelled',
            'skipped',
            'timed_out',
            'action_required',
          ]),
          started_at: faker.date.recent(),
          completed_at: faker.date.recent(),
          output: {
            title: faker.lorem.slug(),
            summary: faker.lorem.slug(),
            text: faker.lorem.slug(),
            annotations_count: faker.datatype.number(),
            annotations_url: faker.internet.url(),
          },
          name: faker.lorem.slug(),
          check_suite: {
            id: faker.datatype.number(),
          },
          app: {
            id: faker.datatype.number(),
            slug: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            name: faker.lorem.slug(),
            description: faker.lorem.slug(),
            external_url: faker.internet.url(),
            html_url: faker.internet.url(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            permissions: {
              issues: faker.lorem.slug(),
              checks: faker.lorem.slug(),
              metadata: faker.lorem.slug(),
              contents: faker.lorem.slug(),
              deployments: faker.lorem.slug(),
            },
            events: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            installations_count: faker.datatype.number(),
            client_id: faker.lorem.slug(),
            client_secret: faker.lorem.slug(),
            webhook_secret: faker.lorem.slug(),
            pem: faker.lorem.slug(),
          },
          pull_requests: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            number: faker.datatype.number(),
            url: faker.lorem.slug(),
            head: {
              ref: faker.lorem.slug(),
              sha: faker.lorem.slug(),
              repo: {
                id: faker.datatype.number(),
                url: faker.lorem.slug(),
                name: faker.lorem.slug(),
              },
            },
            base: {
              ref: faker.lorem.slug(),
              sha: faker.lorem.slug(),
              repo: {
                id: faker.datatype.number(),
                url: faker.lorem.slug(),
                name: faker.lorem.slug(),
              },
            },
          })),
          deployment: {
            url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            task: faker.lorem.slug(),
            original_environment: faker.lorem.slug(),
            environment: faker.lorem.slug(),
            description: faker.lorem.slug(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            statuses_url: faker.internet.url(),
            repository_url: faker.internet.url(),
            transient_environment: faker.datatype.boolean(),
            production_environment: faker.datatype.boolean(),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
          },
        })),
      },
    },
  },
  '/repos/:owner/:repo/check-suites/:checkSuiteId/rerequest': {
    post: { 201: {} },
  },
  '/repos/:owner/:repo/code-scanning/alerts': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        number: faker.datatype.number(),
        created_at: faker.date.recent(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        instances_url: faker.internet.url(),
        state: faker.random.arrayElement([
          'open',
          'closed',
          'dismissed',
          'fixed',
        ]),
        dismissed_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        dismissed_at: faker.date.recent(),
        dismissed_reason: faker.random.arrayElement([
          null,
          'false positive',
          "won't fix",
          'used in tests',
        ]),
        rule: {
          id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          severity: faker.random.arrayElement([
            'none',
            'note',
            'warning',
            'error',
          ]),
          description: faker.lorem.slug(),
        },
        tool: {
          name: faker.lorem.slug(),
          version: faker.lorem.slug(),
          guid: faker.lorem.slug(),
        },
        most_recent_instance: {
          ref: faker.lorem.slug(),
          analysis_key: faker.lorem.slug(),
          environment: faker.lorem.slug(),
          category: faker.lorem.slug(),
          state: faker.random.arrayElement([
            'open',
            'closed',
            'dismissed',
            'fixed',
          ]),
          commit_sha: faker.lorem.slug(),
          message: {
            text: faker.lorem.slug(),
          },
          location: {
            path: faker.lorem.slug(),
            start_line: faker.datatype.number(),
            end_line: faker.datatype.number(),
            start_column: faker.datatype.number(),
            end_column: faker.datatype.number(),
          },
          html_url: faker.lorem.slug(),
          classifications: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ =>
            faker.random.arrayElement([
              'source',
              'generated',
              'test',
              'library',
            ])
          ),
        },
      })),
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/code-scanning/alerts/:alertNumber': {
    get: {
      200: {
        number: faker.datatype.number(),
        created_at: faker.date.recent(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        instances_url: faker.internet.url(),
        state: faker.random.arrayElement([
          'open',
          'closed',
          'dismissed',
          'fixed',
        ]),
        dismissed_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        dismissed_at: faker.date.recent(),
        dismissed_reason: faker.random.arrayElement([
          null,
          'false positive',
          "won't fix",
          'used in tests',
        ]),
        rule: {
          id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          severity: faker.random.arrayElement([
            'none',
            'note',
            'warning',
            'error',
          ]),
          security_severity_level: faker.random.arrayElement([
            'low',
            'medium',
            'high',
            'critical',
          ]),
          description: faker.lorem.slug(),
          full_description: faker.lorem.slug(),
          tags: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          help: faker.lorem.slug(),
        },
        tool: {
          name: faker.lorem.slug(),
          version: faker.lorem.slug(),
          guid: faker.lorem.slug(),
        },
        most_recent_instance: {
          ref: faker.lorem.slug(),
          analysis_key: faker.lorem.slug(),
          environment: faker.lorem.slug(),
          category: faker.lorem.slug(),
          state: faker.random.arrayElement([
            'open',
            'closed',
            'dismissed',
            'fixed',
          ]),
          commit_sha: faker.lorem.slug(),
          message: {
            text: faker.lorem.slug(),
          },
          location: {
            path: faker.lorem.slug(),
            start_line: faker.datatype.number(),
            end_line: faker.datatype.number(),
            start_column: faker.datatype.number(),
            end_column: faker.datatype.number(),
          },
          html_url: faker.lorem.slug(),
          classifications: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ =>
            faker.random.arrayElement([
              'source',
              'generated',
              'test',
              'library',
            ])
          ),
        },
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        number: faker.datatype.number(),
        created_at: faker.date.recent(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        instances_url: faker.internet.url(),
        state: faker.random.arrayElement([
          'open',
          'closed',
          'dismissed',
          'fixed',
        ]),
        dismissed_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        dismissed_at: faker.date.recent(),
        dismissed_reason: faker.random.arrayElement([
          null,
          'false positive',
          "won't fix",
          'used in tests',
        ]),
        rule: {
          id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          severity: faker.random.arrayElement([
            'none',
            'note',
            'warning',
            'error',
          ]),
          security_severity_level: faker.random.arrayElement([
            'low',
            'medium',
            'high',
            'critical',
          ]),
          description: faker.lorem.slug(),
          full_description: faker.lorem.slug(),
          tags: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          help: faker.lorem.slug(),
        },
        tool: {
          name: faker.lorem.slug(),
          version: faker.lorem.slug(),
          guid: faker.lorem.slug(),
        },
        most_recent_instance: {
          ref: faker.lorem.slug(),
          analysis_key: faker.lorem.slug(),
          environment: faker.lorem.slug(),
          category: faker.lorem.slug(),
          state: faker.random.arrayElement([
            'open',
            'closed',
            'dismissed',
            'fixed',
          ]),
          commit_sha: faker.lorem.slug(),
          message: {
            text: faker.lorem.slug(),
          },
          location: {
            path: faker.lorem.slug(),
            start_line: faker.datatype.number(),
            end_line: faker.datatype.number(),
            start_column: faker.datatype.number(),
            end_column: faker.datatype.number(),
          },
          html_url: faker.lorem.slug(),
          classifications: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ =>
            faker.random.arrayElement([
              'source',
              'generated',
              'test',
              'library',
            ])
          ),
        },
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/code-scanning/alerts/:alertNumber/instances': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        ref: faker.lorem.slug(),
        analysis_key: faker.lorem.slug(),
        environment: faker.lorem.slug(),
        category: faker.lorem.slug(),
        state: faker.random.arrayElement([
          'open',
          'closed',
          'dismissed',
          'fixed',
        ]),
        commit_sha: faker.lorem.slug(),
        message: {
          text: faker.lorem.slug(),
        },
        location: {
          path: faker.lorem.slug(),
          start_line: faker.datatype.number(),
          end_line: faker.datatype.number(),
          start_column: faker.datatype.number(),
          end_column: faker.datatype.number(),
        },
        html_url: faker.lorem.slug(),
        classifications: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ =>
          faker.random.arrayElement(['source', 'generated', 'test', 'library'])
        ),
      })),
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/code-scanning/analyses': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        ref: faker.lorem.slug(),
        commit_sha: faker.lorem.slug(),
        analysis_key: faker.lorem.slug(),
        environment: faker.lorem.slug(),
        category: faker.lorem.slug(),
        error: faker.lorem.slug(),
        created_at: faker.date.recent(),
        results_count: faker.datatype.number(),
        rules_count: faker.datatype.number(),
        id: faker.datatype.number(),
        url: faker.internet.url(),
        sarif_id: faker.lorem.slug(),
        tool: {
          name: faker.lorem.slug(),
          version: faker.lorem.slug(),
          guid: faker.lorem.slug(),
        },
        deletable: faker.datatype.boolean(),
        warning: faker.lorem.slug(),
      })),
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/code-scanning/analyses/:analysisId': {
    get: {
      200: {
        ref: faker.lorem.slug(),
        commit_sha: faker.lorem.slug(),
        analysis_key: faker.lorem.slug(),
        environment: faker.lorem.slug(),
        category: faker.lorem.slug(),
        error: faker.lorem.slug(),
        created_at: faker.date.recent(),
        results_count: faker.datatype.number(),
        rules_count: faker.datatype.number(),
        id: faker.datatype.number(),
        url: faker.internet.url(),
        sarif_id: faker.lorem.slug(),
        tool: {
          name: faker.lorem.slug(),
          version: faker.lorem.slug(),
          guid: faker.lorem.slug(),
        },
        deletable: faker.datatype.boolean(),
        warning: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
    delete: {
      200: {
        next_analysis_url: faker.internet.url(),
        confirm_delete_url: faker.internet.url(),
      },
      400: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/code-scanning/sarifs': {
    post: {
      202: {
        id: faker.lorem.slug(),
        url: faker.internet.url(),
      },
      400: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      413: null,
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/code-scanning/sarifs/:sarifId': {
    get: {
      200: {
        processing_status: faker.random.arrayElement(['pending', 'complete']),
        analyses_url: faker.internet.url(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: null,
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/collaborators': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        email: faker.lorem.slug(),
        name: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        permissions: {
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          admin: faker.datatype.boolean(),
        },
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/collaborators/:username': {
    get: { 204: null, 404: null },
    put: {
      201: {
        id: faker.datatype.number(),
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.internet.url(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          temp_clone_token: faker.lorem.slug(),
          delete_branch_on_merge: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          code_of_conduct: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            spdx_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          allow_forking: faker.datatype.boolean(),
        },
        invitee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        inviter: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        permissions: faker.random.arrayElement([
          'read',
          'write',
          'admin',
          'triage',
          'maintain',
        ]),
        created_at: faker.date.recent(),
        expired: faker.datatype.boolean(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
      },
      204: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: { 204: null },
  },
  '/repos/:owner/:repo/collaborators/:username/permission': {
    get: {
      200: {
        permission: faker.lorem.slug(),
        user: {
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          email: faker.lorem.slug(),
          name: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          permissions: {
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            admin: faker.datatype.boolean(),
          },
        },
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/comments': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        html_url: faker.internet.url(),
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        body: faker.lorem.slug(),
        path: faker.lorem.slug(),
        position: faker.datatype.number(),
        line: faker.datatype.number(),
        commit_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      })),
    },
  },
  '/repos/:owner/:repo/comments/:commentId': {
    get: {
      200: {
        html_url: faker.internet.url(),
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        body: faker.lorem.slug(),
        path: faker.lorem.slug(),
        position: faker.datatype.number(),
        line: faker.datatype.number(),
        commit_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        html_url: faker.internet.url(),
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        body: faker.lorem.slug(),
        path: faker.lorem.slug(),
        position: faker.datatype.number(),
        line: faker.datatype.number(),
        commit_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: {
      204: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/comments/:commentId/reactions': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        content: faker.random.arrayElement([
          '+1',
          '-1',
          'laugh',
          'confused',
          'heart',
          'hooray',
          'rocket',
          'eyes',
        ]),
        created_at: faker.date.recent(),
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        content: faker.random.arrayElement([
          '+1',
          '-1',
          'laugh',
          'confused',
          'heart',
          'hooray',
          'rocket',
          'eyes',
        ]),
        created_at: faker.date.recent(),
      },
      201: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        content: faker.random.arrayElement([
          '+1',
          '-1',
          'laugh',
          'confused',
          'heart',
          'hooray',
          'rocket',
          'eyes',
        ]),
        created_at: faker.date.recent(),
      },
      415: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/comments/:commentId/reactions/:reactionId': {
    delete: { 204: null },
  },
  '/repos/:owner/:repo/commits': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        sha: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        html_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commit: {
          url: faker.internet.url(),
          author: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            date: faker.lorem.slug(),
          },
          committer: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            date: faker.lorem.slug(),
          },
          message: faker.lorem.slug(),
          comment_count: faker.datatype.number(),
          tree: {
            sha: faker.lorem.slug(),
            url: faker.internet.url(),
          },
          verification: {
            verified: faker.datatype.boolean(),
            reason: faker.lorem.slug(),
            payload: faker.lorem.slug(),
            signature: faker.lorem.slug(),
          },
        },
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        committer: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        parents: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          sha: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
        })),
        stats: {
          additions: faker.datatype.number(),
          deletions: faker.datatype.number(),
          total: faker.datatype.number(),
        },
        files: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          sha: faker.lorem.slug(),
          filename: faker.lorem.slug(),
          status: faker.random.arrayElement([
            'added',
            'removed',
            'modified',
            'renamed',
            'copied',
            'changed',
            'unchanged',
          ]),
          additions: faker.datatype.number(),
          deletions: faker.datatype.number(),
          changes: faker.datatype.number(),
          blob_url: faker.internet.url(),
          raw_url: faker.internet.url(),
          contents_url: faker.internet.url(),
          patch: faker.lorem.slug(),
          previous_filename: faker.lorem.slug(),
        })),
      })),
      400: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      409: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      500: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/commits/:commitSha/branches-where-head': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        commit: {
          sha: faker.lorem.slug(),
          url: faker.lorem.slug(),
        },
        protected: faker.datatype.boolean(),
      })),
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/commits/:commitSha/comments': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        html_url: faker.internet.url(),
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        body: faker.lorem.slug(),
        path: faker.lorem.slug(),
        position: faker.datatype.number(),
        line: faker.datatype.number(),
        commit_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      })),
    },
    post: {
      201: {
        html_url: faker.internet.url(),
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        body: faker.lorem.slug(),
        path: faker.lorem.slug(),
        position: faker.datatype.number(),
        line: faker.datatype.number(),
        commit_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/commits/:commitSha/pulls': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        html_url: faker.internet.url(),
        diff_url: faker.internet.url(),
        patch_url: faker.internet.url(),
        issue_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        review_comments_url: faker.internet.url(),
        review_comment_url: faker.lorem.slug(),
        comments_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        locked: faker.datatype.boolean(),
        title: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          color: faker.lorem.slug(),
          default: faker.datatype.boolean(),
        })),
        milestone: {
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          title: faker.lorem.slug(),
          description: faker.lorem.slug(),
          creator: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          closed_at: faker.date.recent(),
          due_on: faker.date.recent(),
        },
        active_lock_reason: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        closed_at: faker.date.recent(),
        merged_at: faker.date.recent(),
        merge_commit_sha: faker.lorem.slug(),
        assignee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assignees: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        requested_reviewers: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        requested_teams: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          slug: faker.lorem.slug(),
          description: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          permissions: {
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            admin: faker.datatype.boolean(),
          },
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          repositories_url: faker.internet.url(),
          parent: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            members_url: faker.lorem.slug(),
            name: faker.lorem.slug(),
            description: faker.lorem.slug(),
            permission: faker.lorem.slug(),
            privacy: faker.lorem.slug(),
            html_url: faker.internet.url(),
            repositories_url: faker.internet.url(),
            slug: faker.lorem.slug(),
            ldap_dn: faker.lorem.slug(),
          },
        })),
        head: {
          label: faker.lorem.slug(),
          ref: faker.lorem.slug(),
          repo: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          sha: faker.lorem.slug(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        base: {
          label: faker.lorem.slug(),
          ref: faker.lorem.slug(),
          repo: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          sha: faker.lorem.slug(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        _links: {
          comments: {
            href: faker.lorem.slug(),
          },
          commits: {
            href: faker.lorem.slug(),
          },
          statuses: {
            href: faker.lorem.slug(),
          },
          html: {
            href: faker.lorem.slug(),
          },
          issue: {
            href: faker.lorem.slug(),
          },
          review_comments: {
            href: faker.lorem.slug(),
          },
          review_comment: {
            href: faker.lorem.slug(),
          },
          self: {
            href: faker.lorem.slug(),
          },
        },
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        auto_merge: {
          enabled_by: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          merge_method: faker.random.arrayElement([
            'merge',
            'squash',
            'rebase',
          ]),
          commit_title: faker.lorem.slug(),
          commit_message: faker.lorem.slug(),
        },
        draft: faker.datatype.boolean(),
      })),
    },
  },
  '/repos/:owner/:repo/commits/:ref': {
    get: {
      200: {
        url: faker.internet.url(),
        sha: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        html_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commit: {
          url: faker.internet.url(),
          author: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            date: faker.lorem.slug(),
          },
          committer: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            date: faker.lorem.slug(),
          },
          message: faker.lorem.slug(),
          comment_count: faker.datatype.number(),
          tree: {
            sha: faker.lorem.slug(),
            url: faker.internet.url(),
          },
          verification: {
            verified: faker.datatype.boolean(),
            reason: faker.lorem.slug(),
            payload: faker.lorem.slug(),
            signature: faker.lorem.slug(),
          },
        },
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        committer: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        parents: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          sha: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
        })),
        stats: {
          additions: faker.datatype.number(),
          deletions: faker.datatype.number(),
          total: faker.datatype.number(),
        },
        files: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          sha: faker.lorem.slug(),
          filename: faker.lorem.slug(),
          status: faker.random.arrayElement([
            'added',
            'removed',
            'modified',
            'renamed',
            'copied',
            'changed',
            'unchanged',
          ]),
          additions: faker.datatype.number(),
          deletions: faker.datatype.number(),
          changes: faker.datatype.number(),
          blob_url: faker.internet.url(),
          raw_url: faker.internet.url(),
          contents_url: faker.internet.url(),
          patch: faker.lorem.slug(),
          previous_filename: faker.lorem.slug(),
        })),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
      500: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/commits/:ref/check-runs': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        check_runs: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          head_sha: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          external_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          details_url: faker.lorem.slug(),
          status: faker.random.arrayElement([
            'queued',
            'in_progress',
            'completed',
          ]),
          conclusion: faker.random.arrayElement([
            'success',
            'failure',
            'neutral',
            'cancelled',
            'skipped',
            'timed_out',
            'action_required',
          ]),
          started_at: faker.date.recent(),
          completed_at: faker.date.recent(),
          output: {
            title: faker.lorem.slug(),
            summary: faker.lorem.slug(),
            text: faker.lorem.slug(),
            annotations_count: faker.datatype.number(),
            annotations_url: faker.internet.url(),
          },
          name: faker.lorem.slug(),
          check_suite: {
            id: faker.datatype.number(),
          },
          app: {
            id: faker.datatype.number(),
            slug: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            name: faker.lorem.slug(),
            description: faker.lorem.slug(),
            external_url: faker.internet.url(),
            html_url: faker.internet.url(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            permissions: {
              issues: faker.lorem.slug(),
              checks: faker.lorem.slug(),
              metadata: faker.lorem.slug(),
              contents: faker.lorem.slug(),
              deployments: faker.lorem.slug(),
            },
            events: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            installations_count: faker.datatype.number(),
            client_id: faker.lorem.slug(),
            client_secret: faker.lorem.slug(),
            webhook_secret: faker.lorem.slug(),
            pem: faker.lorem.slug(),
          },
          pull_requests: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            number: faker.datatype.number(),
            url: faker.lorem.slug(),
            head: {
              ref: faker.lorem.slug(),
              sha: faker.lorem.slug(),
              repo: {
                id: faker.datatype.number(),
                url: faker.lorem.slug(),
                name: faker.lorem.slug(),
              },
            },
            base: {
              ref: faker.lorem.slug(),
              sha: faker.lorem.slug(),
              repo: {
                id: faker.datatype.number(),
                url: faker.lorem.slug(),
                name: faker.lorem.slug(),
              },
            },
          })),
          deployment: {
            url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            task: faker.lorem.slug(),
            original_environment: faker.lorem.slug(),
            environment: faker.lorem.slug(),
            description: faker.lorem.slug(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            statuses_url: faker.internet.url(),
            repository_url: faker.internet.url(),
            transient_environment: faker.datatype.boolean(),
            production_environment: faker.datatype.boolean(),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
          },
        })),
      },
    },
  },
  '/repos/:owner/:repo/commits/:ref/check-suites': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        check_suites: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          head_branch: faker.lorem.slug(),
          head_sha: faker.lorem.slug(),
          status: faker.random.arrayElement([
            'queued',
            'in_progress',
            'completed',
          ]),
          conclusion: faker.random.arrayElement([
            'success',
            'failure',
            'neutral',
            'cancelled',
            'skipped',
            'timed_out',
            'action_required',
          ]),
          url: faker.lorem.slug(),
          before: faker.lorem.slug(),
          after: faker.lorem.slug(),
          pull_requests: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            number: faker.datatype.number(),
            url: faker.lorem.slug(),
            head: {
              ref: faker.lorem.slug(),
              sha: faker.lorem.slug(),
              repo: {
                id: faker.datatype.number(),
                url: faker.lorem.slug(),
                name: faker.lorem.slug(),
              },
            },
            base: {
              ref: faker.lorem.slug(),
              sha: faker.lorem.slug(),
              repo: {
                id: faker.datatype.number(),
                url: faker.lorem.slug(),
                name: faker.lorem.slug(),
              },
            },
          })),
          app: {
            id: faker.datatype.number(),
            slug: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            name: faker.lorem.slug(),
            description: faker.lorem.slug(),
            external_url: faker.internet.url(),
            html_url: faker.internet.url(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            permissions: {
              issues: faker.lorem.slug(),
              checks: faker.lorem.slug(),
              metadata: faker.lorem.slug(),
              contents: faker.lorem.slug(),
              deployments: faker.lorem.slug(),
            },
            events: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            installations_count: faker.datatype.number(),
            client_id: faker.lorem.slug(),
            client_secret: faker.lorem.slug(),
            webhook_secret: faker.lorem.slug(),
            pem: faker.lorem.slug(),
          },
          repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.internet.url(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              license: {
                key: faker.lorem.slug(),
                name: faker.lorem.slug(),
                url: faker.internet.url(),
                spdx_id: faker.lorem.slug(),
                node_id: faker.lorem.slug(),
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.date.recent(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                name: faker.lorem.slug(),
                full_name: faker.lorem.slug(),
                owner: {
                  login: faker.lorem.slug(),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(),
                  avatar_url: faker.lorem.slug(),
                  gravatar_id: faker.lorem.slug(),
                  url: faker.lorem.slug(),
                  html_url: faker.lorem.slug(),
                  followers_url: faker.lorem.slug(),
                  following_url: faker.lorem.slug(),
                  gists_url: faker.lorem.slug(),
                  starred_url: faker.lorem.slug(),
                  subscriptions_url: faker.lorem.slug(),
                  organizations_url: faker.lorem.slug(),
                  repos_url: faker.lorem.slug(),
                  events_url: faker.lorem.slug(),
                  received_events_url: faker.lorem.slug(),
                  type: faker.lorem.slug(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.lorem.slug(),
                description: faker.lorem.slug(),
                fork: faker.datatype.boolean(),
                url: faker.lorem.slug(),
                archive_url: faker.lorem.slug(),
                assignees_url: faker.lorem.slug(),
                blobs_url: faker.lorem.slug(),
                branches_url: faker.lorem.slug(),
                collaborators_url: faker.lorem.slug(),
                comments_url: faker.lorem.slug(),
                commits_url: faker.lorem.slug(),
                compare_url: faker.lorem.slug(),
                contents_url: faker.lorem.slug(),
                contributors_url: faker.lorem.slug(),
                deployments_url: faker.lorem.slug(),
                downloads_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                forks_url: faker.lorem.slug(),
                git_commits_url: faker.lorem.slug(),
                git_refs_url: faker.lorem.slug(),
                git_tags_url: faker.lorem.slug(),
                git_url: faker.lorem.slug(),
                issue_comment_url: faker.lorem.slug(),
                issue_events_url: faker.lorem.slug(),
                issues_url: faker.lorem.slug(),
                keys_url: faker.lorem.slug(),
                labels_url: faker.lorem.slug(),
                languages_url: faker.lorem.slug(),
                merges_url: faker.lorem.slug(),
                milestones_url: faker.lorem.slug(),
                notifications_url: faker.lorem.slug(),
                pulls_url: faker.lorem.slug(),
                releases_url: faker.lorem.slug(),
                ssh_url: faker.lorem.slug(),
                stargazers_url: faker.lorem.slug(),
                statuses_url: faker.lorem.slug(),
                subscribers_url: faker.lorem.slug(),
                subscription_url: faker.lorem.slug(),
                tags_url: faker.lorem.slug(),
                teams_url: faker.lorem.slug(),
                trees_url: faker.lorem.slug(),
                clone_url: faker.lorem.slug(),
                mirror_url: faker.lorem.slug(),
                hooks_url: faker.lorem.slug(),
                svn_url: faker.lorem.slug(),
                homepage: faker.lorem.slug(),
                language: faker.lorem.slug(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(),
                pushed_at: faker.lorem.slug(),
                created_at: faker.lorem.slug(),
                updated_at: faker.lorem.slug(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(),
              starred_at: faker.lorem.slug(),
            },
            temp_clone_token: faker.lorem.slug(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              body: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              spdx_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          },
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          head_commit: {
            id: faker.lorem.slug(),
            tree_id: faker.lorem.slug(),
            message: faker.lorem.slug(),
            timestamp: faker.date.recent(),
            author: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
            },
            committer: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
            },
          },
          latest_check_runs_count: faker.datatype.number(),
          check_runs_url: faker.lorem.slug(),
          rerequestable: faker.datatype.boolean(),
          runs_rerequestable: faker.datatype.boolean(),
        })),
      },
    },
  },
  '/repos/:owner/:repo/commits/:ref/status': {
    get: {
      200: {
        state: faker.lorem.slug(),
        statuses: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          description: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          state: faker.lorem.slug(),
          context: faker.lorem.slug(),
          target_url: faker.internet.url(),
          required: faker.datatype.boolean(),
          avatar_url: faker.internet.url(),
          url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
        })),
        sha: faker.lorem.slug(),
        total_count: faker.datatype.number(),
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.internet.url(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          temp_clone_token: faker.lorem.slug(),
          delete_branch_on_merge: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          code_of_conduct: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            spdx_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          allow_forking: faker.datatype.boolean(),
        },
        commit_url: faker.internet.url(),
        url: faker.internet.url(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/commits/:ref/statuses': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.lorem.slug(),
        avatar_url: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        state: faker.lorem.slug(),
        description: faker.lorem.slug(),
        target_url: faker.lorem.slug(),
        context: faker.lorem.slug(),
        created_at: faker.lorem.slug(),
        updated_at: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
      })),
      301: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/compare/:basehead': {
    get: {
      200: {
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        permalink_url: faker.internet.url(),
        diff_url: faker.internet.url(),
        patch_url: faker.internet.url(),
        base_commit: {
          url: faker.internet.url(),
          sha: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          html_url: faker.internet.url(),
          comments_url: faker.internet.url(),
          commit: {
            url: faker.internet.url(),
            author: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              date: faker.lorem.slug(),
            },
            committer: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              date: faker.lorem.slug(),
            },
            message: faker.lorem.slug(),
            comment_count: faker.datatype.number(),
            tree: {
              sha: faker.lorem.slug(),
              url: faker.internet.url(),
            },
            verification: {
              verified: faker.datatype.boolean(),
              reason: faker.lorem.slug(),
              payload: faker.lorem.slug(),
              signature: faker.lorem.slug(),
            },
          },
          author: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          committer: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          parents: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            sha: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
          })),
          stats: {
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
            total: faker.datatype.number(),
          },
          files: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            sha: faker.lorem.slug(),
            filename: faker.lorem.slug(),
            status: faker.random.arrayElement([
              'added',
              'removed',
              'modified',
              'renamed',
              'copied',
              'changed',
              'unchanged',
            ]),
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
            changes: faker.datatype.number(),
            blob_url: faker.internet.url(),
            raw_url: faker.internet.url(),
            contents_url: faker.internet.url(),
            patch: faker.lorem.slug(),
            previous_filename: faker.lorem.slug(),
          })),
        },
        merge_base_commit: {
          url: faker.internet.url(),
          sha: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          html_url: faker.internet.url(),
          comments_url: faker.internet.url(),
          commit: {
            url: faker.internet.url(),
            author: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              date: faker.lorem.slug(),
            },
            committer: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              date: faker.lorem.slug(),
            },
            message: faker.lorem.slug(),
            comment_count: faker.datatype.number(),
            tree: {
              sha: faker.lorem.slug(),
              url: faker.internet.url(),
            },
            verification: {
              verified: faker.datatype.boolean(),
              reason: faker.lorem.slug(),
              payload: faker.lorem.slug(),
              signature: faker.lorem.slug(),
            },
          },
          author: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          committer: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          parents: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            sha: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
          })),
          stats: {
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
            total: faker.datatype.number(),
          },
          files: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            sha: faker.lorem.slug(),
            filename: faker.lorem.slug(),
            status: faker.random.arrayElement([
              'added',
              'removed',
              'modified',
              'renamed',
              'copied',
              'changed',
              'unchanged',
            ]),
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
            changes: faker.datatype.number(),
            blob_url: faker.internet.url(),
            raw_url: faker.internet.url(),
            contents_url: faker.internet.url(),
            patch: faker.lorem.slug(),
            previous_filename: faker.lorem.slug(),
          })),
        },
        status: faker.random.arrayElement([
          'diverged',
          'ahead',
          'behind',
          'identical',
        ]),
        ahead_by: faker.datatype.number(),
        behind_by: faker.datatype.number(),
        total_commits: faker.datatype.number(),
        commits: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          url: faker.internet.url(),
          sha: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          html_url: faker.internet.url(),
          comments_url: faker.internet.url(),
          commit: {
            url: faker.internet.url(),
            author: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              date: faker.lorem.slug(),
            },
            committer: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              date: faker.lorem.slug(),
            },
            message: faker.lorem.slug(),
            comment_count: faker.datatype.number(),
            tree: {
              sha: faker.lorem.slug(),
              url: faker.internet.url(),
            },
            verification: {
              verified: faker.datatype.boolean(),
              reason: faker.lorem.slug(),
              payload: faker.lorem.slug(),
              signature: faker.lorem.slug(),
            },
          },
          author: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          committer: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          parents: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            sha: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
          })),
          stats: {
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
            total: faker.datatype.number(),
          },
          files: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            sha: faker.lorem.slug(),
            filename: faker.lorem.slug(),
            status: faker.random.arrayElement([
              'added',
              'removed',
              'modified',
              'renamed',
              'copied',
              'changed',
              'unchanged',
            ]),
            additions: faker.datatype.number(),
            deletions: faker.datatype.number(),
            changes: faker.datatype.number(),
            blob_url: faker.internet.url(),
            raw_url: faker.internet.url(),
            contents_url: faker.internet.url(),
            patch: faker.lorem.slug(),
            previous_filename: faker.lorem.slug(),
          })),
        })),
        files: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          sha: faker.lorem.slug(),
          filename: faker.lorem.slug(),
          status: faker.random.arrayElement([
            'added',
            'removed',
            'modified',
            'renamed',
            'copied',
            'changed',
            'unchanged',
          ]),
          additions: faker.datatype.number(),
          deletions: faker.datatype.number(),
          changes: faker.datatype.number(),
          blob_url: faker.internet.url(),
          raw_url: faker.internet.url(),
          contents_url: faker.internet.url(),
          patch: faker.lorem.slug(),
          previous_filename: faker.lorem.slug(),
        })),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      500: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/content_references/:contentReferenceId/attachments': {
    post: {
      200: {
        id: faker.datatype.number(),
        title: faker.lorem.slug(),
        body: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
      },
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      415: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/contents/:path': {
    get: {
      200: null,
      302: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    put: {
      200: {
        content: {
          name: faker.lorem.slug(),
          path: faker.lorem.slug(),
          sha: faker.lorem.slug(),
          size: faker.datatype.number(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          download_url: faker.lorem.slug(),
          type: faker.lorem.slug(),
          _links: {
            self: faker.lorem.slug(),
            git: faker.lorem.slug(),
            html: faker.lorem.slug(),
          },
        },
        commit: {
          sha: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          author: {
            date: faker.lorem.slug(),
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
          },
          committer: {
            date: faker.lorem.slug(),
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
          },
          message: faker.lorem.slug(),
          tree: {
            url: faker.lorem.slug(),
            sha: faker.lorem.slug(),
          },
          parents: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            sha: faker.lorem.slug(),
          })),
          verification: {
            verified: faker.datatype.boolean(),
            reason: faker.lorem.slug(),
            signature: faker.lorem.slug(),
            payload: faker.lorem.slug(),
          },
        },
      },
      201: {
        content: {
          name: faker.lorem.slug(),
          path: faker.lorem.slug(),
          sha: faker.lorem.slug(),
          size: faker.datatype.number(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          download_url: faker.lorem.slug(),
          type: faker.lorem.slug(),
          _links: {
            self: faker.lorem.slug(),
            git: faker.lorem.slug(),
            html: faker.lorem.slug(),
          },
        },
        commit: {
          sha: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          author: {
            date: faker.lorem.slug(),
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
          },
          committer: {
            date: faker.lorem.slug(),
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
          },
          message: faker.lorem.slug(),
          tree: {
            url: faker.lorem.slug(),
            sha: faker.lorem.slug(),
          },
          parents: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            sha: faker.lorem.slug(),
          })),
          verification: {
            verified: faker.datatype.boolean(),
            reason: faker.lorem.slug(),
            signature: faker.lorem.slug(),
            payload: faker.lorem.slug(),
          },
        },
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      409: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: {
      200: {
        content: {
          name: faker.lorem.slug(),
          path: faker.lorem.slug(),
          sha: faker.lorem.slug(),
          size: faker.datatype.number(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          download_url: faker.lorem.slug(),
          type: faker.lorem.slug(),
          _links: {
            self: faker.lorem.slug(),
            git: faker.lorem.slug(),
            html: faker.lorem.slug(),
          },
        },
        commit: {
          sha: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          author: {
            date: faker.lorem.slug(),
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
          },
          committer: {
            date: faker.lorem.slug(),
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
          },
          message: faker.lorem.slug(),
          tree: {
            url: faker.lorem.slug(),
            sha: faker.lorem.slug(),
          },
          parents: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            sha: faker.lorem.slug(),
          })),
          verification: {
            verified: faker.datatype.boolean(),
            reason: faker.lorem.slug(),
            signature: faker.lorem.slug(),
            payload: faker.lorem.slug(),
          },
        },
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      409: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/contributors': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        contributions: faker.datatype.number(),
        email: faker.lorem.slug(),
        name: faker.lorem.slug(),
      })),
      204: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/deployments': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        sha: faker.lorem.slug(),
        ref: faker.lorem.slug(),
        task: faker.lorem.slug(),
        payload: null,
        original_environment: faker.lorem.slug(),
        environment: faker.lorem.slug(),
        description: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        statuses_url: faker.internet.url(),
        repository_url: faker.internet.url(),
        transient_environment: faker.datatype.boolean(),
        production_environment: faker.datatype.boolean(),
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
      })),
    },
    post: {
      201: {
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        sha: faker.lorem.slug(),
        ref: faker.lorem.slug(),
        task: faker.lorem.slug(),
        payload: null,
        original_environment: faker.lorem.slug(),
        environment: faker.lorem.slug(),
        description: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        statuses_url: faker.internet.url(),
        repository_url: faker.internet.url(),
        transient_environment: faker.datatype.boolean(),
        production_environment: faker.datatype.boolean(),
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
      },
      202: {
        message: faker.lorem.slug(),
      },
      409: null,
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/deployments/:deploymentId': {
    get: {
      200: {
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        sha: faker.lorem.slug(),
        ref: faker.lorem.slug(),
        task: faker.lorem.slug(),
        payload: null,
        original_environment: faker.lorem.slug(),
        environment: faker.lorem.slug(),
        description: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        statuses_url: faker.internet.url(),
        repository_url: faker.internet.url(),
        transient_environment: faker.datatype.boolean(),
        production_environment: faker.datatype.boolean(),
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: {
      204: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
  },
  '/repos/:owner/:repo/deployments/:deploymentId/statuses': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        state: faker.random.arrayElement([
          'error',
          'failure',
          'inactive',
          'pending',
          'success',
          'queued',
          'in_progress',
        ]),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        description: faker.lorem.slug(),
        environment: faker.lorem.slug(),
        target_url: faker.internet.url(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        deployment_url: faker.internet.url(),
        repository_url: faker.internet.url(),
        environment_url: faker.internet.url(),
        log_url: faker.internet.url(),
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      201: {
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        state: faker.random.arrayElement([
          'error',
          'failure',
          'inactive',
          'pending',
          'success',
          'queued',
          'in_progress',
        ]),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        description: faker.lorem.slug(),
        environment: faker.lorem.slug(),
        target_url: faker.internet.url(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        deployment_url: faker.internet.url(),
        repository_url: faker.internet.url(),
        environment_url: faker.internet.url(),
        log_url: faker.internet.url(),
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/deployments/:deploymentId/statuses/:statusId': {
    get: {
      200: {
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        state: faker.random.arrayElement([
          'error',
          'failure',
          'inactive',
          'pending',
          'success',
          'queued',
          'in_progress',
        ]),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        description: faker.lorem.slug(),
        environment: faker.lorem.slug(),
        target_url: faker.internet.url(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        deployment_url: faker.internet.url(),
        repository_url: faker.internet.url(),
        environment_url: faker.internet.url(),
        log_url: faker.internet.url(),
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/dispatches': {
    post: {
      204: null,
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/environments': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        environments: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          protection_rules: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
          deployment_branch_policy: {
            protected_branches: faker.datatype.boolean(),
            custom_branch_policies: faker.datatype.boolean(),
          },
        })),
      },
    },
  },
  '/repos/:owner/:repo/environments/:environmentName': {
    get: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        protection_rules: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
        deployment_branch_policy: {
          protected_branches: faker.datatype.boolean(),
          custom_branch_policies: faker.datatype.boolean(),
        },
      },
    },
    put: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        protection_rules: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
        deployment_branch_policy: {
          protected_branches: faker.datatype.boolean(),
          custom_branch_policies: faker.datatype.boolean(),
        },
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: { 204: null },
  },
  '/repos/:owner/:repo/events': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.lorem.slug(),
        type: faker.lorem.slug(),
        actor: {
          id: faker.datatype.number(),
          login: faker.lorem.slug(),
          display_login: faker.lorem.slug(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          avatar_url: faker.internet.url(),
        },
        repo: {
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        org: {
          id: faker.datatype.number(),
          login: faker.lorem.slug(),
          display_login: faker.lorem.slug(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          avatar_url: faker.internet.url(),
        },
        payload: {
          action: faker.lorem.slug(),
          issue: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            repository_url: faker.internet.url(),
            labels_url: faker.lorem.slug(),
            comments_url: faker.internet.url(),
            events_url: faker.internet.url(),
            html_url: faker.internet.url(),
            number: faker.datatype.number(),
            state: faker.lorem.slug(),
            title: faker.lorem.slug(),
            body: faker.lorem.slug(),
            user: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            labels: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            assignee: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            })),
            milestone: {
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.lorem.slug(),
              description: faker.lorem.slug(),
              creator: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              closed_at: faker.date.recent(),
              due_on: faker.date.recent(),
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.lorem.slug(),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.date.recent(),
              diff_url: faker.internet.url(),
              html_url: faker.internet.url(),
              patch_url: faker.internet.url(),
              url: faker.internet.url(),
            },
            closed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            body_html: faker.lorem.slug(),
            body_text: faker.lorem.slug(),
            timeline_url: faker.internet.url(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              license: {
                key: faker.lorem.slug(),
                name: faker.lorem.slug(),
                url: faker.internet.url(),
                spdx_id: faker.lorem.slug(),
                node_id: faker.lorem.slug(),
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.date.recent(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                name: faker.lorem.slug(),
                full_name: faker.lorem.slug(),
                owner: {
                  login: faker.lorem.slug(),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(),
                  avatar_url: faker.lorem.slug(),
                  gravatar_id: faker.lorem.slug(),
                  url: faker.lorem.slug(),
                  html_url: faker.lorem.slug(),
                  followers_url: faker.lorem.slug(),
                  following_url: faker.lorem.slug(),
                  gists_url: faker.lorem.slug(),
                  starred_url: faker.lorem.slug(),
                  subscriptions_url: faker.lorem.slug(),
                  organizations_url: faker.lorem.slug(),
                  repos_url: faker.lorem.slug(),
                  events_url: faker.lorem.slug(),
                  received_events_url: faker.lorem.slug(),
                  type: faker.lorem.slug(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.lorem.slug(),
                description: faker.lorem.slug(),
                fork: faker.datatype.boolean(),
                url: faker.lorem.slug(),
                archive_url: faker.lorem.slug(),
                assignees_url: faker.lorem.slug(),
                blobs_url: faker.lorem.slug(),
                branches_url: faker.lorem.slug(),
                collaborators_url: faker.lorem.slug(),
                comments_url: faker.lorem.slug(),
                commits_url: faker.lorem.slug(),
                compare_url: faker.lorem.slug(),
                contents_url: faker.lorem.slug(),
                contributors_url: faker.lorem.slug(),
                deployments_url: faker.lorem.slug(),
                downloads_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                forks_url: faker.lorem.slug(),
                git_commits_url: faker.lorem.slug(),
                git_refs_url: faker.lorem.slug(),
                git_tags_url: faker.lorem.slug(),
                git_url: faker.lorem.slug(),
                issue_comment_url: faker.lorem.slug(),
                issue_events_url: faker.lorem.slug(),
                issues_url: faker.lorem.slug(),
                keys_url: faker.lorem.slug(),
                labels_url: faker.lorem.slug(),
                languages_url: faker.lorem.slug(),
                merges_url: faker.lorem.slug(),
                milestones_url: faker.lorem.slug(),
                notifications_url: faker.lorem.slug(),
                pulls_url: faker.lorem.slug(),
                releases_url: faker.lorem.slug(),
                ssh_url: faker.lorem.slug(),
                stargazers_url: faker.lorem.slug(),
                statuses_url: faker.lorem.slug(),
                subscribers_url: faker.lorem.slug(),
                subscription_url: faker.lorem.slug(),
                tags_url: faker.lorem.slug(),
                teams_url: faker.lorem.slug(),
                trees_url: faker.lorem.slug(),
                clone_url: faker.lorem.slug(),
                mirror_url: faker.lorem.slug(),
                hooks_url: faker.lorem.slug(),
                svn_url: faker.lorem.slug(),
                homepage: faker.lorem.slug(),
                language: faker.lorem.slug(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(),
                pushed_at: faker.lorem.slug(),
                created_at: faker.lorem.slug(),
                updated_at: faker.lorem.slug(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(),
              starred_at: faker.lorem.slug(),
            },
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          },
          comment: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            body_text: faker.lorem.slug(),
            body_html: faker.lorem.slug(),
            html_url: faker.internet.url(),
            user: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            issue_url: faker.internet.url(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          },
          pages: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            page_name: faker.lorem.slug(),
            title: faker.lorem.slug(),
            summary: faker.lorem.slug(),
            action: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
          })),
        },
        public: faker.datatype.boolean(),
        created_at: faker.date.recent(),
      })),
    },
  },
  '/repos/:owner/:repo/forks': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        full_name: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.lorem.slug(),
        assignees_url: faker.lorem.slug(),
        blobs_url: faker.lorem.slug(),
        branches_url: faker.lorem.slug(),
        collaborators_url: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        compare_url: faker.lorem.slug(),
        contents_url: faker.lorem.slug(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.lorem.slug(),
        git_refs_url: faker.lorem.slug(),
        git_tags_url: faker.lorem.slug(),
        git_url: faker.lorem.slug(),
        issue_comment_url: faker.lorem.slug(),
        issue_events_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        labels_url: faker.lorem.slug(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        pulls_url: faker.lorem.slug(),
        releases_url: faker.lorem.slug(),
        ssh_url: faker.lorem.slug(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.lorem.slug(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.lorem.slug(),
        clone_url: faker.lorem.slug(),
        mirror_url: faker.lorem.slug(),
        hooks_url: faker.internet.url(),
        svn_url: faker.lorem.slug(),
        homepage: faker.lorem.slug(),
        language: faker.lorem.slug(),
        forks_count: faker.datatype.number(),
        stargazers_count: faker.datatype.number(),
        watchers_count: faker.datatype.number(),
        size: faker.datatype.number(),
        default_branch: faker.lorem.slug(),
        open_issues_count: faker.datatype.number(),
        is_template: faker.datatype.boolean(),
        topics: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
        pushed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        template_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        temp_clone_token: faker.lorem.slug(),
        delete_branch_on_merge: faker.datatype.boolean(),
        subscribers_count: faker.datatype.number(),
        network_count: faker.datatype.number(),
        code_of_conduct: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          body: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          spdx_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
        },
        forks: faker.datatype.number(),
        open_issues: faker.datatype.number(),
        watchers: faker.datatype.number(),
        allow_forking: faker.datatype.boolean(),
      })),
      400: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      202: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        full_name: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.lorem.slug(),
        assignees_url: faker.lorem.slug(),
        blobs_url: faker.lorem.slug(),
        branches_url: faker.lorem.slug(),
        collaborators_url: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        compare_url: faker.lorem.slug(),
        contents_url: faker.lorem.slug(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.lorem.slug(),
        git_refs_url: faker.lorem.slug(),
        git_tags_url: faker.lorem.slug(),
        git_url: faker.lorem.slug(),
        issue_comment_url: faker.lorem.slug(),
        issue_events_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        labels_url: faker.lorem.slug(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        pulls_url: faker.lorem.slug(),
        releases_url: faker.lorem.slug(),
        ssh_url: faker.lorem.slug(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.lorem.slug(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.lorem.slug(),
        clone_url: faker.lorem.slug(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.internet.url(),
        language: faker.lorem.slug(),
        forks_count: faker.datatype.number(),
        stargazers_count: faker.datatype.number(),
        watchers_count: faker.datatype.number(),
        size: faker.datatype.number(),
        default_branch: faker.lorem.slug(),
        open_issues_count: faker.datatype.number(),
        is_template: faker.datatype.boolean(),
        topics: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
        pushed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        allow_rebase_merge: faker.datatype.boolean(),
        template_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        temp_clone_token: faker.lorem.slug(),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.datatype.number(),
        network_count: faker.datatype.number(),
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          spdx_id: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        parent: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        source: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        forks: faker.datatype.number(),
        master_branch: faker.lorem.slug(),
        open_issues: faker.datatype.number(),
        watchers: faker.datatype.number(),
        anonymous_access_enabled: faker.datatype.boolean(),
        code_of_conduct: {
          url: faker.internet.url(),
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        security_and_analysis: {
          advanced_security: {
            status: faker.random.arrayElement(['enabled', 'disabled']),
          },
          secret_scanning: {
            status: faker.random.arrayElement(['enabled', 'disabled']),
          },
          secret_scanning_push_protection: {
            status: faker.random.arrayElement(['enabled', 'disabled']),
          },
        },
      },
      400: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/git/blobs': {
    post: {
      201: {
        url: faker.lorem.slug(),
        sha: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      409: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/git/blobs/:fileSha': {
    get: {
      200: {
        content: faker.lorem.slug(),
        encoding: faker.lorem.slug(),
        url: faker.internet.url(),
        sha: faker.lorem.slug(),
        size: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        highlighted_content: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/git/commits': {
    post: {
      201: {
        sha: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        author: {
          date: faker.date.recent(),
          email: faker.lorem.slug(),
          name: faker.lorem.slug(),
        },
        committer: {
          date: faker.date.recent(),
          email: faker.lorem.slug(),
          name: faker.lorem.slug(),
        },
        message: faker.lorem.slug(),
        tree: {
          sha: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        parents: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          sha: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
        })),
        verification: {
          verified: faker.datatype.boolean(),
          reason: faker.lorem.slug(),
          signature: faker.lorem.slug(),
          payload: faker.lorem.slug(),
        },
        html_url: faker.internet.url(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/git/commits/:commitSha': {
    get: {
      200: {
        sha: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        author: {
          date: faker.date.recent(),
          email: faker.lorem.slug(),
          name: faker.lorem.slug(),
        },
        committer: {
          date: faker.date.recent(),
          email: faker.lorem.slug(),
          name: faker.lorem.slug(),
        },
        message: faker.lorem.slug(),
        tree: {
          sha: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        parents: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          sha: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
        })),
        verification: {
          verified: faker.datatype.boolean(),
          reason: faker.lorem.slug(),
          signature: faker.lorem.slug(),
          payload: faker.lorem.slug(),
        },
        html_url: faker.internet.url(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/git/matching-refs/:ref': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        ref: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        object: {
          type: faker.lorem.slug(),
          sha: faker.lorem.slug(),
          url: faker.internet.url(),
        },
      })),
    },
  },
  '/repos/:owner/:repo/git/ref/:ref': {
    get: {
      200: {
        ref: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        object: {
          type: faker.lorem.slug(),
          sha: faker.lorem.slug(),
          url: faker.internet.url(),
        },
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/git/refs': {
    post: {
      201: {
        ref: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        object: {
          type: faker.lorem.slug(),
          sha: faker.lorem.slug(),
          url: faker.internet.url(),
        },
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/git/refs/:ref': {
    patch: {
      200: {
        ref: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        object: {
          type: faker.lorem.slug(),
          sha: faker.lorem.slug(),
          url: faker.internet.url(),
        },
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: {
      204: null,
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/git/tags': {
    post: {
      201: {
        node_id: faker.lorem.slug(),
        tag: faker.lorem.slug(),
        sha: faker.lorem.slug(),
        url: faker.internet.url(),
        message: faker.lorem.slug(),
        tagger: {
          date: faker.lorem.slug(),
          email: faker.lorem.slug(),
          name: faker.lorem.slug(),
        },
        object: {
          sha: faker.lorem.slug(),
          type: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        verification: {
          verified: faker.datatype.boolean(),
          reason: faker.lorem.slug(),
          payload: faker.lorem.slug(),
          signature: faker.lorem.slug(),
        },
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/git/tags/:tagSha': {
    get: {
      200: {
        node_id: faker.lorem.slug(),
        tag: faker.lorem.slug(),
        sha: faker.lorem.slug(),
        url: faker.internet.url(),
        message: faker.lorem.slug(),
        tagger: {
          date: faker.lorem.slug(),
          email: faker.lorem.slug(),
          name: faker.lorem.slug(),
        },
        object: {
          sha: faker.lorem.slug(),
          type: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        verification: {
          verified: faker.datatype.boolean(),
          reason: faker.lorem.slug(),
          payload: faker.lorem.slug(),
          signature: faker.lorem.slug(),
        },
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/git/trees': {
    post: {
      201: {
        sha: faker.lorem.slug(),
        url: faker.internet.url(),
        truncated: faker.datatype.boolean(),
        tree: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          path: faker.lorem.slug(),
          mode: faker.lorem.slug(),
          type: faker.lorem.slug(),
          sha: faker.lorem.slug(),
          size: faker.datatype.number(),
          url: faker.lorem.slug(),
        })),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/git/trees/:treeSha': {
    get: {
      200: {
        sha: faker.lorem.slug(),
        url: faker.internet.url(),
        truncated: faker.datatype.boolean(),
        tree: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          path: faker.lorem.slug(),
          mode: faker.lorem.slug(),
          type: faker.lorem.slug(),
          sha: faker.lorem.slug(),
          size: faker.datatype.number(),
          url: faker.lorem.slug(),
        })),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/hooks': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        type: faker.lorem.slug(),
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        active: faker.datatype.boolean(),
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        config: {
          email: faker.lorem.slug(),
          password: faker.lorem.slug(),
          room: faker.lorem.slug(),
          subdomain: faker.lorem.slug(),
          url: faker.internet.url(),
          insecure_ssl: null,
          content_type: faker.lorem.slug(),
          digest: faker.lorem.slug(),
          secret: faker.lorem.slug(),
          token: faker.lorem.slug(),
        },
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        url: faker.internet.url(),
        test_url: faker.internet.url(),
        ping_url: faker.internet.url(),
        deliveries_url: faker.internet.url(),
        last_response: {
          code: faker.datatype.number(),
          status: faker.lorem.slug(),
          message: faker.lorem.slug(),
        },
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      201: {
        type: faker.lorem.slug(),
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        active: faker.datatype.boolean(),
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        config: {
          email: faker.lorem.slug(),
          password: faker.lorem.slug(),
          room: faker.lorem.slug(),
          subdomain: faker.lorem.slug(),
          url: faker.internet.url(),
          insecure_ssl: null,
          content_type: faker.lorem.slug(),
          digest: faker.lorem.slug(),
          secret: faker.lorem.slug(),
          token: faker.lorem.slug(),
        },
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        url: faker.internet.url(),
        test_url: faker.internet.url(),
        ping_url: faker.internet.url(),
        deliveries_url: faker.internet.url(),
        last_response: {
          code: faker.datatype.number(),
          status: faker.lorem.slug(),
          message: faker.lorem.slug(),
        },
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/hooks/:hookId': {
    get: {
      200: {
        type: faker.lorem.slug(),
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        active: faker.datatype.boolean(),
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        config: {
          email: faker.lorem.slug(),
          password: faker.lorem.slug(),
          room: faker.lorem.slug(),
          subdomain: faker.lorem.slug(),
          url: faker.internet.url(),
          insecure_ssl: null,
          content_type: faker.lorem.slug(),
          digest: faker.lorem.slug(),
          secret: faker.lorem.slug(),
          token: faker.lorem.slug(),
        },
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        url: faker.internet.url(),
        test_url: faker.internet.url(),
        ping_url: faker.internet.url(),
        deliveries_url: faker.internet.url(),
        last_response: {
          code: faker.datatype.number(),
          status: faker.lorem.slug(),
          message: faker.lorem.slug(),
        },
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        type: faker.lorem.slug(),
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        active: faker.datatype.boolean(),
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        config: {
          email: faker.lorem.slug(),
          password: faker.lorem.slug(),
          room: faker.lorem.slug(),
          subdomain: faker.lorem.slug(),
          url: faker.internet.url(),
          insecure_ssl: null,
          content_type: faker.lorem.slug(),
          digest: faker.lorem.slug(),
          secret: faker.lorem.slug(),
          token: faker.lorem.slug(),
        },
        updated_at: faker.date.recent(),
        created_at: faker.date.recent(),
        url: faker.internet.url(),
        test_url: faker.internet.url(),
        ping_url: faker.internet.url(),
        deliveries_url: faker.internet.url(),
        last_response: {
          code: faker.datatype.number(),
          status: faker.lorem.slug(),
          message: faker.lorem.slug(),
        },
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: {
      204: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/hooks/:hookId/config': {
    get: {
      200: {
        url: faker.internet.url(),
        content_type: faker.lorem.slug(),
        secret: faker.lorem.slug(),
        insecure_ssl: null,
      },
    },
    patch: {
      200: {
        url: faker.internet.url(),
        content_type: faker.lorem.slug(),
        secret: faker.lorem.slug(),
        insecure_ssl: null,
      },
    },
  },
  '/repos/:owner/:repo/hooks/:hookId/deliveries': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        guid: faker.lorem.slug(),
        delivered_at: faker.date.recent(),
        redelivery: faker.datatype.boolean(),
        duration: faker.datatype.number(),
        status: faker.lorem.slug(),
        status_code: faker.datatype.number(),
        event: faker.lorem.slug(),
        action: faker.lorem.slug(),
        installation_id: faker.datatype.number(),
        repository_id: faker.datatype.number(),
      })),
      400: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/hooks/:hookId/deliveries/:deliveryId': {
    get: {
      200: {
        id: faker.datatype.number(),
        guid: faker.lorem.slug(),
        delivered_at: faker.date.recent(),
        redelivery: faker.datatype.boolean(),
        duration: faker.datatype.number(),
        status: faker.lorem.slug(),
        status_code: faker.datatype.number(),
        event: faker.lorem.slug(),
        action: faker.lorem.slug(),
        installation_id: faker.datatype.number(),
        repository_id: faker.datatype.number(),
        url: faker.lorem.slug(),
        request: {
          headers: {},
          payload: {},
        },
        response: {
          headers: {},
          payload: faker.lorem.slug(),
        },
      },
      400: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/hooks/:hookId/deliveries/:deliveryId/attempts': {
    post: {
      202: {},
      400: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/hooks/:hookId/pings': {
    post: {
      204: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/hooks/:hookId/tests': {
    post: {
      204: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/installation': {
    get: {
      200: {
        id: faker.datatype.number(),
        account: null,
        repository_selection: faker.random.arrayElement(['all', 'selected']),
        access_tokens_url: faker.internet.url(),
        repositories_url: faker.internet.url(),
        html_url: faker.internet.url(),
        app_id: faker.datatype.number(),
        target_id: faker.datatype.number(),
        target_type: faker.lorem.slug(),
        permissions: {
          actions: faker.random.arrayElement(['read', 'write']),
          administration: faker.random.arrayElement(['read', 'write']),
          checks: faker.random.arrayElement(['read', 'write']),
          contents: faker.random.arrayElement(['read', 'write']),
          deployments: faker.random.arrayElement(['read', 'write']),
          environments: faker.random.arrayElement(['read', 'write']),
          issues: faker.random.arrayElement(['read', 'write']),
          metadata: faker.random.arrayElement(['read', 'write']),
          packages: faker.random.arrayElement(['read', 'write']),
          pages: faker.random.arrayElement(['read', 'write']),
          pull_requests: faker.random.arrayElement(['read', 'write']),
          repository_hooks: faker.random.arrayElement(['read', 'write']),
          repository_projects: faker.random.arrayElement([
            'read',
            'write',
            'admin',
          ]),
          secret_scanning_alerts: faker.random.arrayElement(['read', 'write']),
          secrets: faker.random.arrayElement(['read', 'write']),
          security_events: faker.random.arrayElement(['read', 'write']),
          single_file: faker.random.arrayElement(['read', 'write']),
          statuses: faker.random.arrayElement(['read', 'write']),
          vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
          workflows: faker.random.arrayElement(['write']),
          members: faker.random.arrayElement(['read', 'write']),
          organization_administration: faker.random.arrayElement([
            'read',
            'write',
          ]),
          organization_hooks: faker.random.arrayElement(['read', 'write']),
          organization_plan: faker.random.arrayElement(['read']),
          organization_projects: faker.random.arrayElement([
            'read',
            'write',
            'admin',
          ]),
          organization_packages: faker.random.arrayElement(['read', 'write']),
          organization_secrets: faker.random.arrayElement(['read', 'write']),
          organization_self_hosted_runners: faker.random.arrayElement([
            'read',
            'write',
          ]),
          organization_user_blocking: faker.random.arrayElement([
            'read',
            'write',
          ]),
          team_discussions: faker.random.arrayElement(['read', 'write']),
          content_references: faker.random.arrayElement(['read', 'write']),
        },
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        single_file_name: faker.lorem.slug(),
        has_multiple_single_files: faker.datatype.boolean(),
        single_file_paths: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        app_slug: faker.lorem.slug(),
        suspended_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        suspended_at: faker.date.recent(),
        contact_email: faker.lorem.slug(),
      },
      301: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/invitations': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.internet.url(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          temp_clone_token: faker.lorem.slug(),
          delete_branch_on_merge: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          code_of_conduct: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            spdx_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          allow_forking: faker.datatype.boolean(),
        },
        invitee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        inviter: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        permissions: faker.random.arrayElement([
          'read',
          'write',
          'admin',
          'triage',
          'maintain',
        ]),
        created_at: faker.date.recent(),
        expired: faker.datatype.boolean(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
      })),
    },
  },
  '/repos/:owner/:repo/invitations/:invitationId': {
    patch: {
      200: {
        id: faker.datatype.number(),
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.internet.url(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          temp_clone_token: faker.lorem.slug(),
          delete_branch_on_merge: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          code_of_conduct: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            spdx_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          allow_forking: faker.datatype.boolean(),
        },
        invitee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        inviter: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        permissions: faker.random.arrayElement([
          'read',
          'write',
          'admin',
          'triage',
          'maintain',
        ]),
        created_at: faker.date.recent(),
        expired: faker.datatype.boolean(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
      },
    },
    delete: { 204: null },
  },
  '/repos/:owner/:repo/issues': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        repository_url: faker.internet.url(),
        labels_url: faker.lorem.slug(),
        comments_url: faker.internet.url(),
        events_url: faker.internet.url(),
        html_url: faker.internet.url(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        title: faker.lorem.slug(),
        body: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
        assignee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assignees: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        milestone: {
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          title: faker.lorem.slug(),
          description: faker.lorem.slug(),
          creator: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          closed_at: faker.date.recent(),
          due_on: faker.date.recent(),
        },
        locked: faker.datatype.boolean(),
        active_lock_reason: faker.lorem.slug(),
        comments: faker.datatype.number(),
        pull_request: {
          merged_at: faker.date.recent(),
          diff_url: faker.internet.url(),
          html_url: faker.internet.url(),
          patch_url: faker.internet.url(),
          url: faker.internet.url(),
        },
        closed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        draft: faker.datatype.boolean(),
        closed_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        timeline_url: faker.internet.url(),
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      })),
      301: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    post: {
      201: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        repository_url: faker.internet.url(),
        labels_url: faker.lorem.slug(),
        comments_url: faker.internet.url(),
        events_url: faker.internet.url(),
        html_url: faker.internet.url(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        title: faker.lorem.slug(),
        body: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
        assignee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assignees: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        milestone: {
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          title: faker.lorem.slug(),
          description: faker.lorem.slug(),
          creator: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          closed_at: faker.date.recent(),
          due_on: faker.date.recent(),
        },
        locked: faker.datatype.boolean(),
        active_lock_reason: faker.lorem.slug(),
        comments: faker.datatype.number(),
        pull_request: {
          merged_at: faker.date.recent(),
          diff_url: faker.internet.url(),
          html_url: faker.internet.url(),
          patch_url: faker.internet.url(),
          url: faker.internet.url(),
        },
        closed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        draft: faker.datatype.boolean(),
        closed_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        timeline_url: faker.internet.url(),
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/issues/comments': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        body: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        html_url: faker.internet.url(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        issue_url: faker.internet.url(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/issues/comments/:commentId': {
    get: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        body: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        html_url: faker.internet.url(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        issue_url: faker.internet.url(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        body: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        html_url: faker.internet.url(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        issue_url: faker.internet.url(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: { 204: null },
  },
  '/repos/:owner/:repo/issues/comments/:commentId/reactions': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        content: faker.random.arrayElement([
          '+1',
          '-1',
          'laugh',
          'confused',
          'heart',
          'hooray',
          'rocket',
          'eyes',
        ]),
        created_at: faker.date.recent(),
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        content: faker.random.arrayElement([
          '+1',
          '-1',
          'laugh',
          'confused',
          'heart',
          'hooray',
          'rocket',
          'eyes',
        ]),
        created_at: faker.date.recent(),
      },
      201: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        content: faker.random.arrayElement([
          '+1',
          '-1',
          'laugh',
          'confused',
          'heart',
          'hooray',
          'rocket',
          'eyes',
        ]),
        created_at: faker.date.recent(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/issues/comments/:commentId/reactions/:reactionId': {
    delete: { 204: null },
  },
  '/repos/:owner/:repo/issues/events': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        actor: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        event: faker.lorem.slug(),
        commit_id: faker.lorem.slug(),
        commit_url: faker.lorem.slug(),
        created_at: faker.date.recent(),
        issue: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          repository_url: faker.internet.url(),
          labels_url: faker.lorem.slug(),
          comments_url: faker.internet.url(),
          events_url: faker.internet.url(),
          html_url: faker.internet.url(),
          number: faker.datatype.number(),
          state: faker.lorem.slug(),
          title: faker.lorem.slug(),
          body: faker.lorem.slug(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          labels: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
          assignee: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          assignees: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          })),
          milestone: {
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            number: faker.datatype.number(),
            state: faker.random.arrayElement(['open', 'closed']),
            title: faker.lorem.slug(),
            description: faker.lorem.slug(),
            creator: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            open_issues: faker.datatype.number(),
            closed_issues: faker.datatype.number(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            closed_at: faker.date.recent(),
            due_on: faker.date.recent(),
          },
          locked: faker.datatype.boolean(),
          active_lock_reason: faker.lorem.slug(),
          comments: faker.datatype.number(),
          pull_request: {
            merged_at: faker.date.recent(),
            diff_url: faker.internet.url(),
            html_url: faker.internet.url(),
            patch_url: faker.internet.url(),
            url: faker.internet.url(),
          },
          closed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          draft: faker.datatype.boolean(),
          closed_by: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          body_html: faker.lorem.slug(),
          body_text: faker.lorem.slug(),
          timeline_url: faker.internet.url(),
          repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          performed_via_github_app: {
            id: faker.datatype.number(),
            slug: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            name: faker.lorem.slug(),
            description: faker.lorem.slug(),
            external_url: faker.internet.url(),
            html_url: faker.internet.url(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            permissions: {
              issues: faker.lorem.slug(),
              checks: faker.lorem.slug(),
              metadata: faker.lorem.slug(),
              contents: faker.lorem.slug(),
              deployments: faker.lorem.slug(),
            },
            events: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            installations_count: faker.datatype.number(),
            client_id: faker.lorem.slug(),
            client_secret: faker.lorem.slug(),
            webhook_secret: faker.lorem.slug(),
            pem: faker.lorem.slug(),
          },
          author_association: faker.random.arrayElement([
            'COLLABORATOR',
            'CONTRIBUTOR',
            'FIRST_TIMER',
            'FIRST_TIME_CONTRIBUTOR',
            'MANNEQUIN',
            'MEMBER',
            'NONE',
            'OWNER',
          ]),
          reactions: {
            url: faker.internet.url(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        },
        label: {
          name: faker.lorem.slug(),
          color: faker.lorem.slug(),
        },
        assignee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assigner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        review_requester: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        requested_reviewer: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        requested_team: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          slug: faker.lorem.slug(),
          description: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          permissions: {
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            admin: faker.datatype.boolean(),
          },
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          repositories_url: faker.internet.url(),
          parent: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            members_url: faker.lorem.slug(),
            name: faker.lorem.slug(),
            description: faker.lorem.slug(),
            permission: faker.lorem.slug(),
            privacy: faker.lorem.slug(),
            html_url: faker.internet.url(),
            repositories_url: faker.internet.url(),
            slug: faker.lorem.slug(),
            ldap_dn: faker.lorem.slug(),
          },
        },
        dismissed_review: {
          state: faker.lorem.slug(),
          review_id: faker.datatype.number(),
          dismissal_message: faker.lorem.slug(),
          dismissal_commit_id: faker.lorem.slug(),
        },
        milestone: {
          title: faker.lorem.slug(),
        },
        project_card: {
          url: faker.internet.url(),
          id: faker.datatype.number(),
          project_url: faker.internet.url(),
          project_id: faker.datatype.number(),
          column_name: faker.lorem.slug(),
          previous_column_name: faker.lorem.slug(),
        },
        rename: {
          from: faker.lorem.slug(),
          to: faker.lorem.slug(),
        },
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        lock_reason: faker.lorem.slug(),
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
      })),
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/issues/events/:eventId': {
    get: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        actor: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        event: faker.lorem.slug(),
        commit_id: faker.lorem.slug(),
        commit_url: faker.lorem.slug(),
        created_at: faker.date.recent(),
        issue: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          repository_url: faker.internet.url(),
          labels_url: faker.lorem.slug(),
          comments_url: faker.internet.url(),
          events_url: faker.internet.url(),
          html_url: faker.internet.url(),
          number: faker.datatype.number(),
          state: faker.lorem.slug(),
          title: faker.lorem.slug(),
          body: faker.lorem.slug(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          labels: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
          assignee: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          assignees: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          })),
          milestone: {
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            number: faker.datatype.number(),
            state: faker.random.arrayElement(['open', 'closed']),
            title: faker.lorem.slug(),
            description: faker.lorem.slug(),
            creator: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            open_issues: faker.datatype.number(),
            closed_issues: faker.datatype.number(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            closed_at: faker.date.recent(),
            due_on: faker.date.recent(),
          },
          locked: faker.datatype.boolean(),
          active_lock_reason: faker.lorem.slug(),
          comments: faker.datatype.number(),
          pull_request: {
            merged_at: faker.date.recent(),
            diff_url: faker.internet.url(),
            html_url: faker.internet.url(),
            patch_url: faker.internet.url(),
            url: faker.internet.url(),
          },
          closed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          draft: faker.datatype.boolean(),
          closed_by: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          body_html: faker.lorem.slug(),
          body_text: faker.lorem.slug(),
          timeline_url: faker.internet.url(),
          repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          performed_via_github_app: {
            id: faker.datatype.number(),
            slug: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            name: faker.lorem.slug(),
            description: faker.lorem.slug(),
            external_url: faker.internet.url(),
            html_url: faker.internet.url(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            permissions: {
              issues: faker.lorem.slug(),
              checks: faker.lorem.slug(),
              metadata: faker.lorem.slug(),
              contents: faker.lorem.slug(),
              deployments: faker.lorem.slug(),
            },
            events: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            installations_count: faker.datatype.number(),
            client_id: faker.lorem.slug(),
            client_secret: faker.lorem.slug(),
            webhook_secret: faker.lorem.slug(),
            pem: faker.lorem.slug(),
          },
          author_association: faker.random.arrayElement([
            'COLLABORATOR',
            'CONTRIBUTOR',
            'FIRST_TIMER',
            'FIRST_TIME_CONTRIBUTOR',
            'MANNEQUIN',
            'MEMBER',
            'NONE',
            'OWNER',
          ]),
          reactions: {
            url: faker.internet.url(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        },
        label: {
          name: faker.lorem.slug(),
          color: faker.lorem.slug(),
        },
        assignee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assigner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        review_requester: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        requested_reviewer: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        requested_team: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          slug: faker.lorem.slug(),
          description: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          permissions: {
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            admin: faker.datatype.boolean(),
          },
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          repositories_url: faker.internet.url(),
          parent: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            members_url: faker.lorem.slug(),
            name: faker.lorem.slug(),
            description: faker.lorem.slug(),
            permission: faker.lorem.slug(),
            privacy: faker.lorem.slug(),
            html_url: faker.internet.url(),
            repositories_url: faker.internet.url(),
            slug: faker.lorem.slug(),
            ldap_dn: faker.lorem.slug(),
          },
        },
        dismissed_review: {
          state: faker.lorem.slug(),
          review_id: faker.datatype.number(),
          dismissal_message: faker.lorem.slug(),
          dismissal_commit_id: faker.lorem.slug(),
        },
        milestone: {
          title: faker.lorem.slug(),
        },
        project_card: {
          url: faker.internet.url(),
          id: faker.datatype.number(),
          project_url: faker.internet.url(),
          project_id: faker.datatype.number(),
          column_name: faker.lorem.slug(),
          previous_column_name: faker.lorem.slug(),
        },
        rename: {
          from: faker.lorem.slug(),
          to: faker.lorem.slug(),
        },
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        lock_reason: faker.lorem.slug(),
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/issues/:issueNumber': {
    get: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        repository_url: faker.internet.url(),
        labels_url: faker.lorem.slug(),
        comments_url: faker.internet.url(),
        events_url: faker.internet.url(),
        html_url: faker.internet.url(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        title: faker.lorem.slug(),
        body: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
        assignee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assignees: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        milestone: {
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          title: faker.lorem.slug(),
          description: faker.lorem.slug(),
          creator: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          closed_at: faker.date.recent(),
          due_on: faker.date.recent(),
        },
        locked: faker.datatype.boolean(),
        active_lock_reason: faker.lorem.slug(),
        comments: faker.datatype.number(),
        pull_request: {
          merged_at: faker.date.recent(),
          diff_url: faker.internet.url(),
          html_url: faker.internet.url(),
          patch_url: faker.internet.url(),
          url: faker.internet.url(),
        },
        closed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        draft: faker.datatype.boolean(),
        closed_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        timeline_url: faker.internet.url(),
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
      301: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      304: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        repository_url: faker.internet.url(),
        labels_url: faker.lorem.slug(),
        comments_url: faker.internet.url(),
        events_url: faker.internet.url(),
        html_url: faker.internet.url(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        title: faker.lorem.slug(),
        body: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
        assignee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assignees: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        milestone: {
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          title: faker.lorem.slug(),
          description: faker.lorem.slug(),
          creator: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          closed_at: faker.date.recent(),
          due_on: faker.date.recent(),
        },
        locked: faker.datatype.boolean(),
        active_lock_reason: faker.lorem.slug(),
        comments: faker.datatype.number(),
        pull_request: {
          merged_at: faker.date.recent(),
          diff_url: faker.internet.url(),
          html_url: faker.internet.url(),
          patch_url: faker.internet.url(),
          url: faker.internet.url(),
        },
        closed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        draft: faker.datatype.boolean(),
        closed_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        timeline_url: faker.internet.url(),
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
      301: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/issues/:issueNumber/assignees': {
    post: {
      201: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        repository_url: faker.internet.url(),
        labels_url: faker.lorem.slug(),
        comments_url: faker.internet.url(),
        events_url: faker.internet.url(),
        html_url: faker.internet.url(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        title: faker.lorem.slug(),
        body: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
        assignee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assignees: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        milestone: {
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          title: faker.lorem.slug(),
          description: faker.lorem.slug(),
          creator: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          closed_at: faker.date.recent(),
          due_on: faker.date.recent(),
        },
        locked: faker.datatype.boolean(),
        active_lock_reason: faker.lorem.slug(),
        comments: faker.datatype.number(),
        pull_request: {
          merged_at: faker.date.recent(),
          diff_url: faker.internet.url(),
          html_url: faker.internet.url(),
          patch_url: faker.internet.url(),
          url: faker.internet.url(),
        },
        closed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        draft: faker.datatype.boolean(),
        closed_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        timeline_url: faker.internet.url(),
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
    },
    delete: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        repository_url: faker.internet.url(),
        labels_url: faker.lorem.slug(),
        comments_url: faker.internet.url(),
        events_url: faker.internet.url(),
        html_url: faker.internet.url(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        title: faker.lorem.slug(),
        body: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
        assignee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assignees: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        milestone: {
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          title: faker.lorem.slug(),
          description: faker.lorem.slug(),
          creator: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          closed_at: faker.date.recent(),
          due_on: faker.date.recent(),
        },
        locked: faker.datatype.boolean(),
        active_lock_reason: faker.lorem.slug(),
        comments: faker.datatype.number(),
        pull_request: {
          merged_at: faker.date.recent(),
          diff_url: faker.internet.url(),
          html_url: faker.internet.url(),
          patch_url: faker.internet.url(),
          url: faker.internet.url(),
        },
        closed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        draft: faker.datatype.boolean(),
        closed_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        timeline_url: faker.internet.url(),
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
    },
  },
  '/repos/:owner/:repo/issues/:issueNumber/comments': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        body: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        html_url: faker.internet.url(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        issue_url: faker.internet.url(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      201: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        body: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        html_url: faker.internet.url(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        issue_url: faker.internet.url(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/issues/:issueNumber/events': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => null),
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/issues/:issueNumber/labels': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        name: faker.lorem.slug(),
        description: faker.lorem.slug(),
        color: faker.lorem.slug(),
        default: faker.datatype.boolean(),
      })),
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        name: faker.lorem.slug(),
        description: faker.lorem.slug(),
        color: faker.lorem.slug(),
        default: faker.datatype.boolean(),
      })),
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    put: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        name: faker.lorem.slug(),
        description: faker.lorem.slug(),
        color: faker.lorem.slug(),
        default: faker.datatype.boolean(),
      })),
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: {
      204: null,
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/issues/:issueNumber/labels/:name': {
    delete: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        name: faker.lorem.slug(),
        description: faker.lorem.slug(),
        color: faker.lorem.slug(),
        default: faker.datatype.boolean(),
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/issues/:issueNumber/lock': {
    put: {
      204: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: {
      204: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/issues/:issueNumber/reactions': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        content: faker.random.arrayElement([
          '+1',
          '-1',
          'laugh',
          'confused',
          'heart',
          'hooray',
          'rocket',
          'eyes',
        ]),
        created_at: faker.date.recent(),
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        content: faker.random.arrayElement([
          '+1',
          '-1',
          'laugh',
          'confused',
          'heart',
          'hooray',
          'rocket',
          'eyes',
        ]),
        created_at: faker.date.recent(),
      },
      201: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        content: faker.random.arrayElement([
          '+1',
          '-1',
          'laugh',
          'confused',
          'heart',
          'hooray',
          'rocket',
          'eyes',
        ]),
        created_at: faker.date.recent(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/issues/:issueNumber/reactions/:reactionId': {
    delete: { 204: null },
  },
  '/repos/:owner/:repo/issues/:issueNumber/timeline': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({})),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/keys': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        key: faker.lorem.slug(),
        url: faker.lorem.slug(),
        title: faker.lorem.slug(),
        verified: faker.datatype.boolean(),
        created_at: faker.lorem.slug(),
        read_only: faker.datatype.boolean(),
      })),
    },
    post: {
      201: {
        id: faker.datatype.number(),
        key: faker.lorem.slug(),
        url: faker.lorem.slug(),
        title: faker.lorem.slug(),
        verified: faker.datatype.boolean(),
        created_at: faker.lorem.slug(),
        read_only: faker.datatype.boolean(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/keys/:keyId': {
    get: {
      200: {
        id: faker.datatype.number(),
        key: faker.lorem.slug(),
        url: faker.lorem.slug(),
        title: faker.lorem.slug(),
        verified: faker.datatype.boolean(),
        created_at: faker.lorem.slug(),
        read_only: faker.datatype.boolean(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: { 204: null },
  },
  '/repos/:owner/:repo/labels': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        name: faker.lorem.slug(),
        description: faker.lorem.slug(),
        color: faker.lorem.slug(),
        default: faker.datatype.boolean(),
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      201: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        name: faker.lorem.slug(),
        description: faker.lorem.slug(),
        color: faker.lorem.slug(),
        default: faker.datatype.boolean(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/labels/:name': {
    get: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        name: faker.lorem.slug(),
        description: faker.lorem.slug(),
        color: faker.lorem.slug(),
        default: faker.datatype.boolean(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        name: faker.lorem.slug(),
        description: faker.lorem.slug(),
        color: faker.lorem.slug(),
        default: faker.datatype.boolean(),
      },
    },
    delete: { 204: null },
  },
  '/repos/:owner/:repo/languages': {
    get: {
      200: [...new Array(5).keys()]
        .map(_ => ({ [faker.lorem.word()]: faker.datatype.number() }))
        .reduce((acc, next) => Object.assign(acc, next), {}),
    },
  },
  '/repos/:owner/:repo/lfs': {
    put: { 202: {}, 403: null },
    delete: { 204: null },
  },
  '/repos/:owner/:repo/license': {
    get: {
      200: {
        name: faker.lorem.slug(),
        path: faker.lorem.slug(),
        sha: faker.lorem.slug(),
        size: faker.datatype.number(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        git_url: faker.internet.url(),
        download_url: faker.internet.url(),
        type: faker.lorem.slug(),
        content: faker.lorem.slug(),
        encoding: faker.lorem.slug(),
        _links: {
          git: faker.internet.url(),
          html: faker.internet.url(),
          self: faker.internet.url(),
        },
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          spdx_id: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
      },
    },
  },
  '/repos/:owner/:repo/merge-upstream': {
    post: {
      200: {
        message: faker.lorem.slug(),
        merge_type: faker.random.arrayElement([
          'merge',
          'fast-forward',
          'none',
        ]),
        base_branch: faker.lorem.slug(),
      },
      409: null,
      422: null,
    },
  },
  '/repos/:owner/:repo/merges': {
    post: {
      201: {
        url: faker.internet.url(),
        sha: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        html_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commit: {
          url: faker.internet.url(),
          author: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            date: faker.lorem.slug(),
          },
          committer: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            date: faker.lorem.slug(),
          },
          message: faker.lorem.slug(),
          comment_count: faker.datatype.number(),
          tree: {
            sha: faker.lorem.slug(),
            url: faker.internet.url(),
          },
          verification: {
            verified: faker.datatype.boolean(),
            reason: faker.lorem.slug(),
            payload: faker.lorem.slug(),
            signature: faker.lorem.slug(),
          },
        },
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        committer: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        parents: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          sha: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
        })),
        stats: {
          additions: faker.datatype.number(),
          deletions: faker.datatype.number(),
          total: faker.datatype.number(),
        },
        files: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          sha: faker.lorem.slug(),
          filename: faker.lorem.slug(),
          status: faker.random.arrayElement([
            'added',
            'removed',
            'modified',
            'renamed',
            'copied',
            'changed',
            'unchanged',
          ]),
          additions: faker.datatype.number(),
          deletions: faker.datatype.number(),
          changes: faker.datatype.number(),
          blob_url: faker.internet.url(),
          raw_url: faker.internet.url(),
          contents_url: faker.internet.url(),
          patch: faker.lorem.slug(),
          previous_filename: faker.lorem.slug(),
        })),
      },
      204: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: null,
      409: null,
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/milestones': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        number: faker.datatype.number(),
        state: faker.random.arrayElement(['open', 'closed']),
        title: faker.lorem.slug(),
        description: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        open_issues: faker.datatype.number(),
        closed_issues: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        closed_at: faker.date.recent(),
        due_on: faker.date.recent(),
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      201: {
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        number: faker.datatype.number(),
        state: faker.random.arrayElement(['open', 'closed']),
        title: faker.lorem.slug(),
        description: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        open_issues: faker.datatype.number(),
        closed_issues: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        closed_at: faker.date.recent(),
        due_on: faker.date.recent(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/milestones/:milestoneNumber': {
    get: {
      200: {
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        number: faker.datatype.number(),
        state: faker.random.arrayElement(['open', 'closed']),
        title: faker.lorem.slug(),
        description: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        open_issues: faker.datatype.number(),
        closed_issues: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        closed_at: faker.date.recent(),
        due_on: faker.date.recent(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        labels_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        number: faker.datatype.number(),
        state: faker.random.arrayElement(['open', 'closed']),
        title: faker.lorem.slug(),
        description: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        open_issues: faker.datatype.number(),
        closed_issues: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        closed_at: faker.date.recent(),
        due_on: faker.date.recent(),
      },
    },
    delete: {
      204: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/milestones/:milestoneNumber/labels': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        name: faker.lorem.slug(),
        description: faker.lorem.slug(),
        color: faker.lorem.slug(),
        default: faker.datatype.boolean(),
      })),
    },
  },
  '/repos/:owner/:repo/notifications': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.lorem.slug(),
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.internet.url(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          temp_clone_token: faker.lorem.slug(),
          delete_branch_on_merge: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          code_of_conduct: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            spdx_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          allow_forking: faker.datatype.boolean(),
        },
        subject: {
          title: faker.lorem.slug(),
          url: faker.lorem.slug(),
          latest_comment_url: faker.lorem.slug(),
          type: faker.lorem.slug(),
        },
        reason: faker.lorem.slug(),
        unread: faker.datatype.boolean(),
        updated_at: faker.lorem.slug(),
        last_read_at: faker.lorem.slug(),
        url: faker.lorem.slug(),
        subscription_url: faker.lorem.slug(),
      })),
    },
    put: {
      202: {
        message: faker.lorem.slug(),
        url: faker.lorem.slug(),
      },
      205: null,
    },
  },
  '/repos/:owner/:repo/pages': {
    get: {
      200: {
        url: faker.internet.url(),
        status: faker.random.arrayElement(['built', 'building', 'errored']),
        cname: faker.lorem.slug(),
        protected_domain_state: faker.random.arrayElement([
          'pending',
          'verified',
          'unverified',
        ]),
        pending_domain_unverified_at: faker.date.recent(),
        custom_404: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        source: {
          branch: faker.lorem.slug(),
          path: faker.lorem.slug(),
        },
        public: faker.datatype.boolean(),
        https_certificate: {
          state: faker.random.arrayElement([
            'new',
            'authorization_created',
            'authorization_pending',
            'authorized',
            'authorization_revoked',
            'issued',
            'uploaded',
            'approved',
            'errored',
            'bad_authz',
            'destroy_pending',
            'dns_changed',
          ]),
          description: faker.lorem.slug(),
          domains: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          expires_at: faker.date.recent().slice(0, 10),
        },
        https_enforced: faker.datatype.boolean(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      201: {
        url: faker.internet.url(),
        status: faker.random.arrayElement(['built', 'building', 'errored']),
        cname: faker.lorem.slug(),
        protected_domain_state: faker.random.arrayElement([
          'pending',
          'verified',
          'unverified',
        ]),
        pending_domain_unverified_at: faker.date.recent(),
        custom_404: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        source: {
          branch: faker.lorem.slug(),
          path: faker.lorem.slug(),
        },
        public: faker.datatype.boolean(),
        https_certificate: {
          state: faker.random.arrayElement([
            'new',
            'authorization_created',
            'authorization_pending',
            'authorized',
            'authorization_revoked',
            'issued',
            'uploaded',
            'approved',
            'errored',
            'bad_authz',
            'destroy_pending',
            'dns_changed',
          ]),
          description: faker.lorem.slug(),
          domains: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          expires_at: faker.date.recent().slice(0, 10),
        },
        https_enforced: faker.datatype.boolean(),
      },
      409: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    put: {
      204: null,
      400: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: {
      204: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/pages/builds': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        status: faker.lorem.slug(),
        error: {
          message: faker.lorem.slug(),
        },
        pusher: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        commit: faker.lorem.slug(),
        duration: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
      })),
    },
    post: {
      201: {
        url: faker.internet.url(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/pages/builds/latest': {
    get: {
      200: {
        url: faker.internet.url(),
        status: faker.lorem.slug(),
        error: {
          message: faker.lorem.slug(),
        },
        pusher: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        commit: faker.lorem.slug(),
        duration: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
      },
    },
  },
  '/repos/:owner/:repo/pages/builds/:buildId': {
    get: {
      200: {
        url: faker.internet.url(),
        status: faker.lorem.slug(),
        error: {
          message: faker.lorem.slug(),
        },
        pusher: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        commit: faker.lorem.slug(),
        duration: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
      },
    },
  },
  '/repos/:owner/:repo/pre-receive-hooks': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        enforcement: faker.lorem.slug(),
        configuration_url: faker.lorem.slug(),
      })),
    },
  },
  '/repos/:owner/:repo/pre-receive-hooks/:preReceiveHookId': {
    get: {
      200: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        enforcement: faker.lorem.slug(),
        configuration_url: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        enforcement: faker.lorem.slug(),
        configuration_url: faker.lorem.slug(),
      },
    },
    delete: {
      200: {
        id: faker.datatype.number(),
        name: faker.lorem.slug(),
        enforcement: faker.lorem.slug(),
        configuration_url: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/projects': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        owner_url: faker.internet.url(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        columns_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        body: faker.lorem.slug(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        organization_permission: faker.random.arrayElement([
          'read',
          'write',
          'admin',
          'none',
        ]),
        private: faker.datatype.boolean(),
      })),
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
    post: {
      201: {
        owner_url: faker.internet.url(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        columns_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        body: faker.lorem.slug(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        organization_permission: faker.random.arrayElement([
          'read',
          'write',
          'admin',
          'none',
        ]),
        private: faker.datatype.boolean(),
      },
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      410: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
  },
  '/repos/:owner/:repo/pulls': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        html_url: faker.internet.url(),
        diff_url: faker.internet.url(),
        patch_url: faker.internet.url(),
        issue_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        review_comments_url: faker.internet.url(),
        review_comment_url: faker.lorem.slug(),
        comments_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        locked: faker.datatype.boolean(),
        title: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          color: faker.lorem.slug(),
          default: faker.datatype.boolean(),
        })),
        milestone: {
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          title: faker.lorem.slug(),
          description: faker.lorem.slug(),
          creator: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          closed_at: faker.date.recent(),
          due_on: faker.date.recent(),
        },
        active_lock_reason: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        closed_at: faker.date.recent(),
        merged_at: faker.date.recent(),
        merge_commit_sha: faker.lorem.slug(),
        assignee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assignees: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        requested_reviewers: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        requested_teams: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          slug: faker.lorem.slug(),
          description: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          permissions: {
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            admin: faker.datatype.boolean(),
          },
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          repositories_url: faker.internet.url(),
          parent: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            members_url: faker.lorem.slug(),
            name: faker.lorem.slug(),
            description: faker.lorem.slug(),
            permission: faker.lorem.slug(),
            privacy: faker.lorem.slug(),
            html_url: faker.internet.url(),
            repositories_url: faker.internet.url(),
            slug: faker.lorem.slug(),
            ldap_dn: faker.lorem.slug(),
          },
        })),
        head: {
          label: faker.lorem.slug(),
          ref: faker.lorem.slug(),
          repo: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          sha: faker.lorem.slug(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        base: {
          label: faker.lorem.slug(),
          ref: faker.lorem.slug(),
          repo: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          sha: faker.lorem.slug(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        _links: {
          comments: {
            href: faker.lorem.slug(),
          },
          commits: {
            href: faker.lorem.slug(),
          },
          statuses: {
            href: faker.lorem.slug(),
          },
          html: {
            href: faker.lorem.slug(),
          },
          issue: {
            href: faker.lorem.slug(),
          },
          review_comments: {
            href: faker.lorem.slug(),
          },
          review_comment: {
            href: faker.lorem.slug(),
          },
          self: {
            href: faker.lorem.slug(),
          },
        },
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        auto_merge: {
          enabled_by: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          merge_method: faker.random.arrayElement([
            'merge',
            'squash',
            'rebase',
          ]),
          commit_title: faker.lorem.slug(),
          commit_message: faker.lorem.slug(),
        },
        draft: faker.datatype.boolean(),
      })),
      304: null,
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    post: {
      201: {
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        html_url: faker.internet.url(),
        diff_url: faker.internet.url(),
        patch_url: faker.internet.url(),
        issue_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        review_comments_url: faker.internet.url(),
        review_comment_url: faker.lorem.slug(),
        comments_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        number: faker.datatype.number(),
        state: faker.random.arrayElement(['open', 'closed']),
        locked: faker.datatype.boolean(),
        title: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          color: faker.lorem.slug(),
          default: faker.datatype.boolean(),
        })),
        milestone: {
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          title: faker.lorem.slug(),
          description: faker.lorem.slug(),
          creator: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          closed_at: faker.date.recent(),
          due_on: faker.date.recent(),
        },
        active_lock_reason: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        closed_at: faker.date.recent(),
        merged_at: faker.date.recent(),
        merge_commit_sha: faker.lorem.slug(),
        assignee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assignees: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        requested_reviewers: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        requested_teams: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          html_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          slug: faker.lorem.slug(),
          ldap_dn: faker.lorem.slug(),
        })),
        head: {
          label: faker.lorem.slug(),
          ref: faker.lorem.slug(),
          repo: {
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            description: faker.lorem.slug(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            fork: faker.datatype.boolean(),
            forks_url: faker.internet.url(),
            full_name: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            hooks_url: faker.internet.url(),
            html_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            name: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            owner: {
              avatar_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              login: faker.lorem.slug(),
              organizations_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              site_admin: faker.datatype.boolean(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              type: faker.lorem.slug(),
              url: faker.internet.url(),
            },
            private: faker.datatype.boolean(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            url: faker.internet.url(),
            clone_url: faker.lorem.slug(),
            default_branch: faker.lorem.slug(),
            forks: faker.datatype.number(),
            forks_count: faker.datatype.number(),
            git_url: faker.lorem.slug(),
            has_downloads: faker.datatype.boolean(),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            master_branch: faker.lorem.slug(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            open_issues: faker.datatype.number(),
            open_issues_count: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_rebase_merge: faker.datatype.boolean(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
            },
            pushed_at: faker.date.recent(),
            size: faker.datatype.number(),
            ssh_url: faker.lorem.slug(),
            stargazers_count: faker.datatype.number(),
            svn_url: faker.internet.url(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            watchers: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_forking: faker.datatype.boolean(),
            is_template: faker.datatype.boolean(),
          },
          sha: faker.lorem.slug(),
          user: {
            avatar_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            gravatar_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            login: faker.lorem.slug(),
            organizations_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            site_admin: faker.datatype.boolean(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            type: faker.lorem.slug(),
            url: faker.internet.url(),
          },
        },
        base: {
          label: faker.lorem.slug(),
          ref: faker.lorem.slug(),
          repo: {
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            description: faker.lorem.slug(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            fork: faker.datatype.boolean(),
            forks_url: faker.internet.url(),
            full_name: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            hooks_url: faker.internet.url(),
            html_url: faker.internet.url(),
            id: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            node_id: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            name: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            owner: {
              avatar_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              login: faker.lorem.slug(),
              organizations_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              site_admin: faker.datatype.boolean(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              type: faker.lorem.slug(),
              url: faker.internet.url(),
            },
            private: faker.datatype.boolean(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            url: faker.internet.url(),
            clone_url: faker.lorem.slug(),
            default_branch: faker.lorem.slug(),
            forks: faker.datatype.number(),
            forks_count: faker.datatype.number(),
            git_url: faker.lorem.slug(),
            has_downloads: faker.datatype.boolean(),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            master_branch: faker.lorem.slug(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            open_issues: faker.datatype.number(),
            open_issues_count: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_rebase_merge: faker.datatype.boolean(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            pushed_at: faker.date.recent(),
            size: faker.datatype.number(),
            ssh_url: faker.lorem.slug(),
            stargazers_count: faker.datatype.number(),
            svn_url: faker.internet.url(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            watchers: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_forking: faker.datatype.boolean(),
          },
          sha: faker.lorem.slug(),
          user: {
            avatar_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            gravatar_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            login: faker.lorem.slug(),
            organizations_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            site_admin: faker.datatype.boolean(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            type: faker.lorem.slug(),
            url: faker.internet.url(),
          },
        },
        _links: {
          comments: {
            href: faker.lorem.slug(),
          },
          commits: {
            href: faker.lorem.slug(),
          },
          statuses: {
            href: faker.lorem.slug(),
          },
          html: {
            href: faker.lorem.slug(),
          },
          issue: {
            href: faker.lorem.slug(),
          },
          review_comments: {
            href: faker.lorem.slug(),
          },
          review_comment: {
            href: faker.lorem.slug(),
          },
          self: {
            href: faker.lorem.slug(),
          },
        },
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        auto_merge: {
          enabled_by: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          merge_method: faker.random.arrayElement([
            'merge',
            'squash',
            'rebase',
          ]),
          commit_title: faker.lorem.slug(),
          commit_message: faker.lorem.slug(),
        },
        draft: faker.datatype.boolean(),
        merged: faker.datatype.boolean(),
        mergeable: faker.datatype.boolean(),
        rebaseable: faker.datatype.boolean(),
        mergeable_state: faker.lorem.slug(),
        merged_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        comments: faker.datatype.number(),
        review_comments: faker.datatype.number(),
        maintainer_can_modify: faker.datatype.boolean(),
        commits: faker.datatype.number(),
        additions: faker.datatype.number(),
        deletions: faker.datatype.number(),
        changed_files: faker.datatype.number(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/pulls/comments': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.lorem.slug(),
        pull_request_review_id: faker.datatype.number(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        diff_hunk: faker.lorem.slug(),
        path: faker.lorem.slug(),
        position: faker.datatype.number(),
        original_position: faker.datatype.number(),
        commit_id: faker.lorem.slug(),
        original_commit_id: faker.lorem.slug(),
        in_reply_to_id: faker.datatype.number(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        html_url: faker.internet.url(),
        pull_request_url: faker.internet.url(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        _links: {
          self: {
            href: faker.internet.url(),
          },
          html: {
            href: faker.internet.url(),
          },
          pull_request: {
            href: faker.internet.url(),
          },
        },
        start_line: faker.datatype.number(),
        original_start_line: faker.datatype.number(),
        start_side: faker.random.arrayElement(['LEFT', 'RIGHT']),
        line: faker.datatype.number(),
        original_line: faker.datatype.number(),
        side: faker.random.arrayElement(['LEFT', 'RIGHT']),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
      })),
    },
  },
  '/repos/:owner/:repo/pulls/comments/:commentId': {
    get: {
      200: {
        url: faker.lorem.slug(),
        pull_request_review_id: faker.datatype.number(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        diff_hunk: faker.lorem.slug(),
        path: faker.lorem.slug(),
        position: faker.datatype.number(),
        original_position: faker.datatype.number(),
        commit_id: faker.lorem.slug(),
        original_commit_id: faker.lorem.slug(),
        in_reply_to_id: faker.datatype.number(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        html_url: faker.internet.url(),
        pull_request_url: faker.internet.url(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        _links: {
          self: {
            href: faker.internet.url(),
          },
          html: {
            href: faker.internet.url(),
          },
          pull_request: {
            href: faker.internet.url(),
          },
        },
        start_line: faker.datatype.number(),
        original_start_line: faker.datatype.number(),
        start_side: faker.random.arrayElement(['LEFT', 'RIGHT']),
        line: faker.datatype.number(),
        original_line: faker.datatype.number(),
        side: faker.random.arrayElement(['LEFT', 'RIGHT']),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        url: faker.lorem.slug(),
        pull_request_review_id: faker.datatype.number(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        diff_hunk: faker.lorem.slug(),
        path: faker.lorem.slug(),
        position: faker.datatype.number(),
        original_position: faker.datatype.number(),
        commit_id: faker.lorem.slug(),
        original_commit_id: faker.lorem.slug(),
        in_reply_to_id: faker.datatype.number(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        html_url: faker.internet.url(),
        pull_request_url: faker.internet.url(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        _links: {
          self: {
            href: faker.internet.url(),
          },
          html: {
            href: faker.internet.url(),
          },
          pull_request: {
            href: faker.internet.url(),
          },
        },
        start_line: faker.datatype.number(),
        original_start_line: faker.datatype.number(),
        start_side: faker.random.arrayElement(['LEFT', 'RIGHT']),
        line: faker.datatype.number(),
        original_line: faker.datatype.number(),
        side: faker.random.arrayElement(['LEFT', 'RIGHT']),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
      },
    },
    delete: {
      204: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/pulls/comments/:commentId/reactions': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        content: faker.random.arrayElement([
          '+1',
          '-1',
          'laugh',
          'confused',
          'heart',
          'hooray',
          'rocket',
          'eyes',
        ]),
        created_at: faker.date.recent(),
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        content: faker.random.arrayElement([
          '+1',
          '-1',
          'laugh',
          'confused',
          'heart',
          'hooray',
          'rocket',
          'eyes',
        ]),
        created_at: faker.date.recent(),
      },
      201: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        content: faker.random.arrayElement([
          '+1',
          '-1',
          'laugh',
          'confused',
          'heart',
          'hooray',
          'rocket',
          'eyes',
        ]),
        created_at: faker.date.recent(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/pulls/comments/:commentId/reactions/:reactionId': {
    delete: { 204: null },
  },
  '/repos/:owner/:repo/pulls/:pullNumber': {
    get: {
      200: {
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        html_url: faker.internet.url(),
        diff_url: faker.internet.url(),
        patch_url: faker.internet.url(),
        issue_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        review_comments_url: faker.internet.url(),
        review_comment_url: faker.lorem.slug(),
        comments_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        number: faker.datatype.number(),
        state: faker.random.arrayElement(['open', 'closed']),
        locked: faker.datatype.boolean(),
        title: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          color: faker.lorem.slug(),
          default: faker.datatype.boolean(),
        })),
        milestone: {
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          title: faker.lorem.slug(),
          description: faker.lorem.slug(),
          creator: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          closed_at: faker.date.recent(),
          due_on: faker.date.recent(),
        },
        active_lock_reason: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        closed_at: faker.date.recent(),
        merged_at: faker.date.recent(),
        merge_commit_sha: faker.lorem.slug(),
        assignee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assignees: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        requested_reviewers: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        requested_teams: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          html_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          slug: faker.lorem.slug(),
          ldap_dn: faker.lorem.slug(),
        })),
        head: {
          label: faker.lorem.slug(),
          ref: faker.lorem.slug(),
          repo: {
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            description: faker.lorem.slug(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            fork: faker.datatype.boolean(),
            forks_url: faker.internet.url(),
            full_name: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            hooks_url: faker.internet.url(),
            html_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            name: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            owner: {
              avatar_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              login: faker.lorem.slug(),
              organizations_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              site_admin: faker.datatype.boolean(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              type: faker.lorem.slug(),
              url: faker.internet.url(),
            },
            private: faker.datatype.boolean(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            url: faker.internet.url(),
            clone_url: faker.lorem.slug(),
            default_branch: faker.lorem.slug(),
            forks: faker.datatype.number(),
            forks_count: faker.datatype.number(),
            git_url: faker.lorem.slug(),
            has_downloads: faker.datatype.boolean(),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            master_branch: faker.lorem.slug(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            open_issues: faker.datatype.number(),
            open_issues_count: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_rebase_merge: faker.datatype.boolean(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
            },
            pushed_at: faker.date.recent(),
            size: faker.datatype.number(),
            ssh_url: faker.lorem.slug(),
            stargazers_count: faker.datatype.number(),
            svn_url: faker.internet.url(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            watchers: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_forking: faker.datatype.boolean(),
            is_template: faker.datatype.boolean(),
          },
          sha: faker.lorem.slug(),
          user: {
            avatar_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            gravatar_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            login: faker.lorem.slug(),
            organizations_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            site_admin: faker.datatype.boolean(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            type: faker.lorem.slug(),
            url: faker.internet.url(),
          },
        },
        base: {
          label: faker.lorem.slug(),
          ref: faker.lorem.slug(),
          repo: {
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            description: faker.lorem.slug(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            fork: faker.datatype.boolean(),
            forks_url: faker.internet.url(),
            full_name: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            hooks_url: faker.internet.url(),
            html_url: faker.internet.url(),
            id: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            node_id: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            name: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            owner: {
              avatar_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              login: faker.lorem.slug(),
              organizations_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              site_admin: faker.datatype.boolean(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              type: faker.lorem.slug(),
              url: faker.internet.url(),
            },
            private: faker.datatype.boolean(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            url: faker.internet.url(),
            clone_url: faker.lorem.slug(),
            default_branch: faker.lorem.slug(),
            forks: faker.datatype.number(),
            forks_count: faker.datatype.number(),
            git_url: faker.lorem.slug(),
            has_downloads: faker.datatype.boolean(),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            master_branch: faker.lorem.slug(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            open_issues: faker.datatype.number(),
            open_issues_count: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_rebase_merge: faker.datatype.boolean(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            pushed_at: faker.date.recent(),
            size: faker.datatype.number(),
            ssh_url: faker.lorem.slug(),
            stargazers_count: faker.datatype.number(),
            svn_url: faker.internet.url(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            watchers: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_forking: faker.datatype.boolean(),
          },
          sha: faker.lorem.slug(),
          user: {
            avatar_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            gravatar_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            login: faker.lorem.slug(),
            organizations_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            site_admin: faker.datatype.boolean(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            type: faker.lorem.slug(),
            url: faker.internet.url(),
          },
        },
        _links: {
          comments: {
            href: faker.lorem.slug(),
          },
          commits: {
            href: faker.lorem.slug(),
          },
          statuses: {
            href: faker.lorem.slug(),
          },
          html: {
            href: faker.lorem.slug(),
          },
          issue: {
            href: faker.lorem.slug(),
          },
          review_comments: {
            href: faker.lorem.slug(),
          },
          review_comment: {
            href: faker.lorem.slug(),
          },
          self: {
            href: faker.lorem.slug(),
          },
        },
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        auto_merge: {
          enabled_by: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          merge_method: faker.random.arrayElement([
            'merge',
            'squash',
            'rebase',
          ]),
          commit_title: faker.lorem.slug(),
          commit_message: faker.lorem.slug(),
        },
        draft: faker.datatype.boolean(),
        merged: faker.datatype.boolean(),
        mergeable: faker.datatype.boolean(),
        rebaseable: faker.datatype.boolean(),
        mergeable_state: faker.lorem.slug(),
        merged_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        comments: faker.datatype.number(),
        review_comments: faker.datatype.number(),
        maintainer_can_modify: faker.datatype.boolean(),
        commits: faker.datatype.number(),
        additions: faker.datatype.number(),
        deletions: faker.datatype.number(),
        changed_files: faker.datatype.number(),
      },
      304: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      500: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        html_url: faker.internet.url(),
        diff_url: faker.internet.url(),
        patch_url: faker.internet.url(),
        issue_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        review_comments_url: faker.internet.url(),
        review_comment_url: faker.lorem.slug(),
        comments_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        number: faker.datatype.number(),
        state: faker.random.arrayElement(['open', 'closed']),
        locked: faker.datatype.boolean(),
        title: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          color: faker.lorem.slug(),
          default: faker.datatype.boolean(),
        })),
        milestone: {
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          title: faker.lorem.slug(),
          description: faker.lorem.slug(),
          creator: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          closed_at: faker.date.recent(),
          due_on: faker.date.recent(),
        },
        active_lock_reason: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        closed_at: faker.date.recent(),
        merged_at: faker.date.recent(),
        merge_commit_sha: faker.lorem.slug(),
        assignee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assignees: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        requested_reviewers: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        requested_teams: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          html_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          slug: faker.lorem.slug(),
          ldap_dn: faker.lorem.slug(),
        })),
        head: {
          label: faker.lorem.slug(),
          ref: faker.lorem.slug(),
          repo: {
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            description: faker.lorem.slug(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            fork: faker.datatype.boolean(),
            forks_url: faker.internet.url(),
            full_name: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            hooks_url: faker.internet.url(),
            html_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            name: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            owner: {
              avatar_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              login: faker.lorem.slug(),
              organizations_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              site_admin: faker.datatype.boolean(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              type: faker.lorem.slug(),
              url: faker.internet.url(),
            },
            private: faker.datatype.boolean(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            url: faker.internet.url(),
            clone_url: faker.lorem.slug(),
            default_branch: faker.lorem.slug(),
            forks: faker.datatype.number(),
            forks_count: faker.datatype.number(),
            git_url: faker.lorem.slug(),
            has_downloads: faker.datatype.boolean(),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            master_branch: faker.lorem.slug(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            open_issues: faker.datatype.number(),
            open_issues_count: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_rebase_merge: faker.datatype.boolean(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
            },
            pushed_at: faker.date.recent(),
            size: faker.datatype.number(),
            ssh_url: faker.lorem.slug(),
            stargazers_count: faker.datatype.number(),
            svn_url: faker.internet.url(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            watchers: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_forking: faker.datatype.boolean(),
            is_template: faker.datatype.boolean(),
          },
          sha: faker.lorem.slug(),
          user: {
            avatar_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            gravatar_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            login: faker.lorem.slug(),
            organizations_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            site_admin: faker.datatype.boolean(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            type: faker.lorem.slug(),
            url: faker.internet.url(),
          },
        },
        base: {
          label: faker.lorem.slug(),
          ref: faker.lorem.slug(),
          repo: {
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            description: faker.lorem.slug(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            fork: faker.datatype.boolean(),
            forks_url: faker.internet.url(),
            full_name: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            hooks_url: faker.internet.url(),
            html_url: faker.internet.url(),
            id: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            node_id: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            name: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            owner: {
              avatar_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              login: faker.lorem.slug(),
              organizations_url: faker.internet.url(),
              received_events_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              site_admin: faker.datatype.boolean(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              type: faker.lorem.slug(),
              url: faker.internet.url(),
            },
            private: faker.datatype.boolean(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            url: faker.internet.url(),
            clone_url: faker.lorem.slug(),
            default_branch: faker.lorem.slug(),
            forks: faker.datatype.number(),
            forks_count: faker.datatype.number(),
            git_url: faker.lorem.slug(),
            has_downloads: faker.datatype.boolean(),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            master_branch: faker.lorem.slug(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            open_issues: faker.datatype.number(),
            open_issues_count: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_rebase_merge: faker.datatype.boolean(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            pushed_at: faker.date.recent(),
            size: faker.datatype.number(),
            ssh_url: faker.lorem.slug(),
            stargazers_count: faker.datatype.number(),
            svn_url: faker.internet.url(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            watchers: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_forking: faker.datatype.boolean(),
          },
          sha: faker.lorem.slug(),
          user: {
            avatar_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            gravatar_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            login: faker.lorem.slug(),
            organizations_url: faker.internet.url(),
            received_events_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            site_admin: faker.datatype.boolean(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            type: faker.lorem.slug(),
            url: faker.internet.url(),
          },
        },
        _links: {
          comments: {
            href: faker.lorem.slug(),
          },
          commits: {
            href: faker.lorem.slug(),
          },
          statuses: {
            href: faker.lorem.slug(),
          },
          html: {
            href: faker.lorem.slug(),
          },
          issue: {
            href: faker.lorem.slug(),
          },
          review_comments: {
            href: faker.lorem.slug(),
          },
          review_comment: {
            href: faker.lorem.slug(),
          },
          self: {
            href: faker.lorem.slug(),
          },
        },
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        auto_merge: {
          enabled_by: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          merge_method: faker.random.arrayElement([
            'merge',
            'squash',
            'rebase',
          ]),
          commit_title: faker.lorem.slug(),
          commit_message: faker.lorem.slug(),
        },
        draft: faker.datatype.boolean(),
        merged: faker.datatype.boolean(),
        mergeable: faker.datatype.boolean(),
        rebaseable: faker.datatype.boolean(),
        mergeable_state: faker.lorem.slug(),
        merged_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        comments: faker.datatype.number(),
        review_comments: faker.datatype.number(),
        maintainer_can_modify: faker.datatype.boolean(),
        commits: faker.datatype.number(),
        additions: faker.datatype.number(),
        deletions: faker.datatype.number(),
        changed_files: faker.datatype.number(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/pulls/:pullNumber/comments': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.lorem.slug(),
        pull_request_review_id: faker.datatype.number(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        diff_hunk: faker.lorem.slug(),
        path: faker.lorem.slug(),
        position: faker.datatype.number(),
        original_position: faker.datatype.number(),
        commit_id: faker.lorem.slug(),
        original_commit_id: faker.lorem.slug(),
        in_reply_to_id: faker.datatype.number(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        html_url: faker.internet.url(),
        pull_request_url: faker.internet.url(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        _links: {
          self: {
            href: faker.internet.url(),
          },
          html: {
            href: faker.internet.url(),
          },
          pull_request: {
            href: faker.internet.url(),
          },
        },
        start_line: faker.datatype.number(),
        original_start_line: faker.datatype.number(),
        start_side: faker.random.arrayElement(['LEFT', 'RIGHT']),
        line: faker.datatype.number(),
        original_line: faker.datatype.number(),
        side: faker.random.arrayElement(['LEFT', 'RIGHT']),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
      })),
    },
    post: {
      201: {
        url: faker.lorem.slug(),
        pull_request_review_id: faker.datatype.number(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        diff_hunk: faker.lorem.slug(),
        path: faker.lorem.slug(),
        position: faker.datatype.number(),
        original_position: faker.datatype.number(),
        commit_id: faker.lorem.slug(),
        original_commit_id: faker.lorem.slug(),
        in_reply_to_id: faker.datatype.number(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        html_url: faker.internet.url(),
        pull_request_url: faker.internet.url(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        _links: {
          self: {
            href: faker.internet.url(),
          },
          html: {
            href: faker.internet.url(),
          },
          pull_request: {
            href: faker.internet.url(),
          },
        },
        start_line: faker.datatype.number(),
        original_start_line: faker.datatype.number(),
        start_side: faker.random.arrayElement(['LEFT', 'RIGHT']),
        line: faker.datatype.number(),
        original_line: faker.datatype.number(),
        side: faker.random.arrayElement(['LEFT', 'RIGHT']),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/pulls/:pullNumber/comments/:commentId/replies': {
    post: {
      201: {
        url: faker.lorem.slug(),
        pull_request_review_id: faker.datatype.number(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        diff_hunk: faker.lorem.slug(),
        path: faker.lorem.slug(),
        position: faker.datatype.number(),
        original_position: faker.datatype.number(),
        commit_id: faker.lorem.slug(),
        original_commit_id: faker.lorem.slug(),
        in_reply_to_id: faker.datatype.number(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        html_url: faker.internet.url(),
        pull_request_url: faker.internet.url(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        _links: {
          self: {
            href: faker.internet.url(),
          },
          html: {
            href: faker.internet.url(),
          },
          pull_request: {
            href: faker.internet.url(),
          },
        },
        start_line: faker.datatype.number(),
        original_start_line: faker.datatype.number(),
        start_side: faker.random.arrayElement(['LEFT', 'RIGHT']),
        line: faker.datatype.number(),
        original_line: faker.datatype.number(),
        side: faker.random.arrayElement(['LEFT', 'RIGHT']),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/pulls/:pullNumber/commits': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        sha: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        html_url: faker.internet.url(),
        comments_url: faker.internet.url(),
        commit: {
          url: faker.internet.url(),
          author: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            date: faker.lorem.slug(),
          },
          committer: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            date: faker.lorem.slug(),
          },
          message: faker.lorem.slug(),
          comment_count: faker.datatype.number(),
          tree: {
            sha: faker.lorem.slug(),
            url: faker.internet.url(),
          },
          verification: {
            verified: faker.datatype.boolean(),
            reason: faker.lorem.slug(),
            payload: faker.lorem.slug(),
            signature: faker.lorem.slug(),
          },
        },
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        committer: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        parents: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          sha: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
        })),
        stats: {
          additions: faker.datatype.number(),
          deletions: faker.datatype.number(),
          total: faker.datatype.number(),
        },
        files: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          sha: faker.lorem.slug(),
          filename: faker.lorem.slug(),
          status: faker.random.arrayElement([
            'added',
            'removed',
            'modified',
            'renamed',
            'copied',
            'changed',
            'unchanged',
          ]),
          additions: faker.datatype.number(),
          deletions: faker.datatype.number(),
          changes: faker.datatype.number(),
          blob_url: faker.internet.url(),
          raw_url: faker.internet.url(),
          contents_url: faker.internet.url(),
          patch: faker.lorem.slug(),
          previous_filename: faker.lorem.slug(),
        })),
      })),
    },
  },
  '/repos/:owner/:repo/pulls/:pullNumber/files': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        sha: faker.lorem.slug(),
        filename: faker.lorem.slug(),
        status: faker.random.arrayElement([
          'added',
          'removed',
          'modified',
          'renamed',
          'copied',
          'changed',
          'unchanged',
        ]),
        additions: faker.datatype.number(),
        deletions: faker.datatype.number(),
        changes: faker.datatype.number(),
        blob_url: faker.internet.url(),
        raw_url: faker.internet.url(),
        contents_url: faker.internet.url(),
        patch: faker.lorem.slug(),
        previous_filename: faker.lorem.slug(),
      })),
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
      500: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/pulls/:pullNumber/merge': {
    get: { 204: null, 404: null },
    put: {
      200: {
        sha: faker.lorem.slug(),
        merged: faker.datatype.boolean(),
        message: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      405: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
      409: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/pulls/:pullNumber/requested_reviewers': {
    get: {
      200: {
        users: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        teams: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          slug: faker.lorem.slug(),
          description: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          permissions: {
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            admin: faker.datatype.boolean(),
          },
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          repositories_url: faker.internet.url(),
          parent: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            members_url: faker.lorem.slug(),
            name: faker.lorem.slug(),
            description: faker.lorem.slug(),
            permission: faker.lorem.slug(),
            privacy: faker.lorem.slug(),
            html_url: faker.internet.url(),
            repositories_url: faker.internet.url(),
            slug: faker.lorem.slug(),
            ldap_dn: faker.lorem.slug(),
          },
        })),
      },
    },
    post: {
      201: {
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        html_url: faker.internet.url(),
        diff_url: faker.internet.url(),
        patch_url: faker.internet.url(),
        issue_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        review_comments_url: faker.internet.url(),
        review_comment_url: faker.lorem.slug(),
        comments_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        locked: faker.datatype.boolean(),
        title: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          color: faker.lorem.slug(),
          default: faker.datatype.boolean(),
        })),
        milestone: {
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          title: faker.lorem.slug(),
          description: faker.lorem.slug(),
          creator: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          closed_at: faker.date.recent(),
          due_on: faker.date.recent(),
        },
        active_lock_reason: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        closed_at: faker.date.recent(),
        merged_at: faker.date.recent(),
        merge_commit_sha: faker.lorem.slug(),
        assignee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assignees: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        requested_reviewers: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        requested_teams: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          slug: faker.lorem.slug(),
          description: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          permissions: {
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            admin: faker.datatype.boolean(),
          },
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          repositories_url: faker.internet.url(),
          parent: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            members_url: faker.lorem.slug(),
            name: faker.lorem.slug(),
            description: faker.lorem.slug(),
            permission: faker.lorem.slug(),
            privacy: faker.lorem.slug(),
            html_url: faker.internet.url(),
            repositories_url: faker.internet.url(),
            slug: faker.lorem.slug(),
            ldap_dn: faker.lorem.slug(),
          },
        })),
        head: {
          label: faker.lorem.slug(),
          ref: faker.lorem.slug(),
          repo: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          sha: faker.lorem.slug(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        base: {
          label: faker.lorem.slug(),
          ref: faker.lorem.slug(),
          repo: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          sha: faker.lorem.slug(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        _links: {
          comments: {
            href: faker.lorem.slug(),
          },
          commits: {
            href: faker.lorem.slug(),
          },
          statuses: {
            href: faker.lorem.slug(),
          },
          html: {
            href: faker.lorem.slug(),
          },
          issue: {
            href: faker.lorem.slug(),
          },
          review_comments: {
            href: faker.lorem.slug(),
          },
          review_comment: {
            href: faker.lorem.slug(),
          },
          self: {
            href: faker.lorem.slug(),
          },
        },
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        auto_merge: {
          enabled_by: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          merge_method: faker.random.arrayElement([
            'merge',
            'squash',
            'rebase',
          ]),
          commit_title: faker.lorem.slug(),
          commit_message: faker.lorem.slug(),
        },
        draft: faker.datatype.boolean(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: null,
    },
    delete: {
      200: {
        url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        html_url: faker.internet.url(),
        diff_url: faker.internet.url(),
        patch_url: faker.internet.url(),
        issue_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        review_comments_url: faker.internet.url(),
        review_comment_url: faker.lorem.slug(),
        comments_url: faker.internet.url(),
        statuses_url: faker.internet.url(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        locked: faker.datatype.boolean(),
        title: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          color: faker.lorem.slug(),
          default: faker.datatype.boolean(),
        })),
        milestone: {
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          title: faker.lorem.slug(),
          description: faker.lorem.slug(),
          creator: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          closed_at: faker.date.recent(),
          due_on: faker.date.recent(),
        },
        active_lock_reason: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        closed_at: faker.date.recent(),
        merged_at: faker.date.recent(),
        merge_commit_sha: faker.lorem.slug(),
        assignee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assignees: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        requested_reviewers: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        requested_teams: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          slug: faker.lorem.slug(),
          description: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          permissions: {
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            admin: faker.datatype.boolean(),
          },
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          repositories_url: faker.internet.url(),
          parent: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            members_url: faker.lorem.slug(),
            name: faker.lorem.slug(),
            description: faker.lorem.slug(),
            permission: faker.lorem.slug(),
            privacy: faker.lorem.slug(),
            html_url: faker.internet.url(),
            repositories_url: faker.internet.url(),
            slug: faker.lorem.slug(),
            ldap_dn: faker.lorem.slug(),
          },
        })),
        head: {
          label: faker.lorem.slug(),
          ref: faker.lorem.slug(),
          repo: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          sha: faker.lorem.slug(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        base: {
          label: faker.lorem.slug(),
          ref: faker.lorem.slug(),
          repo: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          sha: faker.lorem.slug(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        },
        _links: {
          comments: {
            href: faker.lorem.slug(),
          },
          commits: {
            href: faker.lorem.slug(),
          },
          statuses: {
            href: faker.lorem.slug(),
          },
          html: {
            href: faker.lorem.slug(),
          },
          issue: {
            href: faker.lorem.slug(),
          },
          review_comments: {
            href: faker.lorem.slug(),
          },
          review_comment: {
            href: faker.lorem.slug(),
          },
          self: {
            href: faker.lorem.slug(),
          },
        },
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        auto_merge: {
          enabled_by: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          merge_method: faker.random.arrayElement([
            'merge',
            'squash',
            'rebase',
          ]),
          commit_title: faker.lorem.slug(),
          commit_message: faker.lorem.slug(),
        },
        draft: faker.datatype.boolean(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/pulls/:pullNumber/reviews': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        state: faker.lorem.slug(),
        html_url: faker.internet.url(),
        pull_request_url: faker.internet.url(),
        _links: {
          html: {
            href: faker.lorem.slug(),
          },
          pull_request: {
            href: faker.lorem.slug(),
          },
        },
        submitted_at: faker.date.recent(),
        commit_id: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
      })),
    },
    post: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        state: faker.lorem.slug(),
        html_url: faker.internet.url(),
        pull_request_url: faker.internet.url(),
        _links: {
          html: {
            href: faker.lorem.slug(),
          },
          pull_request: {
            href: faker.lorem.slug(),
          },
        },
        submitted_at: faker.date.recent(),
        commit_id: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
  },
  '/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId': {
    get: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        state: faker.lorem.slug(),
        html_url: faker.internet.url(),
        pull_request_url: faker.internet.url(),
        _links: {
          html: {
            href: faker.lorem.slug(),
          },
          pull_request: {
            href: faker.lorem.slug(),
          },
        },
        submitted_at: faker.date.recent(),
        commit_id: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    put: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        state: faker.lorem.slug(),
        html_url: faker.internet.url(),
        pull_request_url: faker.internet.url(),
        _links: {
          html: {
            href: faker.lorem.slug(),
          },
          pull_request: {
            href: faker.lorem.slug(),
          },
        },
        submitted_at: faker.date.recent(),
        commit_id: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
    delete: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        state: faker.lorem.slug(),
        html_url: faker.internet.url(),
        pull_request_url: faker.internet.url(),
        _links: {
          html: {
            href: faker.lorem.slug(),
          },
          pull_request: {
            href: faker.lorem.slug(),
          },
        },
        submitted_at: faker.date.recent(),
        commit_id: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
  },
  '/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/comments': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        pull_request_review_id: faker.datatype.number(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        diff_hunk: faker.lorem.slug(),
        path: faker.lorem.slug(),
        position: faker.datatype.number(),
        original_position: faker.datatype.number(),
        commit_id: faker.lorem.slug(),
        original_commit_id: faker.lorem.slug(),
        in_reply_to_id: faker.datatype.number(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        html_url: faker.internet.url(),
        pull_request_url: faker.internet.url(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        _links: {
          self: {
            href: faker.lorem.slug(),
          },
          html: {
            href: faker.lorem.slug(),
          },
          pull_request: {
            href: faker.lorem.slug(),
          },
        },
        body_text: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
        side: faker.random.arrayElement(['LEFT', 'RIGHT']),
        start_side: faker.random.arrayElement(['LEFT', 'RIGHT']),
        line: faker.datatype.number(),
        original_line: faker.datatype.number(),
        start_line: faker.datatype.number(),
        original_start_line: faker.datatype.number(),
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/dismissals': {
    put: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        state: faker.lorem.slug(),
        html_url: faker.internet.url(),
        pull_request_url: faker.internet.url(),
        _links: {
          html: {
            href: faker.lorem.slug(),
          },
          pull_request: {
            href: faker.lorem.slug(),
          },
        },
        submitted_at: faker.date.recent(),
        commit_id: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
  },
  '/repos/:owner/:repo/pulls/:pullNumber/reviews/:reviewId/events': {
    post: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        state: faker.lorem.slug(),
        html_url: faker.internet.url(),
        pull_request_url: faker.internet.url(),
        _links: {
          html: {
            href: faker.lorem.slug(),
          },
          pull_request: {
            href: faker.lorem.slug(),
          },
        },
        submitted_at: faker.date.recent(),
        commit_id: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
  },
  '/repos/:owner/:repo/pulls/:pullNumber/update-branch': {
    put: {
      202: {
        message: faker.lorem.slug(),
        url: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/readme': {
    get: {
      200: {
        type: faker.lorem.slug(),
        encoding: faker.lorem.slug(),
        size: faker.datatype.number(),
        name: faker.lorem.slug(),
        path: faker.lorem.slug(),
        content: faker.lorem.slug(),
        sha: faker.lorem.slug(),
        url: faker.internet.url(),
        git_url: faker.internet.url(),
        html_url: faker.internet.url(),
        download_url: faker.internet.url(),
        _links: {
          git: faker.internet.url(),
          html: faker.internet.url(),
          self: faker.internet.url(),
        },
        target: faker.lorem.slug(),
        submodule_git_url: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/readme/:dir': {
    get: {
      200: {
        type: faker.lorem.slug(),
        encoding: faker.lorem.slug(),
        size: faker.datatype.number(),
        name: faker.lorem.slug(),
        path: faker.lorem.slug(),
        content: faker.lorem.slug(),
        sha: faker.lorem.slug(),
        url: faker.internet.url(),
        git_url: faker.internet.url(),
        html_url: faker.internet.url(),
        download_url: faker.internet.url(),
        _links: {
          git: faker.internet.url(),
          html: faker.internet.url(),
          self: faker.internet.url(),
        },
        target: faker.lorem.slug(),
        submodule_git_url: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/releases': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        assets_url: faker.internet.url(),
        upload_url: faker.lorem.slug(),
        tarball_url: faker.internet.url(),
        zipball_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        tag_name: faker.lorem.slug(),
        target_commitish: faker.lorem.slug(),
        name: faker.lorem.slug(),
        body: faker.lorem.slug(),
        draft: faker.datatype.boolean(),
        prerelease: faker.datatype.boolean(),
        created_at: faker.date.recent(),
        published_at: faker.date.recent(),
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assets: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          url: faker.internet.url(),
          browser_download_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          label: faker.lorem.slug(),
          state: faker.random.arrayElement(['uploaded', 'open']),
          content_type: faker.lorem.slug(),
          size: faker.datatype.number(),
          download_count: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          uploader: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        })),
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        mentions_count: faker.datatype.number(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      201: {
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        assets_url: faker.internet.url(),
        upload_url: faker.lorem.slug(),
        tarball_url: faker.internet.url(),
        zipball_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        tag_name: faker.lorem.slug(),
        target_commitish: faker.lorem.slug(),
        name: faker.lorem.slug(),
        body: faker.lorem.slug(),
        draft: faker.datatype.boolean(),
        prerelease: faker.datatype.boolean(),
        created_at: faker.date.recent(),
        published_at: faker.date.recent(),
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assets: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          url: faker.internet.url(),
          browser_download_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          label: faker.lorem.slug(),
          state: faker.random.arrayElement(['uploaded', 'open']),
          content_type: faker.lorem.slug(),
          size: faker.datatype.number(),
          download_count: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          uploader: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        })),
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        mentions_count: faker.datatype.number(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/releases/assets/:assetId': {
    get: {
      200: {
        url: faker.internet.url(),
        browser_download_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        label: faker.lorem.slug(),
        state: faker.random.arrayElement(['uploaded', 'open']),
        content_type: faker.lorem.slug(),
        size: faker.datatype.number(),
        download_count: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        uploader: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
      },
      302: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      415: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        url: faker.internet.url(),
        browser_download_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        label: faker.lorem.slug(),
        state: faker.random.arrayElement(['uploaded', 'open']),
        content_type: faker.lorem.slug(),
        size: faker.datatype.number(),
        download_count: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        uploader: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
      },
    },
    delete: { 204: null },
  },
  '/repos/:owner/:repo/releases/generate-notes': {
    post: {
      200: {
        name: faker.lorem.slug(),
        body: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/releases/latest': {
    get: {
      200: {
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        assets_url: faker.internet.url(),
        upload_url: faker.lorem.slug(),
        tarball_url: faker.internet.url(),
        zipball_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        tag_name: faker.lorem.slug(),
        target_commitish: faker.lorem.slug(),
        name: faker.lorem.slug(),
        body: faker.lorem.slug(),
        draft: faker.datatype.boolean(),
        prerelease: faker.datatype.boolean(),
        created_at: faker.date.recent(),
        published_at: faker.date.recent(),
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assets: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          url: faker.internet.url(),
          browser_download_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          label: faker.lorem.slug(),
          state: faker.random.arrayElement(['uploaded', 'open']),
          content_type: faker.lorem.slug(),
          size: faker.datatype.number(),
          download_count: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          uploader: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        })),
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        mentions_count: faker.datatype.number(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
    },
  },
  '/repos/:owner/:repo/releases/tags/:tag': {
    get: {
      200: {
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        assets_url: faker.internet.url(),
        upload_url: faker.lorem.slug(),
        tarball_url: faker.internet.url(),
        zipball_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        tag_name: faker.lorem.slug(),
        target_commitish: faker.lorem.slug(),
        name: faker.lorem.slug(),
        body: faker.lorem.slug(),
        draft: faker.datatype.boolean(),
        prerelease: faker.datatype.boolean(),
        created_at: faker.date.recent(),
        published_at: faker.date.recent(),
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assets: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          url: faker.internet.url(),
          browser_download_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          label: faker.lorem.slug(),
          state: faker.random.arrayElement(['uploaded', 'open']),
          content_type: faker.lorem.slug(),
          size: faker.datatype.number(),
          download_count: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          uploader: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        })),
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        mentions_count: faker.datatype.number(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/releases/:releaseId': {
    get: {
      200: {
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        assets_url: faker.internet.url(),
        upload_url: faker.lorem.slug(),
        tarball_url: faker.internet.url(),
        zipball_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        tag_name: faker.lorem.slug(),
        target_commitish: faker.lorem.slug(),
        name: faker.lorem.slug(),
        body: faker.lorem.slug(),
        draft: faker.datatype.boolean(),
        prerelease: faker.datatype.boolean(),
        created_at: faker.date.recent(),
        published_at: faker.date.recent(),
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assets: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          url: faker.internet.url(),
          browser_download_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          label: faker.lorem.slug(),
          state: faker.random.arrayElement(['uploaded', 'open']),
          content_type: faker.lorem.slug(),
          size: faker.datatype.number(),
          download_count: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          uploader: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        })),
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        mentions_count: faker.datatype.number(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        assets_url: faker.internet.url(),
        upload_url: faker.lorem.slug(),
        tarball_url: faker.internet.url(),
        zipball_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        tag_name: faker.lorem.slug(),
        target_commitish: faker.lorem.slug(),
        name: faker.lorem.slug(),
        body: faker.lorem.slug(),
        draft: faker.datatype.boolean(),
        prerelease: faker.datatype.boolean(),
        created_at: faker.date.recent(),
        published_at: faker.date.recent(),
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assets: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          url: faker.internet.url(),
          browser_download_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          label: faker.lorem.slug(),
          state: faker.random.arrayElement(['uploaded', 'open']),
          content_type: faker.lorem.slug(),
          size: faker.datatype.number(),
          download_count: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          uploader: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
        })),
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        mentions_count: faker.datatype.number(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
    },
    delete: { 204: null },
  },
  '/repos/:owner/:repo/releases/:releaseId/assets': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        browser_download_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        label: faker.lorem.slug(),
        state: faker.random.arrayElement(['uploaded', 'open']),
        content_type: faker.lorem.slug(),
        size: faker.datatype.number(),
        download_count: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        uploader: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
      })),
    },
    post: {
      201: {
        url: faker.internet.url(),
        browser_download_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        label: faker.lorem.slug(),
        state: faker.random.arrayElement(['uploaded', 'open']),
        content_type: faker.lorem.slug(),
        size: faker.datatype.number(),
        download_count: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        uploader: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
      },
      422: null,
    },
  },
  '/repos/:owner/:repo/releases/:releaseId/reactions': {
    post: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        content: faker.random.arrayElement([
          '+1',
          '-1',
          'laugh',
          'confused',
          'heart',
          'hooray',
          'rocket',
          'eyes',
        ]),
        created_at: faker.date.recent(),
      },
      201: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        content: faker.random.arrayElement([
          '+1',
          '-1',
          'laugh',
          'confused',
          'heart',
          'hooray',
          'rocket',
          'eyes',
        ]),
        created_at: faker.date.recent(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/secret-scanning/alerts': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        number: faker.datatype.number(),
        created_at: faker.date.recent(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        locations_url: faker.internet.url(),
        state: faker.random.arrayElement(['open', 'resolved']),
        resolution: faker.random.arrayElement([
          null,
          'false_positive',
          'wont_fix',
          'revoked',
          'used_in_tests',
        ]),
        resolved_at: faker.date.recent(),
        resolved_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        secret_type: faker.lorem.slug(),
        secret: faker.lorem.slug(),
      })),
      404: null,
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/secret-scanning/alerts/:alertNumber': {
    get: {
      200: {
        number: faker.datatype.number(),
        created_at: faker.date.recent(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        locations_url: faker.internet.url(),
        state: faker.random.arrayElement(['open', 'resolved']),
        resolution: faker.random.arrayElement([
          null,
          'false_positive',
          'wont_fix',
          'revoked',
          'used_in_tests',
        ]),
        resolved_at: faker.date.recent(),
        resolved_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        secret_type: faker.lorem.slug(),
        secret: faker.lorem.slug(),
      },
      304: null,
      404: null,
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        number: faker.datatype.number(),
        created_at: faker.date.recent(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        locations_url: faker.internet.url(),
        state: faker.random.arrayElement(['open', 'resolved']),
        resolution: faker.random.arrayElement([
          null,
          'false_positive',
          'wont_fix',
          'revoked',
          'used_in_tests',
        ]),
        resolved_at: faker.date.recent(),
        resolved_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        secret_type: faker.lorem.slug(),
        secret: faker.lorem.slug(),
      },
      404: null,
      422: null,
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/secret-scanning/alerts/:alertNumber/locations': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        type: faker.random.arrayElement(['commit']),
        details: null,
      })),
      404: null,
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/stargazers': {
    get: {
      200: null,
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repos/:owner/:repo/stats/code_frequency': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ =>
        [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.datatype.number())
      ),
      202: {},
      204: null,
    },
  },
  '/repos/:owner/:repo/stats/commit_activity': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        days: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.datatype.number()),
        total: faker.datatype.number(),
        week: faker.datatype.number(),
      })),
      202: {},
      204: null,
    },
  },
  '/repos/:owner/:repo/stats/contributors': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        total: faker.datatype.number(),
        weeks: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          w: faker.datatype.number(),
          a: faker.datatype.number(),
          d: faker.datatype.number(),
          c: faker.datatype.number(),
        })),
      })),
      202: {},
      204: null,
    },
  },
  '/repos/:owner/:repo/stats/participation': {
    get: {
      200: {
        all: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.datatype.number()),
        owner: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.datatype.number()),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/repos/:owner/:repo/stats/punch_card': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ =>
        [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.datatype.number())
      ),
      204: null,
    },
  },
  '/repos/:owner/:repo/statuses/:sha': {
    post: {
      201: {
        url: faker.lorem.slug(),
        avatar_url: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        state: faker.lorem.slug(),
        description: faker.lorem.slug(),
        target_url: faker.lorem.slug(),
        context: faker.lorem.slug(),
        created_at: faker.lorem.slug(),
        updated_at: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
      },
    },
  },
  '/repos/:owner/:repo/subscribers': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        email: faker.lorem.slug(),
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        starred_at: faker.lorem.slug(),
      })),
    },
  },
  '/repos/:owner/:repo/subscription': {
    get: {
      200: {
        subscribed: faker.datatype.boolean(),
        ignored: faker.datatype.boolean(),
        reason: faker.lorem.slug(),
        created_at: faker.date.recent(),
        url: faker.internet.url(),
        repository_url: faker.internet.url(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: null,
    },
    put: {
      200: {
        subscribed: faker.datatype.boolean(),
        ignored: faker.datatype.boolean(),
        reason: faker.lorem.slug(),
        created_at: faker.date.recent(),
        url: faker.internet.url(),
        repository_url: faker.internet.url(),
      },
    },
    delete: { 204: null },
  },
  '/repos/:owner/:repo/tags': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        commit: {
          sha: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        zipball_url: faker.internet.url(),
        tarball_url: faker.internet.url(),
        node_id: faker.lorem.slug(),
      })),
    },
  },
  '/repos/:owner/:repo/tarball/:ref': { get: { 302: null } },
  '/repos/:owner/:repo/teams': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        slug: faker.lorem.slug(),
        description: faker.lorem.slug(),
        privacy: faker.lorem.slug(),
        permission: faker.lorem.slug(),
        permissions: {
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          admin: faker.datatype.boolean(),
        },
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        members_url: faker.lorem.slug(),
        repositories_url: faker.internet.url(),
        parent: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          html_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          slug: faker.lorem.slug(),
          ldap_dn: faker.lorem.slug(),
        },
      })),
    },
  },
  '/repos/:owner/:repo/topics': {
    get: {
      200: {
        names: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    put: {
      200: {
        names: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
  },
  '/repos/:owner/:repo/transfer': {
    post: {
      202: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        full_name: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.lorem.slug(),
        assignees_url: faker.lorem.slug(),
        blobs_url: faker.lorem.slug(),
        branches_url: faker.lorem.slug(),
        collaborators_url: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        compare_url: faker.lorem.slug(),
        contents_url: faker.lorem.slug(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.lorem.slug(),
        git_refs_url: faker.lorem.slug(),
        git_tags_url: faker.lorem.slug(),
        git_url: faker.lorem.slug(),
        issue_comment_url: faker.lorem.slug(),
        issue_events_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        labels_url: faker.lorem.slug(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        pulls_url: faker.lorem.slug(),
        releases_url: faker.lorem.slug(),
        ssh_url: faker.lorem.slug(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.lorem.slug(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.lorem.slug(),
        clone_url: faker.lorem.slug(),
        mirror_url: faker.lorem.slug(),
        hooks_url: faker.internet.url(),
        svn_url: faker.lorem.slug(),
        homepage: faker.lorem.slug(),
        language: faker.lorem.slug(),
        forks_count: faker.datatype.number(),
        stargazers_count: faker.datatype.number(),
        watchers_count: faker.datatype.number(),
        size: faker.datatype.number(),
        default_branch: faker.lorem.slug(),
        open_issues_count: faker.datatype.number(),
        is_template: faker.datatype.boolean(),
        topics: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
        pushed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        template_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        temp_clone_token: faker.lorem.slug(),
        delete_branch_on_merge: faker.datatype.boolean(),
        subscribers_count: faker.datatype.number(),
        network_count: faker.datatype.number(),
        code_of_conduct: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          body: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          spdx_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
        },
        forks: faker.datatype.number(),
        open_issues: faker.datatype.number(),
        watchers: faker.datatype.number(),
        allow_forking: faker.datatype.boolean(),
      },
    },
  },
  '/repos/:owner/:repo/zipball/:ref': { get: { 302: null } },
  '/repos/:templateOwner/:templateRepo/generate': {
    post: {
      201: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        full_name: faker.lorem.slug(),
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          spdx_id: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        forks: faker.datatype.number(),
        permissions: {
          admin: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
        },
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.lorem.slug(),
        assignees_url: faker.lorem.slug(),
        blobs_url: faker.lorem.slug(),
        branches_url: faker.lorem.slug(),
        collaborators_url: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        compare_url: faker.lorem.slug(),
        contents_url: faker.lorem.slug(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.lorem.slug(),
        git_refs_url: faker.lorem.slug(),
        git_tags_url: faker.lorem.slug(),
        git_url: faker.lorem.slug(),
        issue_comment_url: faker.lorem.slug(),
        issue_events_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        labels_url: faker.lorem.slug(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        pulls_url: faker.lorem.slug(),
        releases_url: faker.lorem.slug(),
        ssh_url: faker.lorem.slug(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.lorem.slug(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.lorem.slug(),
        clone_url: faker.lorem.slug(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.internet.url(),
        language: faker.lorem.slug(),
        forks_count: faker.datatype.number(),
        stargazers_count: faker.datatype.number(),
        watchers_count: faker.datatype.number(),
        size: faker.datatype.number(),
        default_branch: faker.lorem.slug(),
        open_issues_count: faker.datatype.number(),
        is_template: faker.datatype.boolean(),
        topics: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
        pushed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        allow_rebase_merge: faker.datatype.boolean(),
        template_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.lorem.slug(),
            gravatar_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            followers_url: faker.lorem.slug(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.lorem.slug(),
            organizations_url: faker.lorem.slug(),
            repos_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.lorem.slug(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.lorem.slug(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.lorem.slug(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.lorem.slug(),
          deployments_url: faker.lorem.slug(),
          downloads_url: faker.lorem.slug(),
          events_url: faker.lorem.slug(),
          forks_url: faker.lorem.slug(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.lorem.slug(),
          merges_url: faker.lorem.slug(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.lorem.slug(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.lorem.slug(),
          subscription_url: faker.lorem.slug(),
          tags_url: faker.lorem.slug(),
          teams_url: faker.lorem.slug(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.lorem.slug(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.lorem.slug(),
          created_at: faker.lorem.slug(),
          updated_at: faker.lorem.slug(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
        },
        temp_clone_token: faker.lorem.slug(),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.datatype.number(),
        network_count: faker.datatype.number(),
        open_issues: faker.datatype.number(),
        watchers: faker.datatype.number(),
        master_branch: faker.lorem.slug(),
        starred_at: faker.lorem.slug(),
      },
    },
  },
  '/repositories': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        full_name: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.lorem.slug(),
        assignees_url: faker.lorem.slug(),
        blobs_url: faker.lorem.slug(),
        branches_url: faker.lorem.slug(),
        collaborators_url: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        compare_url: faker.lorem.slug(),
        contents_url: faker.lorem.slug(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.lorem.slug(),
        git_refs_url: faker.lorem.slug(),
        git_tags_url: faker.lorem.slug(),
        git_url: faker.lorem.slug(),
        issue_comment_url: faker.lorem.slug(),
        issue_events_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        labels_url: faker.lorem.slug(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        pulls_url: faker.lorem.slug(),
        releases_url: faker.lorem.slug(),
        ssh_url: faker.lorem.slug(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.lorem.slug(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.lorem.slug(),
        clone_url: faker.lorem.slug(),
        mirror_url: faker.lorem.slug(),
        hooks_url: faker.internet.url(),
        svn_url: faker.lorem.slug(),
        homepage: faker.lorem.slug(),
        language: faker.lorem.slug(),
        forks_count: faker.datatype.number(),
        stargazers_count: faker.datatype.number(),
        watchers_count: faker.datatype.number(),
        size: faker.datatype.number(),
        default_branch: faker.lorem.slug(),
        open_issues_count: faker.datatype.number(),
        is_template: faker.datatype.boolean(),
        topics: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
        pushed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        template_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        temp_clone_token: faker.lorem.slug(),
        delete_branch_on_merge: faker.datatype.boolean(),
        subscribers_count: faker.datatype.number(),
        network_count: faker.datatype.number(),
        code_of_conduct: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          body: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          spdx_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
        },
        forks: faker.datatype.number(),
        open_issues: faker.datatype.number(),
        watchers: faker.datatype.number(),
        allow_forking: faker.datatype.boolean(),
      })),
      304: null,
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/repositories/:repositoryId/environments/:environmentName/secrets': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        secrets: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
        })),
      },
    },
  },
  '/repositories/:repositoryId/environments/:environmentName/secrets/public-key':
    {
      get: {
        200: {
          key_id: faker.lorem.slug(),
          key: faker.lorem.slug(),
          id: faker.datatype.number(),
          url: faker.lorem.slug(),
          title: faker.lorem.slug(),
          created_at: faker.lorem.slug(),
        },
      },
    },
  '/repositories/:repositoryId/environments/:environmentName/secrets/:secretName':
    {
      get: {
        200: {
          name: faker.lorem.slug(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
        },
      },
      put: { 201: {}, 204: null },
      delete: { 204: null },
    },
  '/search/code': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        incomplete_results: faker.datatype.boolean(),
        items: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          path: faker.lorem.slug(),
          sha: faker.lorem.slug(),
          url: faker.internet.url(),
          git_url: faker.internet.url(),
          html_url: faker.internet.url(),
          repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.internet.url(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              license: {
                key: faker.lorem.slug(),
                name: faker.lorem.slug(),
                url: faker.internet.url(),
                spdx_id: faker.lorem.slug(),
                node_id: faker.lorem.slug(),
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.date.recent(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                name: faker.lorem.slug(),
                full_name: faker.lorem.slug(),
                owner: {
                  login: faker.lorem.slug(),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(),
                  avatar_url: faker.lorem.slug(),
                  gravatar_id: faker.lorem.slug(),
                  url: faker.lorem.slug(),
                  html_url: faker.lorem.slug(),
                  followers_url: faker.lorem.slug(),
                  following_url: faker.lorem.slug(),
                  gists_url: faker.lorem.slug(),
                  starred_url: faker.lorem.slug(),
                  subscriptions_url: faker.lorem.slug(),
                  organizations_url: faker.lorem.slug(),
                  repos_url: faker.lorem.slug(),
                  events_url: faker.lorem.slug(),
                  received_events_url: faker.lorem.slug(),
                  type: faker.lorem.slug(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.lorem.slug(),
                description: faker.lorem.slug(),
                fork: faker.datatype.boolean(),
                url: faker.lorem.slug(),
                archive_url: faker.lorem.slug(),
                assignees_url: faker.lorem.slug(),
                blobs_url: faker.lorem.slug(),
                branches_url: faker.lorem.slug(),
                collaborators_url: faker.lorem.slug(),
                comments_url: faker.lorem.slug(),
                commits_url: faker.lorem.slug(),
                compare_url: faker.lorem.slug(),
                contents_url: faker.lorem.slug(),
                contributors_url: faker.lorem.slug(),
                deployments_url: faker.lorem.slug(),
                downloads_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                forks_url: faker.lorem.slug(),
                git_commits_url: faker.lorem.slug(),
                git_refs_url: faker.lorem.slug(),
                git_tags_url: faker.lorem.slug(),
                git_url: faker.lorem.slug(),
                issue_comment_url: faker.lorem.slug(),
                issue_events_url: faker.lorem.slug(),
                issues_url: faker.lorem.slug(),
                keys_url: faker.lorem.slug(),
                labels_url: faker.lorem.slug(),
                languages_url: faker.lorem.slug(),
                merges_url: faker.lorem.slug(),
                milestones_url: faker.lorem.slug(),
                notifications_url: faker.lorem.slug(),
                pulls_url: faker.lorem.slug(),
                releases_url: faker.lorem.slug(),
                ssh_url: faker.lorem.slug(),
                stargazers_url: faker.lorem.slug(),
                statuses_url: faker.lorem.slug(),
                subscribers_url: faker.lorem.slug(),
                subscription_url: faker.lorem.slug(),
                tags_url: faker.lorem.slug(),
                teams_url: faker.lorem.slug(),
                trees_url: faker.lorem.slug(),
                clone_url: faker.lorem.slug(),
                mirror_url: faker.lorem.slug(),
                hooks_url: faker.lorem.slug(),
                svn_url: faker.lorem.slug(),
                homepage: faker.lorem.slug(),
                language: faker.lorem.slug(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(),
                pushed_at: faker.lorem.slug(),
                created_at: faker.lorem.slug(),
                updated_at: faker.lorem.slug(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(),
              starred_at: faker.lorem.slug(),
            },
            temp_clone_token: faker.lorem.slug(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              body: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              spdx_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          },
          score: faker.datatype.number(),
          file_size: faker.datatype.number(),
          language: faker.lorem.slug(),
          last_modified_at: faker.date.recent(),
          line_numbers: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          text_matches: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            object_url: faker.lorem.slug(),
            object_type: faker.lorem.slug(),
            property: faker.lorem.slug(),
            fragment: faker.lorem.slug(),
            matches: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              text: faker.lorem.slug(),
              indices: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.datatype.number()),
            })),
          })),
        })),
      },
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/search/commits': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        incomplete_results: faker.datatype.boolean(),
        items: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          url: faker.internet.url(),
          sha: faker.lorem.slug(),
          html_url: faker.internet.url(),
          comments_url: faker.internet.url(),
          commit: {
            author: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              date: faker.date.recent(),
            },
            committer: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              date: faker.lorem.slug(),
            },
            comment_count: faker.datatype.number(),
            message: faker.lorem.slug(),
            tree: {
              sha: faker.lorem.slug(),
              url: faker.internet.url(),
            },
            url: faker.internet.url(),
            verification: {
              verified: faker.datatype.boolean(),
              reason: faker.lorem.slug(),
              payload: faker.lorem.slug(),
              signature: faker.lorem.slug(),
            },
          },
          author: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          committer: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            date: faker.lorem.slug(),
          },
          parents: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            sha: faker.lorem.slug(),
          })),
          repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.internet.url(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              license: {
                key: faker.lorem.slug(),
                name: faker.lorem.slug(),
                url: faker.internet.url(),
                spdx_id: faker.lorem.slug(),
                node_id: faker.lorem.slug(),
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.date.recent(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                name: faker.lorem.slug(),
                full_name: faker.lorem.slug(),
                owner: {
                  login: faker.lorem.slug(),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(),
                  avatar_url: faker.lorem.slug(),
                  gravatar_id: faker.lorem.slug(),
                  url: faker.lorem.slug(),
                  html_url: faker.lorem.slug(),
                  followers_url: faker.lorem.slug(),
                  following_url: faker.lorem.slug(),
                  gists_url: faker.lorem.slug(),
                  starred_url: faker.lorem.slug(),
                  subscriptions_url: faker.lorem.slug(),
                  organizations_url: faker.lorem.slug(),
                  repos_url: faker.lorem.slug(),
                  events_url: faker.lorem.slug(),
                  received_events_url: faker.lorem.slug(),
                  type: faker.lorem.slug(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.lorem.slug(),
                description: faker.lorem.slug(),
                fork: faker.datatype.boolean(),
                url: faker.lorem.slug(),
                archive_url: faker.lorem.slug(),
                assignees_url: faker.lorem.slug(),
                blobs_url: faker.lorem.slug(),
                branches_url: faker.lorem.slug(),
                collaborators_url: faker.lorem.slug(),
                comments_url: faker.lorem.slug(),
                commits_url: faker.lorem.slug(),
                compare_url: faker.lorem.slug(),
                contents_url: faker.lorem.slug(),
                contributors_url: faker.lorem.slug(),
                deployments_url: faker.lorem.slug(),
                downloads_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                forks_url: faker.lorem.slug(),
                git_commits_url: faker.lorem.slug(),
                git_refs_url: faker.lorem.slug(),
                git_tags_url: faker.lorem.slug(),
                git_url: faker.lorem.slug(),
                issue_comment_url: faker.lorem.slug(),
                issue_events_url: faker.lorem.slug(),
                issues_url: faker.lorem.slug(),
                keys_url: faker.lorem.slug(),
                labels_url: faker.lorem.slug(),
                languages_url: faker.lorem.slug(),
                merges_url: faker.lorem.slug(),
                milestones_url: faker.lorem.slug(),
                notifications_url: faker.lorem.slug(),
                pulls_url: faker.lorem.slug(),
                releases_url: faker.lorem.slug(),
                ssh_url: faker.lorem.slug(),
                stargazers_url: faker.lorem.slug(),
                statuses_url: faker.lorem.slug(),
                subscribers_url: faker.lorem.slug(),
                subscription_url: faker.lorem.slug(),
                tags_url: faker.lorem.slug(),
                teams_url: faker.lorem.slug(),
                trees_url: faker.lorem.slug(),
                clone_url: faker.lorem.slug(),
                mirror_url: faker.lorem.slug(),
                hooks_url: faker.lorem.slug(),
                svn_url: faker.lorem.slug(),
                homepage: faker.lorem.slug(),
                language: faker.lorem.slug(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(),
                pushed_at: faker.lorem.slug(),
                created_at: faker.lorem.slug(),
                updated_at: faker.lorem.slug(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(),
              starred_at: faker.lorem.slug(),
            },
            temp_clone_token: faker.lorem.slug(),
            delete_branch_on_merge: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            code_of_conduct: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              body: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              spdx_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            allow_forking: faker.datatype.boolean(),
          },
          score: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          text_matches: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            object_url: faker.lorem.slug(),
            object_type: faker.lorem.slug(),
            property: faker.lorem.slug(),
            fragment: faker.lorem.slug(),
            matches: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              text: faker.lorem.slug(),
              indices: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.datatype.number()),
            })),
          })),
        })),
      },
      304: null,
    },
  },
  '/search/issues': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        incomplete_results: faker.datatype.boolean(),
        items: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          url: faker.internet.url(),
          repository_url: faker.internet.url(),
          labels_url: faker.lorem.slug(),
          comments_url: faker.internet.url(),
          events_url: faker.internet.url(),
          html_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          number: faker.datatype.number(),
          title: faker.lorem.slug(),
          locked: faker.datatype.boolean(),
          active_lock_reason: faker.lorem.slug(),
          assignees: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          })),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          labels: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            name: faker.lorem.slug(),
            color: faker.lorem.slug(),
            default: faker.datatype.boolean(),
            description: faker.lorem.slug(),
          })),
          state: faker.lorem.slug(),
          assignee: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          milestone: {
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            labels_url: faker.internet.url(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            number: faker.datatype.number(),
            state: faker.random.arrayElement(['open', 'closed']),
            title: faker.lorem.slug(),
            description: faker.lorem.slug(),
            creator: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            open_issues: faker.datatype.number(),
            closed_issues: faker.datatype.number(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            closed_at: faker.date.recent(),
            due_on: faker.date.recent(),
          },
          comments: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          closed_at: faker.date.recent(),
          text_matches: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            object_url: faker.lorem.slug(),
            object_type: faker.lorem.slug(),
            property: faker.lorem.slug(),
            fragment: faker.lorem.slug(),
            matches: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              text: faker.lorem.slug(),
              indices: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.datatype.number()),
            })),
          })),
          pull_request: {
            merged_at: faker.date.recent(),
            diff_url: faker.internet.url(),
            html_url: faker.internet.url(),
            patch_url: faker.internet.url(),
            url: faker.internet.url(),
          },
          body: faker.lorem.slug(),
          score: faker.datatype.number(),
          author_association: faker.random.arrayElement([
            'COLLABORATOR',
            'CONTRIBUTOR',
            'FIRST_TIMER',
            'FIRST_TIME_CONTRIBUTOR',
            'MANNEQUIN',
            'MEMBER',
            'NONE',
            'OWNER',
          ]),
          draft: faker.datatype.boolean(),
          repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          body_html: faker.lorem.slug(),
          body_text: faker.lorem.slug(),
          timeline_url: faker.internet.url(),
          performed_via_github_app: {
            id: faker.datatype.number(),
            slug: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            name: faker.lorem.slug(),
            description: faker.lorem.slug(),
            external_url: faker.internet.url(),
            html_url: faker.internet.url(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            permissions: {
              issues: faker.lorem.slug(),
              checks: faker.lorem.slug(),
              metadata: faker.lorem.slug(),
              contents: faker.lorem.slug(),
              deployments: faker.lorem.slug(),
            },
            events: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            installations_count: faker.datatype.number(),
            client_id: faker.lorem.slug(),
            client_secret: faker.lorem.slug(),
            webhook_secret: faker.lorem.slug(),
            pem: faker.lorem.slug(),
          },
          reactions: {
            url: faker.internet.url(),
            total_count: faker.datatype.number(),
            '+1': faker.datatype.number(),
            '-1': faker.datatype.number(),
            laugh: faker.datatype.number(),
            confused: faker.datatype.number(),
            heart: faker.datatype.number(),
            hooray: faker.datatype.number(),
            eyes: faker.datatype.number(),
            rocket: faker.datatype.number(),
          },
        })),
      },
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/search/labels': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        incomplete_results: faker.datatype.boolean(),
        items: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          name: faker.lorem.slug(),
          color: faker.lorem.slug(),
          default: faker.datatype.boolean(),
          description: faker.lorem.slug(),
          score: faker.datatype.number(),
          text_matches: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            object_url: faker.lorem.slug(),
            object_type: faker.lorem.slug(),
            property: faker.lorem.slug(),
            fragment: faker.lorem.slug(),
            matches: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              text: faker.lorem.slug(),
              indices: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.datatype.number()),
            })),
          })),
        })),
      },
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/search/repositories': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        incomplete_results: faker.datatype.boolean(),
        items: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          pushed_at: faker.date.recent(),
          homepage: faker.internet.url(),
          size: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          open_issues_count: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          default_branch: faker.lorem.slug(),
          score: faker.datatype.number(),
          forks_url: faker.internet.url(),
          keys_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          teams_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          issue_events_url: faker.lorem.slug(),
          events_url: faker.internet.url(),
          assignees_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          tags_url: faker.internet.url(),
          blobs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          trees_url: faker.lorem.slug(),
          statuses_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          stargazers_url: faker.internet.url(),
          contributors_url: faker.internet.url(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          commits_url: faker.lorem.slug(),
          git_commits_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          merges_url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          downloads_url: faker.internet.url(),
          issues_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          deployments_url: faker.internet.url(),
          git_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          svn_url: faker.internet.url(),
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          mirror_url: faker.internet.url(),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          text_matches: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            object_url: faker.lorem.slug(),
            object_type: faker.lorem.slug(),
            property: faker.lorem.slug(),
            fragment: faker.lorem.slug(),
            matches: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              text: faker.lorem.slug(),
              indices: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.datatype.number()),
            })),
          })),
          temp_clone_token: faker.lorem.slug(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_rebase_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          is_template: faker.datatype.boolean(),
        })),
      },
      304: null,
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/search/topics': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        incomplete_results: faker.datatype.boolean(),
        items: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          display_name: faker.lorem.slug(),
          short_description: faker.lorem.slug(),
          description: faker.lorem.slug(),
          created_by: faker.lorem.slug(),
          released: faker.lorem.slug(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          featured: faker.datatype.boolean(),
          curated: faker.datatype.boolean(),
          score: faker.datatype.number(),
          repository_count: faker.datatype.number(),
          logo_url: faker.internet.url(),
          text_matches: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            object_url: faker.lorem.slug(),
            object_type: faker.lorem.slug(),
            property: faker.lorem.slug(),
            fragment: faker.lorem.slug(),
            matches: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              text: faker.lorem.slug(),
              indices: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.datatype.number()),
            })),
          })),
          related: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            topic_relation: {
              id: faker.datatype.number(),
              name: faker.lorem.slug(),
              topic_id: faker.datatype.number(),
              relation_type: faker.lorem.slug(),
            },
          })),
          aliases: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            topic_relation: {
              id: faker.datatype.number(),
              name: faker.lorem.slug(),
              topic_id: faker.datatype.number(),
              relation_type: faker.lorem.slug(),
            },
          })),
        })),
      },
      304: null,
    },
  },
  '/search/users': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        incomplete_results: faker.datatype.boolean(),
        items: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          score: faker.datatype.number(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          events_url: faker.lorem.slug(),
          public_repos: faker.datatype.number(),
          public_gists: faker.datatype.number(),
          followers: faker.datatype.number(),
          following: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          name: faker.lorem.slug(),
          bio: faker.lorem.slug(),
          email: faker.internet.exampleEmail(),
          location: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          hireable: faker.datatype.boolean(),
          text_matches: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            object_url: faker.lorem.slug(),
            object_type: faker.lorem.slug(),
            property: faker.lorem.slug(),
            fragment: faker.lorem.slug(),
            matches: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              text: faker.lorem.slug(),
              indices: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.datatype.number()),
            })),
          })),
          blog: faker.lorem.slug(),
          company: faker.lorem.slug(),
          suspended_at: faker.date.recent(),
        })),
      },
      304: null,
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
      503: {
        code: faker.lorem.slug(),
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/setup/api/configcheck': {
    get: {
      200: {
        status: faker.lorem.slug(),
        progress: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          status: faker.lorem.slug(),
          key: faker.lorem.slug(),
        })),
      },
    },
  },
  '/setup/api/configure': { post: { 202: null } },
  '/setup/api/maintenance': {
    get: {
      200: {
        status: faker.lorem.slug(),
        scheduled_time: faker.lorem.slug(),
        connection_services: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          number: faker.datatype.number(),
        })),
      },
    },
    post: {
      200: {
        status: faker.lorem.slug(),
        scheduled_time: faker.lorem.slug(),
        connection_services: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          number: faker.datatype.number(),
        })),
      },
    },
  },
  '/setup/api/settings': {
    get: {
      200: {
        enterprise: {
          private_mode: faker.datatype.boolean(),
          public_pages: faker.datatype.boolean(),
          subdomain_isolation: faker.datatype.boolean(),
          signup_enabled: faker.datatype.boolean(),
          github_hostname: faker.lorem.slug(),
          identicons_host: faker.lorem.slug(),
          http_proxy: faker.lorem.slug(),
          auth_mode: faker.lorem.slug(),
          expire_sessions: faker.datatype.boolean(),
          admin_password: faker.lorem.slug(),
          configuration_id: faker.datatype.number(),
          configuration_run_count: faker.datatype.number(),
          avatar: {
            enabled: faker.datatype.boolean(),
            uri: faker.lorem.slug(),
          },
          customer: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            uuid: faker.lorem.slug(),
            secret_key_data: faker.lorem.slug(),
            public_key_data: faker.lorem.slug(),
          },
          license: {
            seats: faker.datatype.number(),
            evaluation: faker.datatype.boolean(),
            perpetual: faker.datatype.boolean(),
            unlimited_seating: faker.datatype.boolean(),
            support_key: faker.lorem.slug(),
            ssh_allowed: faker.datatype.boolean(),
            cluster_support: faker.datatype.boolean(),
            expire_at: faker.lorem.slug(),
          },
          github_ssl: {
            enabled: faker.datatype.boolean(),
            cert: faker.lorem.slug(),
            key: faker.lorem.slug(),
          },
          ldap: {
            host: faker.lorem.slug(),
            port: faker.datatype.number(),
            base: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            uid: faker.lorem.slug(),
            bind_dn: faker.lorem.slug(),
            password: faker.lorem.slug(),
            method: faker.lorem.slug(),
            search_strategy: faker.lorem.slug(),
            user_groups: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            admin_group: faker.lorem.slug(),
            virtual_attribute_enabled: faker.datatype.boolean(),
            recursive_group_search: faker.datatype.boolean(),
            posix_support: faker.datatype.boolean(),
            user_sync_emails: faker.datatype.boolean(),
            user_sync_keys: faker.datatype.boolean(),
            user_sync_interval: faker.datatype.number(),
            team_sync_interval: faker.datatype.number(),
            sync_enabled: faker.datatype.boolean(),
            reconciliation: {
              user: faker.lorem.slug(),
              org: faker.lorem.slug(),
            },
            profile: {
              uid: faker.lorem.slug(),
              name: faker.lorem.slug(),
              mail: faker.lorem.slug(),
              key: faker.lorem.slug(),
            },
          },
          cas: {
            url: faker.lorem.slug(),
          },
          saml: {
            sso_url: faker.lorem.slug(),
            certificate: faker.lorem.slug(),
            certificate_path: faker.lorem.slug(),
            issuer: faker.lorem.slug(),
            idp_initiated_sso: faker.datatype.boolean(),
            disable_admin_demote: faker.datatype.boolean(),
          },
          github_oauth: {
            client_id: faker.lorem.slug(),
            client_secret: faker.lorem.slug(),
            organization_name: faker.lorem.slug(),
            organization_team: faker.lorem.slug(),
          },
          smtp: {
            enabled: faker.datatype.boolean(),
            address: faker.lorem.slug(),
            authentication: faker.lorem.slug(),
            port: faker.lorem.slug(),
            domain: faker.lorem.slug(),
            username: faker.lorem.slug(),
            user_name: faker.lorem.slug(),
            enable_starttls_auto: faker.datatype.boolean(),
            password: faker.lorem.slug(),
            'discard-to-noreply-address': faker.datatype.boolean(),
            support_address: faker.lorem.slug(),
            support_address_type: faker.lorem.slug(),
            noreply_address: faker.lorem.slug(),
          },
          ntp: {
            primary_server: faker.lorem.slug(),
            secondary_server: faker.lorem.slug(),
          },
          timezone: faker.lorem.slug(),
          snmp: {
            enabled: faker.datatype.boolean(),
            community: faker.lorem.slug(),
          },
          syslog: {
            enabled: faker.datatype.boolean(),
            server: faker.lorem.slug(),
            protocol_name: faker.lorem.slug(),
          },
          assets: faker.lorem.slug(),
          pages: {
            enabled: faker.datatype.boolean(),
          },
          collectd: {
            enabled: faker.datatype.boolean(),
            server: faker.lorem.slug(),
            port: faker.datatype.number(),
            encryption: faker.lorem.slug(),
            username: faker.lorem.slug(),
            password: faker.lorem.slug(),
          },
          mapping: {
            enabled: faker.datatype.boolean(),
            tileserver: faker.lorem.slug(),
            basemap: faker.lorem.slug(),
            token: faker.lorem.slug(),
          },
          load_balancer: faker.lorem.slug(),
        },
        run_list: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
    put: { 204: null },
  },
  '/setup/api/settings/authorized-keys': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        key: faker.lorem.slug(),
        'pretty-print': faker.lorem.slug(),
      })),
    },
    post: {
      201: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        key: faker.lorem.slug(),
        'pretty-print': faker.lorem.slug(),
      })),
    },
    delete: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        key: faker.lorem.slug(),
        'pretty-print': faker.lorem.slug(),
      })),
    },
  },
  '/setup/api/start': { post: { 202: null } },
  '/setup/api/upgrade': { post: { 202: null } },
  '/teams/:teamId': {
    get: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        name: faker.lorem.slug(),
        slug: faker.lorem.slug(),
        description: faker.lorem.slug(),
        privacy: faker.random.arrayElement(['closed', 'secret']),
        permission: faker.lorem.slug(),
        members_url: faker.lorem.slug(),
        repositories_url: faker.internet.url(),
        parent: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          html_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          slug: faker.lorem.slug(),
          ldap_dn: faker.lorem.slug(),
        },
        members_count: faker.datatype.number(),
        repos_count: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        organization: {
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          hooks_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          members_url: faker.lorem.slug(),
          public_members_url: faker.lorem.slug(),
          avatar_url: faker.lorem.slug(),
          description: faker.lorem.slug(),
          name: faker.lorem.slug(),
          company: faker.lorem.slug(),
          blog: faker.internet.url(),
          location: faker.lorem.slug(),
          email: faker.internet.exampleEmail(),
          twitter_username: faker.lorem.slug(),
          is_verified: faker.datatype.boolean(),
          has_organization_projects: faker.datatype.boolean(),
          has_repository_projects: faker.datatype.boolean(),
          public_repos: faker.datatype.number(),
          public_gists: faker.datatype.number(),
          followers: faker.datatype.number(),
          following: faker.datatype.number(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          type: faker.lorem.slug(),
          total_private_repos: faker.datatype.number(),
          owned_private_repos: faker.datatype.number(),
          private_gists: faker.datatype.number(),
          disk_usage: faker.datatype.number(),
          collaborators: faker.datatype.number(),
          billing_email: faker.internet.exampleEmail(),
          plan: {
            name: faker.lorem.slug(),
            space: faker.datatype.number(),
            private_repos: faker.datatype.number(),
            filled_seats: faker.datatype.number(),
            seats: faker.datatype.number(),
          },
          default_repository_permission: faker.lorem.slug(),
          members_can_create_repositories: faker.datatype.boolean(),
          two_factor_requirement_enabled: faker.datatype.boolean(),
          members_allowed_repository_creation_type: faker.lorem.slug(),
          members_can_create_public_repositories: faker.datatype.boolean(),
          members_can_create_private_repositories: faker.datatype.boolean(),
          members_can_create_internal_repositories: faker.datatype.boolean(),
          members_can_create_pages: faker.datatype.boolean(),
          members_can_create_public_pages: faker.datatype.boolean(),
          members_can_create_private_pages: faker.datatype.boolean(),
          members_can_fork_private_repositories: faker.datatype.boolean(),
          updated_at: faker.date.recent(),
        },
        ldap_dn: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        name: faker.lorem.slug(),
        slug: faker.lorem.slug(),
        description: faker.lorem.slug(),
        privacy: faker.random.arrayElement(['closed', 'secret']),
        permission: faker.lorem.slug(),
        members_url: faker.lorem.slug(),
        repositories_url: faker.internet.url(),
        parent: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          html_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          slug: faker.lorem.slug(),
          ldap_dn: faker.lorem.slug(),
        },
        members_count: faker.datatype.number(),
        repos_count: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        organization: {
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          hooks_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          members_url: faker.lorem.slug(),
          public_members_url: faker.lorem.slug(),
          avatar_url: faker.lorem.slug(),
          description: faker.lorem.slug(),
          name: faker.lorem.slug(),
          company: faker.lorem.slug(),
          blog: faker.internet.url(),
          location: faker.lorem.slug(),
          email: faker.internet.exampleEmail(),
          twitter_username: faker.lorem.slug(),
          is_verified: faker.datatype.boolean(),
          has_organization_projects: faker.datatype.boolean(),
          has_repository_projects: faker.datatype.boolean(),
          public_repos: faker.datatype.number(),
          public_gists: faker.datatype.number(),
          followers: faker.datatype.number(),
          following: faker.datatype.number(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          type: faker.lorem.slug(),
          total_private_repos: faker.datatype.number(),
          owned_private_repos: faker.datatype.number(),
          private_gists: faker.datatype.number(),
          disk_usage: faker.datatype.number(),
          collaborators: faker.datatype.number(),
          billing_email: faker.internet.exampleEmail(),
          plan: {
            name: faker.lorem.slug(),
            space: faker.datatype.number(),
            private_repos: faker.datatype.number(),
            filled_seats: faker.datatype.number(),
            seats: faker.datatype.number(),
          },
          default_repository_permission: faker.lorem.slug(),
          members_can_create_repositories: faker.datatype.boolean(),
          two_factor_requirement_enabled: faker.datatype.boolean(),
          members_allowed_repository_creation_type: faker.lorem.slug(),
          members_can_create_public_repositories: faker.datatype.boolean(),
          members_can_create_private_repositories: faker.datatype.boolean(),
          members_can_create_internal_repositories: faker.datatype.boolean(),
          members_can_create_pages: faker.datatype.boolean(),
          members_can_create_public_pages: faker.datatype.boolean(),
          members_can_create_private_pages: faker.datatype.boolean(),
          members_can_fork_private_repositories: faker.datatype.boolean(),
          updated_at: faker.date.recent(),
        },
        ldap_dn: faker.lorem.slug(),
      },
      201: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        name: faker.lorem.slug(),
        slug: faker.lorem.slug(),
        description: faker.lorem.slug(),
        privacy: faker.random.arrayElement(['closed', 'secret']),
        permission: faker.lorem.slug(),
        members_url: faker.lorem.slug(),
        repositories_url: faker.internet.url(),
        parent: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          html_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          slug: faker.lorem.slug(),
          ldap_dn: faker.lorem.slug(),
        },
        members_count: faker.datatype.number(),
        repos_count: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        organization: {
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          hooks_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          members_url: faker.lorem.slug(),
          public_members_url: faker.lorem.slug(),
          avatar_url: faker.lorem.slug(),
          description: faker.lorem.slug(),
          name: faker.lorem.slug(),
          company: faker.lorem.slug(),
          blog: faker.internet.url(),
          location: faker.lorem.slug(),
          email: faker.internet.exampleEmail(),
          twitter_username: faker.lorem.slug(),
          is_verified: faker.datatype.boolean(),
          has_organization_projects: faker.datatype.boolean(),
          has_repository_projects: faker.datatype.boolean(),
          public_repos: faker.datatype.number(),
          public_gists: faker.datatype.number(),
          followers: faker.datatype.number(),
          following: faker.datatype.number(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          type: faker.lorem.slug(),
          total_private_repos: faker.datatype.number(),
          owned_private_repos: faker.datatype.number(),
          private_gists: faker.datatype.number(),
          disk_usage: faker.datatype.number(),
          collaborators: faker.datatype.number(),
          billing_email: faker.internet.exampleEmail(),
          plan: {
            name: faker.lorem.slug(),
            space: faker.datatype.number(),
            private_repos: faker.datatype.number(),
            filled_seats: faker.datatype.number(),
            seats: faker.datatype.number(),
          },
          default_repository_permission: faker.lorem.slug(),
          members_can_create_repositories: faker.datatype.boolean(),
          two_factor_requirement_enabled: faker.datatype.boolean(),
          members_allowed_repository_creation_type: faker.lorem.slug(),
          members_can_create_public_repositories: faker.datatype.boolean(),
          members_can_create_private_repositories: faker.datatype.boolean(),
          members_can_create_internal_repositories: faker.datatype.boolean(),
          members_can_create_pages: faker.datatype.boolean(),
          members_can_create_public_pages: faker.datatype.boolean(),
          members_can_create_private_pages: faker.datatype.boolean(),
          members_can_fork_private_repositories: faker.datatype.boolean(),
          updated_at: faker.date.recent(),
        },
        ldap_dn: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: {
      204: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/teams/:teamId/discussions': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_version: faker.lorem.slug(),
        comments_count: faker.datatype.number(),
        comments_url: faker.internet.url(),
        created_at: faker.date.recent(),
        last_edited_at: faker.date.recent(),
        html_url: faker.internet.url(),
        node_id: faker.lorem.slug(),
        number: faker.datatype.number(),
        pinned: faker.datatype.boolean(),
        private: faker.datatype.boolean(),
        team_url: faker.internet.url(),
        title: faker.lorem.slug(),
        updated_at: faker.date.recent(),
        url: faker.internet.url(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      })),
    },
    post: {
      201: {
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_version: faker.lorem.slug(),
        comments_count: faker.datatype.number(),
        comments_url: faker.internet.url(),
        created_at: faker.date.recent(),
        last_edited_at: faker.date.recent(),
        html_url: faker.internet.url(),
        node_id: faker.lorem.slug(),
        number: faker.datatype.number(),
        pinned: faker.datatype.boolean(),
        private: faker.datatype.boolean(),
        team_url: faker.internet.url(),
        title: faker.lorem.slug(),
        updated_at: faker.date.recent(),
        url: faker.internet.url(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
    },
  },
  '/teams/:teamId/discussions/:discussionNumber': {
    get: {
      200: {
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_version: faker.lorem.slug(),
        comments_count: faker.datatype.number(),
        comments_url: faker.internet.url(),
        created_at: faker.date.recent(),
        last_edited_at: faker.date.recent(),
        html_url: faker.internet.url(),
        node_id: faker.lorem.slug(),
        number: faker.datatype.number(),
        pinned: faker.datatype.boolean(),
        private: faker.datatype.boolean(),
        team_url: faker.internet.url(),
        title: faker.lorem.slug(),
        updated_at: faker.date.recent(),
        url: faker.internet.url(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
    },
    patch: {
      200: {
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_version: faker.lorem.slug(),
        comments_count: faker.datatype.number(),
        comments_url: faker.internet.url(),
        created_at: faker.date.recent(),
        last_edited_at: faker.date.recent(),
        html_url: faker.internet.url(),
        node_id: faker.lorem.slug(),
        number: faker.datatype.number(),
        pinned: faker.datatype.boolean(),
        private: faker.datatype.boolean(),
        team_url: faker.internet.url(),
        title: faker.lorem.slug(),
        updated_at: faker.date.recent(),
        url: faker.internet.url(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
    },
    delete: { 204: null },
  },
  '/teams/:teamId/discussions/:discussionNumber/comments': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_version: faker.lorem.slug(),
        created_at: faker.date.recent(),
        last_edited_at: faker.date.recent(),
        discussion_url: faker.internet.url(),
        html_url: faker.internet.url(),
        node_id: faker.lorem.slug(),
        number: faker.datatype.number(),
        updated_at: faker.date.recent(),
        url: faker.internet.url(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      })),
    },
    post: {
      201: {
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_version: faker.lorem.slug(),
        created_at: faker.date.recent(),
        last_edited_at: faker.date.recent(),
        discussion_url: faker.internet.url(),
        html_url: faker.internet.url(),
        node_id: faker.lorem.slug(),
        number: faker.datatype.number(),
        updated_at: faker.date.recent(),
        url: faker.internet.url(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
    },
  },
  '/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber': {
    get: {
      200: {
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_version: faker.lorem.slug(),
        created_at: faker.date.recent(),
        last_edited_at: faker.date.recent(),
        discussion_url: faker.internet.url(),
        html_url: faker.internet.url(),
        node_id: faker.lorem.slug(),
        number: faker.datatype.number(),
        updated_at: faker.date.recent(),
        url: faker.internet.url(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
    },
    patch: {
      200: {
        author: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body: faker.lorem.slug(),
        body_html: faker.lorem.slug(),
        body_version: faker.lorem.slug(),
        created_at: faker.date.recent(),
        last_edited_at: faker.date.recent(),
        discussion_url: faker.internet.url(),
        html_url: faker.internet.url(),
        node_id: faker.lorem.slug(),
        number: faker.datatype.number(),
        updated_at: faker.date.recent(),
        url: faker.internet.url(),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      },
    },
    delete: { 204: null },
  },
  '/teams/:teamId/discussions/:discussionNumber/comments/:commentNumber/reactions':
    {
      get: {
        200: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          content: faker.random.arrayElement([
            '+1',
            '-1',
            'laugh',
            'confused',
            'heart',
            'hooray',
            'rocket',
            'eyes',
          ]),
          created_at: faker.date.recent(),
        })),
      },
      post: {
        201: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          content: faker.random.arrayElement([
            '+1',
            '-1',
            'laugh',
            'confused',
            'heart',
            'hooray',
            'rocket',
            'eyes',
          ]),
          created_at: faker.date.recent(),
        },
      },
    },
  '/teams/:teamId/discussions/:discussionNumber/reactions': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        content: faker.random.arrayElement([
          '+1',
          '-1',
          'laugh',
          'confused',
          'heart',
          'hooray',
          'rocket',
          'eyes',
        ]),
        created_at: faker.date.recent(),
      })),
    },
    post: {
      201: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        content: faker.random.arrayElement([
          '+1',
          '-1',
          'laugh',
          'confused',
          'heart',
          'hooray',
          'rocket',
          'eyes',
        ]),
        created_at: faker.date.recent(),
      },
    },
  },
  '/teams/:teamId/members': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        email: faker.lorem.slug(),
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        starred_at: faker.lorem.slug(),
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/teams/:teamId/members/:username': {
    get: { 204: null, 404: null },
    put: {
      204: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: null,
      422: null,
    },
    delete: { 204: null, 404: null },
  },
  '/teams/:teamId/memberships/:username': {
    get: {
      200: {
        url: faker.internet.url(),
        role: faker.random.arrayElement(['member', 'maintainer']),
        state: faker.random.arrayElement(['active', 'pending']),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    put: {
      200: {
        url: faker.internet.url(),
        role: faker.random.arrayElement(['member', 'maintainer']),
        state: faker.random.arrayElement(['active', 'pending']),
      },
      403: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: null,
    },
    delete: { 204: null, 403: null },
  },
  '/teams/:teamId/projects': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        owner_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        columns_url: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        body: faker.lorem.slug(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.lorem.slug(),
        updated_at: faker.lorem.slug(),
        organization_permission: faker.lorem.slug(),
        private: faker.datatype.boolean(),
        permissions: {
          read: faker.datatype.boolean(),
          write: faker.datatype.boolean(),
          admin: faker.datatype.boolean(),
        },
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/teams/:teamId/projects/:projectId': {
    get: {
      200: {
        owner_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        columns_url: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        body: faker.lorem.slug(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.lorem.slug(),
        updated_at: faker.lorem.slug(),
        organization_permission: faker.lorem.slug(),
        private: faker.datatype.boolean(),
        permissions: {
          read: faker.datatype.boolean(),
          write: faker.datatype.boolean(),
          admin: faker.datatype.boolean(),
        },
      },
      404: null,
    },
    put: {
      204: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: {
      204: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      415: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/teams/:teamId/repos': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        full_name: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.lorem.slug(),
        assignees_url: faker.lorem.slug(),
        blobs_url: faker.lorem.slug(),
        branches_url: faker.lorem.slug(),
        collaborators_url: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        compare_url: faker.lorem.slug(),
        contents_url: faker.lorem.slug(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.lorem.slug(),
        git_refs_url: faker.lorem.slug(),
        git_tags_url: faker.lorem.slug(),
        git_url: faker.lorem.slug(),
        issue_comment_url: faker.lorem.slug(),
        issue_events_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        labels_url: faker.lorem.slug(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        pulls_url: faker.lorem.slug(),
        releases_url: faker.lorem.slug(),
        ssh_url: faker.lorem.slug(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.lorem.slug(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.lorem.slug(),
        clone_url: faker.lorem.slug(),
        mirror_url: faker.lorem.slug(),
        hooks_url: faker.internet.url(),
        svn_url: faker.lorem.slug(),
        homepage: faker.lorem.slug(),
        language: faker.lorem.slug(),
        forks_count: faker.datatype.number(),
        stargazers_count: faker.datatype.number(),
        watchers_count: faker.datatype.number(),
        size: faker.datatype.number(),
        default_branch: faker.lorem.slug(),
        open_issues_count: faker.datatype.number(),
        is_template: faker.datatype.boolean(),
        topics: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
        pushed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        template_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        temp_clone_token: faker.lorem.slug(),
        delete_branch_on_merge: faker.datatype.boolean(),
        subscribers_count: faker.datatype.number(),
        network_count: faker.datatype.number(),
        code_of_conduct: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          body: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          spdx_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
        },
        forks: faker.datatype.number(),
        open_issues: faker.datatype.number(),
        watchers: faker.datatype.number(),
        allow_forking: faker.datatype.boolean(),
      })),
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/teams/:teamId/repos/:owner/:repo': {
    get: {
      200: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        full_name: faker.lorem.slug(),
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          spdx_id: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        forks: faker.datatype.number(),
        permissions: {
          admin: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
        },
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.lorem.slug(),
        assignees_url: faker.lorem.slug(),
        blobs_url: faker.lorem.slug(),
        branches_url: faker.lorem.slug(),
        collaborators_url: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        compare_url: faker.lorem.slug(),
        contents_url: faker.lorem.slug(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.lorem.slug(),
        git_refs_url: faker.lorem.slug(),
        git_tags_url: faker.lorem.slug(),
        git_url: faker.lorem.slug(),
        issue_comment_url: faker.lorem.slug(),
        issue_events_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        labels_url: faker.lorem.slug(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        pulls_url: faker.lorem.slug(),
        releases_url: faker.lorem.slug(),
        ssh_url: faker.lorem.slug(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.lorem.slug(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.lorem.slug(),
        clone_url: faker.lorem.slug(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.internet.url(),
        language: faker.lorem.slug(),
        forks_count: faker.datatype.number(),
        stargazers_count: faker.datatype.number(),
        watchers_count: faker.datatype.number(),
        size: faker.datatype.number(),
        default_branch: faker.lorem.slug(),
        open_issues_count: faker.datatype.number(),
        is_template: faker.datatype.boolean(),
        topics: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
        pushed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        allow_rebase_merge: faker.datatype.boolean(),
        template_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        temp_clone_token: faker.lorem.slug(),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.datatype.number(),
        network_count: faker.datatype.number(),
        open_issues: faker.datatype.number(),
        watchers: faker.datatype.number(),
        master_branch: faker.lorem.slug(),
      },
      204: null,
      404: null,
    },
    put: {
      204: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: { 204: null },
  },
  '/teams/:teamId/teams': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        slug: faker.lorem.slug(),
        description: faker.lorem.slug(),
        privacy: faker.lorem.slug(),
        permission: faker.lorem.slug(),
        permissions: {
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          admin: faker.datatype.boolean(),
        },
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        members_url: faker.lorem.slug(),
        repositories_url: faker.internet.url(),
        parent: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          html_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          slug: faker.lorem.slug(),
          ldap_dn: faker.lorem.slug(),
        },
      })),
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/user': {
    get: {
      200: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        name: faker.lorem.slug(),
        company: faker.lorem.slug(),
        blog: faker.lorem.slug(),
        location: faker.lorem.slug(),
        email: faker.internet.exampleEmail(),
        hireable: faker.datatype.boolean(),
        bio: faker.lorem.slug(),
        twitter_username: faker.lorem.slug(),
        public_repos: faker.datatype.number(),
        public_gists: faker.datatype.number(),
        followers: faker.datatype.number(),
        following: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        private_gists: faker.datatype.number(),
        total_private_repos: faker.datatype.number(),
        owned_private_repos: faker.datatype.number(),
        disk_usage: faker.datatype.number(),
        collaborators: faker.datatype.number(),
        two_factor_authentication: faker.datatype.boolean(),
        plan: {
          collaborators: faker.datatype.number(),
          name: faker.lorem.slug(),
          space: faker.datatype.number(),
          private_repos: faker.datatype.number(),
        },
        suspended_at: faker.date.recent(),
        business_plus: faker.datatype.boolean(),
        ldap_dn: faker.lorem.slug(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/user/emails': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        email: faker.internet.exampleEmail(),
        primary: faker.datatype.boolean(),
        verified: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      201: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        email: faker.internet.exampleEmail(),
        primary: faker.datatype.boolean(),
        verified: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    delete: {
      204: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/user/followers': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        email: faker.lorem.slug(),
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        starred_at: faker.lorem.slug(),
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/user/following': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        email: faker.lorem.slug(),
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        starred_at: faker.lorem.slug(),
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/user/following/:username': {
    get: {
      204: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    put: {
      204: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: {
      204: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/user/gpg_keys': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        primary_key_id: faker.datatype.number(),
        key_id: faker.lorem.slug(),
        public_key: faker.lorem.slug(),
        emails: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          email: faker.lorem.slug(),
          verified: faker.datatype.boolean(),
        })),
        subkeys: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          primary_key_id: faker.datatype.number(),
          key_id: faker.lorem.slug(),
          public_key: faker.lorem.slug(),
          emails: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
          subkeys: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
          can_sign: faker.datatype.boolean(),
          can_encrypt_comms: faker.datatype.boolean(),
          can_encrypt_storage: faker.datatype.boolean(),
          can_certify: faker.datatype.boolean(),
          created_at: faker.lorem.slug(),
          expires_at: faker.lorem.slug(),
          raw_key: faker.lorem.slug(),
        })),
        can_sign: faker.datatype.boolean(),
        can_encrypt_comms: faker.datatype.boolean(),
        can_encrypt_storage: faker.datatype.boolean(),
        can_certify: faker.datatype.boolean(),
        created_at: faker.date.recent(),
        expires_at: faker.date.recent(),
        raw_key: faker.lorem.slug(),
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      201: {
        id: faker.datatype.number(),
        primary_key_id: faker.datatype.number(),
        key_id: faker.lorem.slug(),
        public_key: faker.lorem.slug(),
        emails: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          email: faker.lorem.slug(),
          verified: faker.datatype.boolean(),
        })),
        subkeys: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          primary_key_id: faker.datatype.number(),
          key_id: faker.lorem.slug(),
          public_key: faker.lorem.slug(),
          emails: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
          subkeys: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
          can_sign: faker.datatype.boolean(),
          can_encrypt_comms: faker.datatype.boolean(),
          can_encrypt_storage: faker.datatype.boolean(),
          can_certify: faker.datatype.boolean(),
          created_at: faker.lorem.slug(),
          expires_at: faker.lorem.slug(),
          raw_key: faker.lorem.slug(),
        })),
        can_sign: faker.datatype.boolean(),
        can_encrypt_comms: faker.datatype.boolean(),
        can_encrypt_storage: faker.datatype.boolean(),
        can_certify: faker.datatype.boolean(),
        created_at: faker.date.recent(),
        expires_at: faker.date.recent(),
        raw_key: faker.lorem.slug(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/user/gpg_keys/:gpgKeyId': {
    get: {
      200: {
        id: faker.datatype.number(),
        primary_key_id: faker.datatype.number(),
        key_id: faker.lorem.slug(),
        public_key: faker.lorem.slug(),
        emails: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          email: faker.lorem.slug(),
          verified: faker.datatype.boolean(),
        })),
        subkeys: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          primary_key_id: faker.datatype.number(),
          key_id: faker.lorem.slug(),
          public_key: faker.lorem.slug(),
          emails: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
          subkeys: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
          can_sign: faker.datatype.boolean(),
          can_encrypt_comms: faker.datatype.boolean(),
          can_encrypt_storage: faker.datatype.boolean(),
          can_certify: faker.datatype.boolean(),
          created_at: faker.lorem.slug(),
          expires_at: faker.lorem.slug(),
          raw_key: faker.lorem.slug(),
        })),
        can_sign: faker.datatype.boolean(),
        can_encrypt_comms: faker.datatype.boolean(),
        can_encrypt_storage: faker.datatype.boolean(),
        can_certify: faker.datatype.boolean(),
        created_at: faker.date.recent(),
        expires_at: faker.date.recent(),
        raw_key: faker.lorem.slug(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: {
      204: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/user/installations': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        installations: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          account: null,
          repository_selection: faker.random.arrayElement(['all', 'selected']),
          access_tokens_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          html_url: faker.internet.url(),
          app_id: faker.datatype.number(),
          target_id: faker.datatype.number(),
          target_type: faker.lorem.slug(),
          permissions: {
            actions: faker.random.arrayElement(['read', 'write']),
            administration: faker.random.arrayElement(['read', 'write']),
            checks: faker.random.arrayElement(['read', 'write']),
            contents: faker.random.arrayElement(['read', 'write']),
            deployments: faker.random.arrayElement(['read', 'write']),
            environments: faker.random.arrayElement(['read', 'write']),
            issues: faker.random.arrayElement(['read', 'write']),
            metadata: faker.random.arrayElement(['read', 'write']),
            packages: faker.random.arrayElement(['read', 'write']),
            pages: faker.random.arrayElement(['read', 'write']),
            pull_requests: faker.random.arrayElement(['read', 'write']),
            repository_hooks: faker.random.arrayElement(['read', 'write']),
            repository_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            secret_scanning_alerts: faker.random.arrayElement([
              'read',
              'write',
            ]),
            secrets: faker.random.arrayElement(['read', 'write']),
            security_events: faker.random.arrayElement(['read', 'write']),
            single_file: faker.random.arrayElement(['read', 'write']),
            statuses: faker.random.arrayElement(['read', 'write']),
            vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
            workflows: faker.random.arrayElement(['write']),
            members: faker.random.arrayElement(['read', 'write']),
            organization_administration: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_hooks: faker.random.arrayElement(['read', 'write']),
            organization_plan: faker.random.arrayElement(['read']),
            organization_projects: faker.random.arrayElement([
              'read',
              'write',
              'admin',
            ]),
            organization_packages: faker.random.arrayElement(['read', 'write']),
            organization_secrets: faker.random.arrayElement(['read', 'write']),
            organization_self_hosted_runners: faker.random.arrayElement([
              'read',
              'write',
            ]),
            organization_user_blocking: faker.random.arrayElement([
              'read',
              'write',
            ]),
            team_discussions: faker.random.arrayElement(['read', 'write']),
            content_references: faker.random.arrayElement(['read', 'write']),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          single_file_name: faker.lorem.slug(),
          has_multiple_single_files: faker.datatype.boolean(),
          single_file_paths: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          app_slug: faker.lorem.slug(),
          suspended_by: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          suspended_at: faker.date.recent(),
          contact_email: faker.lorem.slug(),
        })),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      415: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
    },
  },
  '/user/installations/:installationId/repositories': {
    get: {
      200: {
        total_count: faker.datatype.number(),
        repository_selection: faker.lorem.slug(),
        repositories: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        })),
      },
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/user/installations/:installationId/repositories/:repositoryId': {
    put: {
      204: null,
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: {
      204: null,
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/user/issues': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        repository_url: faker.internet.url(),
        labels_url: faker.lorem.slug(),
        comments_url: faker.internet.url(),
        events_url: faker.internet.url(),
        html_url: faker.internet.url(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        title: faker.lorem.slug(),
        body: faker.lorem.slug(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        labels: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
        assignee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        assignees: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        })),
        milestone: {
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          labels_url: faker.internet.url(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          number: faker.datatype.number(),
          state: faker.random.arrayElement(['open', 'closed']),
          title: faker.lorem.slug(),
          description: faker.lorem.slug(),
          creator: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          open_issues: faker.datatype.number(),
          closed_issues: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          closed_at: faker.date.recent(),
          due_on: faker.date.recent(),
        },
        locked: faker.datatype.boolean(),
        active_lock_reason: faker.lorem.slug(),
        comments: faker.datatype.number(),
        pull_request: {
          merged_at: faker.date.recent(),
          diff_url: faker.internet.url(),
          html_url: faker.internet.url(),
          patch_url: faker.internet.url(),
          url: faker.internet.url(),
        },
        closed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        draft: faker.datatype.boolean(),
        closed_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        body_html: faker.lorem.slug(),
        body_text: faker.lorem.slug(),
        timeline_url: faker.internet.url(),
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        performed_via_github_app: {
          id: faker.datatype.number(),
          slug: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          external_url: faker.internet.url(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            issues: faker.lorem.slug(),
            checks: faker.lorem.slug(),
            metadata: faker.lorem.slug(),
            contents: faker.lorem.slug(),
            deployments: faker.lorem.slug(),
          },
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          installations_count: faker.datatype.number(),
          client_id: faker.lorem.slug(),
          client_secret: faker.lorem.slug(),
          webhook_secret: faker.lorem.slug(),
          pem: faker.lorem.slug(),
        },
        author_association: faker.random.arrayElement([
          'COLLABORATOR',
          'CONTRIBUTOR',
          'FIRST_TIMER',
          'FIRST_TIME_CONTRIBUTOR',
          'MANNEQUIN',
          'MEMBER',
          'NONE',
          'OWNER',
        ]),
        reactions: {
          url: faker.internet.url(),
          total_count: faker.datatype.number(),
          '+1': faker.datatype.number(),
          '-1': faker.datatype.number(),
          laugh: faker.datatype.number(),
          confused: faker.datatype.number(),
          heart: faker.datatype.number(),
          hooray: faker.datatype.number(),
          eyes: faker.datatype.number(),
          rocket: faker.datatype.number(),
        },
      })),
      304: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/user/keys': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        key: faker.lorem.slug(),
        id: faker.datatype.number(),
        url: faker.lorem.slug(),
        title: faker.lorem.slug(),
        created_at: faker.date.recent(),
        verified: faker.datatype.boolean(),
        read_only: faker.datatype.boolean(),
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    post: {
      201: {
        key: faker.lorem.slug(),
        id: faker.datatype.number(),
        url: faker.lorem.slug(),
        title: faker.lorem.slug(),
        created_at: faker.date.recent(),
        verified: faker.datatype.boolean(),
        read_only: faker.datatype.boolean(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/user/keys/:keyId': {
    get: {
      200: {
        key: faker.lorem.slug(),
        id: faker.datatype.number(),
        url: faker.lorem.slug(),
        title: faker.lorem.slug(),
        created_at: faker.date.recent(),
        verified: faker.datatype.boolean(),
        read_only: faker.datatype.boolean(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: {
      204: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/user/memberships/orgs': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        state: faker.random.arrayElement(['active', 'pending']),
        role: faker.random.arrayElement(['admin', 'member', 'billing_manager']),
        organization_url: faker.internet.url(),
        organization: {
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          hooks_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          members_url: faker.lorem.slug(),
          public_members_url: faker.lorem.slug(),
          avatar_url: faker.lorem.slug(),
          description: faker.lorem.slug(),
        },
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        permissions: {
          can_create_repository: faker.datatype.boolean(),
        },
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/user/memberships/orgs/:org': {
    get: {
      200: {
        url: faker.internet.url(),
        state: faker.random.arrayElement(['active', 'pending']),
        role: faker.random.arrayElement(['admin', 'member', 'billing_manager']),
        organization_url: faker.internet.url(),
        organization: {
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          hooks_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          members_url: faker.lorem.slug(),
          public_members_url: faker.lorem.slug(),
          avatar_url: faker.lorem.slug(),
          description: faker.lorem.slug(),
        },
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        permissions: {
          can_create_repository: faker.datatype.boolean(),
        },
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    patch: {
      200: {
        url: faker.internet.url(),
        state: faker.random.arrayElement(['active', 'pending']),
        role: faker.random.arrayElement(['admin', 'member', 'billing_manager']),
        organization_url: faker.internet.url(),
        organization: {
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          hooks_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          members_url: faker.lorem.slug(),
          public_members_url: faker.lorem.slug(),
          avatar_url: faker.lorem.slug(),
          description: faker.lorem.slug(),
        },
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        permissions: {
          can_create_repository: faker.datatype.boolean(),
        },
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/user/orgs': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.internet.url(),
        hooks_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        members_url: faker.lorem.slug(),
        public_members_url: faker.lorem.slug(),
        avatar_url: faker.lorem.slug(),
        description: faker.lorem.slug(),
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/user/projects': {
    post: {
      201: {
        owner_url: faker.internet.url(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        columns_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        body: faker.lorem.slug(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        organization_permission: faker.random.arrayElement([
          'read',
          'write',
          'admin',
          'none',
        ]),
        private: faker.datatype.boolean(),
      },
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      415: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
      },
    },
  },
  '/user/public_emails': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        email: faker.internet.exampleEmail(),
        primary: faker.datatype.boolean(),
        verified: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/user/repos': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        full_name: faker.lorem.slug(),
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          spdx_id: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        forks: faker.datatype.number(),
        permissions: {
          admin: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
        },
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.lorem.slug(),
        assignees_url: faker.lorem.slug(),
        blobs_url: faker.lorem.slug(),
        branches_url: faker.lorem.slug(),
        collaborators_url: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        compare_url: faker.lorem.slug(),
        contents_url: faker.lorem.slug(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.lorem.slug(),
        git_refs_url: faker.lorem.slug(),
        git_tags_url: faker.lorem.slug(),
        git_url: faker.lorem.slug(),
        issue_comment_url: faker.lorem.slug(),
        issue_events_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        labels_url: faker.lorem.slug(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        pulls_url: faker.lorem.slug(),
        releases_url: faker.lorem.slug(),
        ssh_url: faker.lorem.slug(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.lorem.slug(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.lorem.slug(),
        clone_url: faker.lorem.slug(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.internet.url(),
        language: faker.lorem.slug(),
        forks_count: faker.datatype.number(),
        stargazers_count: faker.datatype.number(),
        watchers_count: faker.datatype.number(),
        size: faker.datatype.number(),
        default_branch: faker.lorem.slug(),
        open_issues_count: faker.datatype.number(),
        is_template: faker.datatype.boolean(),
        topics: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
        pushed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        allow_rebase_merge: faker.datatype.boolean(),
        template_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.lorem.slug(),
            gravatar_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            followers_url: faker.lorem.slug(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.lorem.slug(),
            organizations_url: faker.lorem.slug(),
            repos_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.lorem.slug(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.lorem.slug(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.lorem.slug(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.lorem.slug(),
          deployments_url: faker.lorem.slug(),
          downloads_url: faker.lorem.slug(),
          events_url: faker.lorem.slug(),
          forks_url: faker.lorem.slug(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.lorem.slug(),
          merges_url: faker.lorem.slug(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.lorem.slug(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.lorem.slug(),
          subscription_url: faker.lorem.slug(),
          tags_url: faker.lorem.slug(),
          teams_url: faker.lorem.slug(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.lorem.slug(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.lorem.slug(),
          created_at: faker.lorem.slug(),
          updated_at: faker.lorem.slug(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
        },
        temp_clone_token: faker.lorem.slug(),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.datatype.number(),
        network_count: faker.datatype.number(),
        open_issues: faker.datatype.number(),
        watchers: faker.datatype.number(),
        master_branch: faker.lorem.slug(),
        starred_at: faker.lorem.slug(),
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
    post: {
      201: {
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        full_name: faker.lorem.slug(),
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          spdx_id: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        forks: faker.datatype.number(),
        permissions: {
          admin: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
        },
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.lorem.slug(),
        assignees_url: faker.lorem.slug(),
        blobs_url: faker.lorem.slug(),
        branches_url: faker.lorem.slug(),
        collaborators_url: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        compare_url: faker.lorem.slug(),
        contents_url: faker.lorem.slug(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.lorem.slug(),
        git_refs_url: faker.lorem.slug(),
        git_tags_url: faker.lorem.slug(),
        git_url: faker.lorem.slug(),
        issue_comment_url: faker.lorem.slug(),
        issue_events_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        labels_url: faker.lorem.slug(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        pulls_url: faker.lorem.slug(),
        releases_url: faker.lorem.slug(),
        ssh_url: faker.lorem.slug(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.lorem.slug(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.lorem.slug(),
        clone_url: faker.lorem.slug(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.internet.url(),
        language: faker.lorem.slug(),
        forks_count: faker.datatype.number(),
        stargazers_count: faker.datatype.number(),
        watchers_count: faker.datatype.number(),
        size: faker.datatype.number(),
        default_branch: faker.lorem.slug(),
        open_issues_count: faker.datatype.number(),
        is_template: faker.datatype.boolean(),
        topics: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
        pushed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        allow_rebase_merge: faker.datatype.boolean(),
        template_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.lorem.slug(),
            gravatar_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            followers_url: faker.lorem.slug(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.lorem.slug(),
            organizations_url: faker.lorem.slug(),
            repos_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.lorem.slug(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.lorem.slug(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.lorem.slug(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.lorem.slug(),
          deployments_url: faker.lorem.slug(),
          downloads_url: faker.lorem.slug(),
          events_url: faker.lorem.slug(),
          forks_url: faker.lorem.slug(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.lorem.slug(),
          merges_url: faker.lorem.slug(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.lorem.slug(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.lorem.slug(),
          subscription_url: faker.lorem.slug(),
          tags_url: faker.lorem.slug(),
          teams_url: faker.lorem.slug(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.lorem.slug(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.lorem.slug(),
          created_at: faker.lorem.slug(),
          updated_at: faker.lorem.slug(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
        },
        temp_clone_token: faker.lorem.slug(),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.datatype.number(),
        network_count: faker.datatype.number(),
        open_issues: faker.datatype.number(),
        watchers: faker.datatype.number(),
        master_branch: faker.lorem.slug(),
        starred_at: faker.lorem.slug(),
      },
      304: null,
      400: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/user/repository_invitations': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.internet.url(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            license: {
              key: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
              spdx_id: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              html_url: faker.internet.url(),
            },
            organization: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            forks: faker.datatype.number(),
            permissions: {
              admin: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
            },
            owner: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.internet.url(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.internet.url(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.internet.url(),
            deployments_url: faker.internet.url(),
            downloads_url: faker.internet.url(),
            events_url: faker.internet.url(),
            forks_url: faker.internet.url(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.internet.url(),
            merges_url: faker.internet.url(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.internet.url(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.internet.url(),
            subscription_url: faker.internet.url(),
            tags_url: faker.internet.url(),
            teams_url: faker.internet.url(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.internet.url(),
            hooks_url: faker.internet.url(),
            svn_url: faker.internet.url(),
            homepage: faker.internet.url(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            allow_rebase_merge: faker.datatype.boolean(),
            template_repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              owner: {
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.lorem.slug(),
                gravatar_id: faker.lorem.slug(),
                url: faker.lorem.slug(),
                html_url: faker.lorem.slug(),
                followers_url: faker.lorem.slug(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.lorem.slug(),
                organizations_url: faker.lorem.slug(),
                repos_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.lorem.slug(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.lorem.slug(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.lorem.slug(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.lorem.slug(),
              deployments_url: faker.lorem.slug(),
              downloads_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              forks_url: faker.lorem.slug(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.lorem.slug(),
              merges_url: faker.lorem.slug(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.lorem.slug(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.lorem.slug(),
              subscription_url: faker.lorem.slug(),
              tags_url: faker.lorem.slug(),
              teams_url: faker.lorem.slug(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.lorem.slug(),
              hooks_url: faker.lorem.slug(),
              svn_url: faker.lorem.slug(),
              homepage: faker.lorem.slug(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.lorem.slug(),
              created_at: faker.lorem.slug(),
              updated_at: faker.lorem.slug(),
              permissions: {
                admin: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
              },
              allow_rebase_merge: faker.datatype.boolean(),
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_update_branch: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
            },
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            allow_forking: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
            open_issues: faker.datatype.number(),
            watchers: faker.datatype.number(),
            master_branch: faker.lorem.slug(),
            starred_at: faker.lorem.slug(),
          },
          temp_clone_token: faker.lorem.slug(),
          delete_branch_on_merge: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          code_of_conduct: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            spdx_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          allow_forking: faker.datatype.boolean(),
        },
        invitee: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        inviter: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        permissions: faker.random.arrayElement([
          'read',
          'write',
          'admin',
          'triage',
          'maintain',
        ]),
        created_at: faker.date.recent(),
        expired: faker.datatype.boolean(),
        url: faker.lorem.slug(),
        html_url: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/user/repository_invitations/:invitationId': {
    patch: {
      204: null,
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      409: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: {
      204: null,
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      409: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/user/starred': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        full_name: faker.lorem.slug(),
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          spdx_id: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        organization: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        forks: faker.datatype.number(),
        permissions: {
          admin: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
        },
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.lorem.slug(),
        assignees_url: faker.lorem.slug(),
        blobs_url: faker.lorem.slug(),
        branches_url: faker.lorem.slug(),
        collaborators_url: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        compare_url: faker.lorem.slug(),
        contents_url: faker.lorem.slug(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.lorem.slug(),
        git_refs_url: faker.lorem.slug(),
        git_tags_url: faker.lorem.slug(),
        git_url: faker.lorem.slug(),
        issue_comment_url: faker.lorem.slug(),
        issue_events_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        labels_url: faker.lorem.slug(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        pulls_url: faker.lorem.slug(),
        releases_url: faker.lorem.slug(),
        ssh_url: faker.lorem.slug(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.lorem.slug(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.lorem.slug(),
        clone_url: faker.lorem.slug(),
        mirror_url: faker.internet.url(),
        hooks_url: faker.internet.url(),
        svn_url: faker.internet.url(),
        homepage: faker.internet.url(),
        language: faker.lorem.slug(),
        forks_count: faker.datatype.number(),
        stargazers_count: faker.datatype.number(),
        watchers_count: faker.datatype.number(),
        size: faker.datatype.number(),
        default_branch: faker.lorem.slug(),
        open_issues_count: faker.datatype.number(),
        is_template: faker.datatype.boolean(),
        topics: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
        pushed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        allow_rebase_merge: faker.datatype.boolean(),
        template_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          owner: {
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.lorem.slug(),
            gravatar_id: faker.lorem.slug(),
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            followers_url: faker.lorem.slug(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.lorem.slug(),
            organizations_url: faker.lorem.slug(),
            repos_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.lorem.slug(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.lorem.slug(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.lorem.slug(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.lorem.slug(),
          deployments_url: faker.lorem.slug(),
          downloads_url: faker.lorem.slug(),
          events_url: faker.lorem.slug(),
          forks_url: faker.lorem.slug(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.lorem.slug(),
          merges_url: faker.lorem.slug(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.lorem.slug(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.lorem.slug(),
          subscription_url: faker.lorem.slug(),
          tags_url: faker.lorem.slug(),
          teams_url: faker.lorem.slug(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.lorem.slug(),
          hooks_url: faker.lorem.slug(),
          svn_url: faker.lorem.slug(),
          homepage: faker.lorem.slug(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.lorem.slug(),
          created_at: faker.lorem.slug(),
          updated_at: faker.lorem.slug(),
          permissions: {
            admin: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
          },
          allow_rebase_merge: faker.datatype.boolean(),
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_update_branch: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
        },
        temp_clone_token: faker.lorem.slug(),
        allow_squash_merge: faker.datatype.boolean(),
        allow_auto_merge: faker.datatype.boolean(),
        delete_branch_on_merge: faker.datatype.boolean(),
        allow_merge_commit: faker.datatype.boolean(),
        allow_forking: faker.datatype.boolean(),
        subscribers_count: faker.datatype.number(),
        network_count: faker.datatype.number(),
        open_issues: faker.datatype.number(),
        watchers: faker.datatype.number(),
        master_branch: faker.lorem.slug(),
        starred_at: faker.lorem.slug(),
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/user/starred/:owner/:repo': {
    get: {
      204: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    put: {
      204: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
    delete: {
      204: null,
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/user/subscriptions': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        full_name: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.lorem.slug(),
        assignees_url: faker.lorem.slug(),
        blobs_url: faker.lorem.slug(),
        branches_url: faker.lorem.slug(),
        collaborators_url: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        compare_url: faker.lorem.slug(),
        contents_url: faker.lorem.slug(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.lorem.slug(),
        git_refs_url: faker.lorem.slug(),
        git_tags_url: faker.lorem.slug(),
        git_url: faker.lorem.slug(),
        issue_comment_url: faker.lorem.slug(),
        issue_events_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        labels_url: faker.lorem.slug(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        pulls_url: faker.lorem.slug(),
        releases_url: faker.lorem.slug(),
        ssh_url: faker.lorem.slug(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.lorem.slug(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.lorem.slug(),
        clone_url: faker.lorem.slug(),
        mirror_url: faker.lorem.slug(),
        hooks_url: faker.internet.url(),
        svn_url: faker.lorem.slug(),
        homepage: faker.lorem.slug(),
        language: faker.lorem.slug(),
        forks_count: faker.datatype.number(),
        stargazers_count: faker.datatype.number(),
        watchers_count: faker.datatype.number(),
        size: faker.datatype.number(),
        default_branch: faker.lorem.slug(),
        open_issues_count: faker.datatype.number(),
        is_template: faker.datatype.boolean(),
        topics: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
        pushed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        template_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        temp_clone_token: faker.lorem.slug(),
        delete_branch_on_merge: faker.datatype.boolean(),
        subscribers_count: faker.datatype.number(),
        network_count: faker.datatype.number(),
        code_of_conduct: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          body: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          spdx_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
        },
        forks: faker.datatype.number(),
        open_issues: faker.datatype.number(),
        watchers: faker.datatype.number(),
        allow_forking: faker.datatype.boolean(),
      })),
      304: null,
      401: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/user/teams': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        name: faker.lorem.slug(),
        slug: faker.lorem.slug(),
        description: faker.lorem.slug(),
        privacy: faker.random.arrayElement(['closed', 'secret']),
        permission: faker.lorem.slug(),
        members_url: faker.lorem.slug(),
        repositories_url: faker.internet.url(),
        parent: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          members_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          description: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          html_url: faker.internet.url(),
          repositories_url: faker.internet.url(),
          slug: faker.lorem.slug(),
          ldap_dn: faker.lorem.slug(),
        },
        members_count: faker.datatype.number(),
        repos_count: faker.datatype.number(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        organization: {
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          hooks_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          members_url: faker.lorem.slug(),
          public_members_url: faker.lorem.slug(),
          avatar_url: faker.lorem.slug(),
          description: faker.lorem.slug(),
          name: faker.lorem.slug(),
          company: faker.lorem.slug(),
          blog: faker.internet.url(),
          location: faker.lorem.slug(),
          email: faker.internet.exampleEmail(),
          twitter_username: faker.lorem.slug(),
          is_verified: faker.datatype.boolean(),
          has_organization_projects: faker.datatype.boolean(),
          has_repository_projects: faker.datatype.boolean(),
          public_repos: faker.datatype.number(),
          public_gists: faker.datatype.number(),
          followers: faker.datatype.number(),
          following: faker.datatype.number(),
          html_url: faker.internet.url(),
          created_at: faker.date.recent(),
          type: faker.lorem.slug(),
          total_private_repos: faker.datatype.number(),
          owned_private_repos: faker.datatype.number(),
          private_gists: faker.datatype.number(),
          disk_usage: faker.datatype.number(),
          collaborators: faker.datatype.number(),
          billing_email: faker.internet.exampleEmail(),
          plan: {
            name: faker.lorem.slug(),
            space: faker.datatype.number(),
            private_repos: faker.datatype.number(),
            filled_seats: faker.datatype.number(),
            seats: faker.datatype.number(),
          },
          default_repository_permission: faker.lorem.slug(),
          members_can_create_repositories: faker.datatype.boolean(),
          two_factor_requirement_enabled: faker.datatype.boolean(),
          members_allowed_repository_creation_type: faker.lorem.slug(),
          members_can_create_public_repositories: faker.datatype.boolean(),
          members_can_create_private_repositories: faker.datatype.boolean(),
          members_can_create_internal_repositories: faker.datatype.boolean(),
          members_can_create_pages: faker.datatype.boolean(),
          members_can_create_public_pages: faker.datatype.boolean(),
          members_can_create_private_pages: faker.datatype.boolean(),
          members_can_fork_private_repositories: faker.datatype.boolean(),
          updated_at: faker.date.recent(),
        },
        ldap_dn: faker.lorem.slug(),
      })),
      304: null,
      403: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/users': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        email: faker.lorem.slug(),
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        starred_at: faker.lorem.slug(),
      })),
      304: null,
    },
  },
  '/users/:username': {
    get: {
      200: null,
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
    },
  },
  '/users/:username/events': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.lorem.slug(),
        type: faker.lorem.slug(),
        actor: {
          id: faker.datatype.number(),
          login: faker.lorem.slug(),
          display_login: faker.lorem.slug(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          avatar_url: faker.internet.url(),
        },
        repo: {
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        org: {
          id: faker.datatype.number(),
          login: faker.lorem.slug(),
          display_login: faker.lorem.slug(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          avatar_url: faker.internet.url(),
        },
        payload: {
          action: faker.lorem.slug(),
          issue: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            repository_url: faker.internet.url(),
            labels_url: faker.lorem.slug(),
            comments_url: faker.internet.url(),
            events_url: faker.internet.url(),
            html_url: faker.internet.url(),
            number: faker.datatype.number(),
            state: faker.lorem.slug(),
            title: faker.lorem.slug(),
            body: faker.lorem.slug(),
            user: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            labels: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            assignee: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            })),
            milestone: {
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.lorem.slug(),
              description: faker.lorem.slug(),
              creator: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              closed_at: faker.date.recent(),
              due_on: faker.date.recent(),
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.lorem.slug(),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.date.recent(),
              diff_url: faker.internet.url(),
              html_url: faker.internet.url(),
              patch_url: faker.internet.url(),
              url: faker.internet.url(),
            },
            closed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            body_html: faker.lorem.slug(),
            body_text: faker.lorem.slug(),
            timeline_url: faker.internet.url(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              license: {
                key: faker.lorem.slug(),
                name: faker.lorem.slug(),
                url: faker.internet.url(),
                spdx_id: faker.lorem.slug(),
                node_id: faker.lorem.slug(),
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.date.recent(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                name: faker.lorem.slug(),
                full_name: faker.lorem.slug(),
                owner: {
                  login: faker.lorem.slug(),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(),
                  avatar_url: faker.lorem.slug(),
                  gravatar_id: faker.lorem.slug(),
                  url: faker.lorem.slug(),
                  html_url: faker.lorem.slug(),
                  followers_url: faker.lorem.slug(),
                  following_url: faker.lorem.slug(),
                  gists_url: faker.lorem.slug(),
                  starred_url: faker.lorem.slug(),
                  subscriptions_url: faker.lorem.slug(),
                  organizations_url: faker.lorem.slug(),
                  repos_url: faker.lorem.slug(),
                  events_url: faker.lorem.slug(),
                  received_events_url: faker.lorem.slug(),
                  type: faker.lorem.slug(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.lorem.slug(),
                description: faker.lorem.slug(),
                fork: faker.datatype.boolean(),
                url: faker.lorem.slug(),
                archive_url: faker.lorem.slug(),
                assignees_url: faker.lorem.slug(),
                blobs_url: faker.lorem.slug(),
                branches_url: faker.lorem.slug(),
                collaborators_url: faker.lorem.slug(),
                comments_url: faker.lorem.slug(),
                commits_url: faker.lorem.slug(),
                compare_url: faker.lorem.slug(),
                contents_url: faker.lorem.slug(),
                contributors_url: faker.lorem.slug(),
                deployments_url: faker.lorem.slug(),
                downloads_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                forks_url: faker.lorem.slug(),
                git_commits_url: faker.lorem.slug(),
                git_refs_url: faker.lorem.slug(),
                git_tags_url: faker.lorem.slug(),
                git_url: faker.lorem.slug(),
                issue_comment_url: faker.lorem.slug(),
                issue_events_url: faker.lorem.slug(),
                issues_url: faker.lorem.slug(),
                keys_url: faker.lorem.slug(),
                labels_url: faker.lorem.slug(),
                languages_url: faker.lorem.slug(),
                merges_url: faker.lorem.slug(),
                milestones_url: faker.lorem.slug(),
                notifications_url: faker.lorem.slug(),
                pulls_url: faker.lorem.slug(),
                releases_url: faker.lorem.slug(),
                ssh_url: faker.lorem.slug(),
                stargazers_url: faker.lorem.slug(),
                statuses_url: faker.lorem.slug(),
                subscribers_url: faker.lorem.slug(),
                subscription_url: faker.lorem.slug(),
                tags_url: faker.lorem.slug(),
                teams_url: faker.lorem.slug(),
                trees_url: faker.lorem.slug(),
                clone_url: faker.lorem.slug(),
                mirror_url: faker.lorem.slug(),
                hooks_url: faker.lorem.slug(),
                svn_url: faker.lorem.slug(),
                homepage: faker.lorem.slug(),
                language: faker.lorem.slug(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(),
                pushed_at: faker.lorem.slug(),
                created_at: faker.lorem.slug(),
                updated_at: faker.lorem.slug(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(),
              starred_at: faker.lorem.slug(),
            },
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          },
          comment: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            body_text: faker.lorem.slug(),
            body_html: faker.lorem.slug(),
            html_url: faker.internet.url(),
            user: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            issue_url: faker.internet.url(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          },
          pages: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            page_name: faker.lorem.slug(),
            title: faker.lorem.slug(),
            summary: faker.lorem.slug(),
            action: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
          })),
        },
        public: faker.datatype.boolean(),
        created_at: faker.date.recent(),
      })),
    },
  },
  '/users/:username/events/orgs/:org': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.lorem.slug(),
        type: faker.lorem.slug(),
        actor: {
          id: faker.datatype.number(),
          login: faker.lorem.slug(),
          display_login: faker.lorem.slug(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          avatar_url: faker.internet.url(),
        },
        repo: {
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        org: {
          id: faker.datatype.number(),
          login: faker.lorem.slug(),
          display_login: faker.lorem.slug(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          avatar_url: faker.internet.url(),
        },
        payload: {
          action: faker.lorem.slug(),
          issue: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            repository_url: faker.internet.url(),
            labels_url: faker.lorem.slug(),
            comments_url: faker.internet.url(),
            events_url: faker.internet.url(),
            html_url: faker.internet.url(),
            number: faker.datatype.number(),
            state: faker.lorem.slug(),
            title: faker.lorem.slug(),
            body: faker.lorem.slug(),
            user: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            labels: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            assignee: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            })),
            milestone: {
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.lorem.slug(),
              description: faker.lorem.slug(),
              creator: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              closed_at: faker.date.recent(),
              due_on: faker.date.recent(),
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.lorem.slug(),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.date.recent(),
              diff_url: faker.internet.url(),
              html_url: faker.internet.url(),
              patch_url: faker.internet.url(),
              url: faker.internet.url(),
            },
            closed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            body_html: faker.lorem.slug(),
            body_text: faker.lorem.slug(),
            timeline_url: faker.internet.url(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              license: {
                key: faker.lorem.slug(),
                name: faker.lorem.slug(),
                url: faker.internet.url(),
                spdx_id: faker.lorem.slug(),
                node_id: faker.lorem.slug(),
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.date.recent(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                name: faker.lorem.slug(),
                full_name: faker.lorem.slug(),
                owner: {
                  login: faker.lorem.slug(),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(),
                  avatar_url: faker.lorem.slug(),
                  gravatar_id: faker.lorem.slug(),
                  url: faker.lorem.slug(),
                  html_url: faker.lorem.slug(),
                  followers_url: faker.lorem.slug(),
                  following_url: faker.lorem.slug(),
                  gists_url: faker.lorem.slug(),
                  starred_url: faker.lorem.slug(),
                  subscriptions_url: faker.lorem.slug(),
                  organizations_url: faker.lorem.slug(),
                  repos_url: faker.lorem.slug(),
                  events_url: faker.lorem.slug(),
                  received_events_url: faker.lorem.slug(),
                  type: faker.lorem.slug(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.lorem.slug(),
                description: faker.lorem.slug(),
                fork: faker.datatype.boolean(),
                url: faker.lorem.slug(),
                archive_url: faker.lorem.slug(),
                assignees_url: faker.lorem.slug(),
                blobs_url: faker.lorem.slug(),
                branches_url: faker.lorem.slug(),
                collaborators_url: faker.lorem.slug(),
                comments_url: faker.lorem.slug(),
                commits_url: faker.lorem.slug(),
                compare_url: faker.lorem.slug(),
                contents_url: faker.lorem.slug(),
                contributors_url: faker.lorem.slug(),
                deployments_url: faker.lorem.slug(),
                downloads_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                forks_url: faker.lorem.slug(),
                git_commits_url: faker.lorem.slug(),
                git_refs_url: faker.lorem.slug(),
                git_tags_url: faker.lorem.slug(),
                git_url: faker.lorem.slug(),
                issue_comment_url: faker.lorem.slug(),
                issue_events_url: faker.lorem.slug(),
                issues_url: faker.lorem.slug(),
                keys_url: faker.lorem.slug(),
                labels_url: faker.lorem.slug(),
                languages_url: faker.lorem.slug(),
                merges_url: faker.lorem.slug(),
                milestones_url: faker.lorem.slug(),
                notifications_url: faker.lorem.slug(),
                pulls_url: faker.lorem.slug(),
                releases_url: faker.lorem.slug(),
                ssh_url: faker.lorem.slug(),
                stargazers_url: faker.lorem.slug(),
                statuses_url: faker.lorem.slug(),
                subscribers_url: faker.lorem.slug(),
                subscription_url: faker.lorem.slug(),
                tags_url: faker.lorem.slug(),
                teams_url: faker.lorem.slug(),
                trees_url: faker.lorem.slug(),
                clone_url: faker.lorem.slug(),
                mirror_url: faker.lorem.slug(),
                hooks_url: faker.lorem.slug(),
                svn_url: faker.lorem.slug(),
                homepage: faker.lorem.slug(),
                language: faker.lorem.slug(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(),
                pushed_at: faker.lorem.slug(),
                created_at: faker.lorem.slug(),
                updated_at: faker.lorem.slug(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(),
              starred_at: faker.lorem.slug(),
            },
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          },
          comment: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            body_text: faker.lorem.slug(),
            body_html: faker.lorem.slug(),
            html_url: faker.internet.url(),
            user: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            issue_url: faker.internet.url(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          },
          pages: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            page_name: faker.lorem.slug(),
            title: faker.lorem.slug(),
            summary: faker.lorem.slug(),
            action: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
          })),
        },
        public: faker.datatype.boolean(),
        created_at: faker.date.recent(),
      })),
    },
  },
  '/users/:username/events/public': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.lorem.slug(),
        type: faker.lorem.slug(),
        actor: {
          id: faker.datatype.number(),
          login: faker.lorem.slug(),
          display_login: faker.lorem.slug(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          avatar_url: faker.internet.url(),
        },
        repo: {
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        org: {
          id: faker.datatype.number(),
          login: faker.lorem.slug(),
          display_login: faker.lorem.slug(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          avatar_url: faker.internet.url(),
        },
        payload: {
          action: faker.lorem.slug(),
          issue: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            repository_url: faker.internet.url(),
            labels_url: faker.lorem.slug(),
            comments_url: faker.internet.url(),
            events_url: faker.internet.url(),
            html_url: faker.internet.url(),
            number: faker.datatype.number(),
            state: faker.lorem.slug(),
            title: faker.lorem.slug(),
            body: faker.lorem.slug(),
            user: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            labels: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            assignee: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            })),
            milestone: {
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.lorem.slug(),
              description: faker.lorem.slug(),
              creator: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              closed_at: faker.date.recent(),
              due_on: faker.date.recent(),
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.lorem.slug(),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.date.recent(),
              diff_url: faker.internet.url(),
              html_url: faker.internet.url(),
              patch_url: faker.internet.url(),
              url: faker.internet.url(),
            },
            closed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            body_html: faker.lorem.slug(),
            body_text: faker.lorem.slug(),
            timeline_url: faker.internet.url(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              license: {
                key: faker.lorem.slug(),
                name: faker.lorem.slug(),
                url: faker.internet.url(),
                spdx_id: faker.lorem.slug(),
                node_id: faker.lorem.slug(),
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.date.recent(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                name: faker.lorem.slug(),
                full_name: faker.lorem.slug(),
                owner: {
                  login: faker.lorem.slug(),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(),
                  avatar_url: faker.lorem.slug(),
                  gravatar_id: faker.lorem.slug(),
                  url: faker.lorem.slug(),
                  html_url: faker.lorem.slug(),
                  followers_url: faker.lorem.slug(),
                  following_url: faker.lorem.slug(),
                  gists_url: faker.lorem.slug(),
                  starred_url: faker.lorem.slug(),
                  subscriptions_url: faker.lorem.slug(),
                  organizations_url: faker.lorem.slug(),
                  repos_url: faker.lorem.slug(),
                  events_url: faker.lorem.slug(),
                  received_events_url: faker.lorem.slug(),
                  type: faker.lorem.slug(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.lorem.slug(),
                description: faker.lorem.slug(),
                fork: faker.datatype.boolean(),
                url: faker.lorem.slug(),
                archive_url: faker.lorem.slug(),
                assignees_url: faker.lorem.slug(),
                blobs_url: faker.lorem.slug(),
                branches_url: faker.lorem.slug(),
                collaborators_url: faker.lorem.slug(),
                comments_url: faker.lorem.slug(),
                commits_url: faker.lorem.slug(),
                compare_url: faker.lorem.slug(),
                contents_url: faker.lorem.slug(),
                contributors_url: faker.lorem.slug(),
                deployments_url: faker.lorem.slug(),
                downloads_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                forks_url: faker.lorem.slug(),
                git_commits_url: faker.lorem.slug(),
                git_refs_url: faker.lorem.slug(),
                git_tags_url: faker.lorem.slug(),
                git_url: faker.lorem.slug(),
                issue_comment_url: faker.lorem.slug(),
                issue_events_url: faker.lorem.slug(),
                issues_url: faker.lorem.slug(),
                keys_url: faker.lorem.slug(),
                labels_url: faker.lorem.slug(),
                languages_url: faker.lorem.slug(),
                merges_url: faker.lorem.slug(),
                milestones_url: faker.lorem.slug(),
                notifications_url: faker.lorem.slug(),
                pulls_url: faker.lorem.slug(),
                releases_url: faker.lorem.slug(),
                ssh_url: faker.lorem.slug(),
                stargazers_url: faker.lorem.slug(),
                statuses_url: faker.lorem.slug(),
                subscribers_url: faker.lorem.slug(),
                subscription_url: faker.lorem.slug(),
                tags_url: faker.lorem.slug(),
                teams_url: faker.lorem.slug(),
                trees_url: faker.lorem.slug(),
                clone_url: faker.lorem.slug(),
                mirror_url: faker.lorem.slug(),
                hooks_url: faker.lorem.slug(),
                svn_url: faker.lorem.slug(),
                homepage: faker.lorem.slug(),
                language: faker.lorem.slug(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(),
                pushed_at: faker.lorem.slug(),
                created_at: faker.lorem.slug(),
                updated_at: faker.lorem.slug(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(),
              starred_at: faker.lorem.slug(),
            },
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          },
          comment: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            body_text: faker.lorem.slug(),
            body_html: faker.lorem.slug(),
            html_url: faker.internet.url(),
            user: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            issue_url: faker.internet.url(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          },
          pages: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            page_name: faker.lorem.slug(),
            title: faker.lorem.slug(),
            summary: faker.lorem.slug(),
            action: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
          })),
        },
        public: faker.datatype.boolean(),
        created_at: faker.date.recent(),
      })),
    },
  },
  '/users/:username/followers': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        email: faker.lorem.slug(),
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        starred_at: faker.lorem.slug(),
      })),
    },
  },
  '/users/:username/following': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        name: faker.lorem.slug(),
        email: faker.lorem.slug(),
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        avatar_url: faker.internet.url(),
        gravatar_id: faker.lorem.slug(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        followers_url: faker.internet.url(),
        following_url: faker.lorem.slug(),
        gists_url: faker.lorem.slug(),
        starred_url: faker.lorem.slug(),
        subscriptions_url: faker.internet.url(),
        organizations_url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.lorem.slug(),
        received_events_url: faker.internet.url(),
        type: faker.lorem.slug(),
        site_admin: faker.datatype.boolean(),
        starred_at: faker.lorem.slug(),
      })),
    },
  },
  '/users/:username/following/:targetUser': { get: { 204: null, 404: null } },
  '/users/:username/gists': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        url: faker.internet.url(),
        forks_url: faker.internet.url(),
        commits_url: faker.internet.url(),
        id: faker.lorem.slug(),
        node_id: faker.lorem.slug(),
        git_pull_url: faker.internet.url(),
        git_push_url: faker.internet.url(),
        html_url: faker.internet.url(),
        files: [...new Array(5).keys()]
          .map(_ => ({
            [faker.lorem.word()]: {
              filename: faker.lorem.slug(),
              type: faker.lorem.slug(),
              language: faker.lorem.slug(),
              raw_url: faker.lorem.slug(),
              size: faker.datatype.number(),
            },
          }))
          .reduce((acc, next) => Object.assign(acc, next), {}),
        public: faker.datatype.boolean(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        description: faker.lorem.slug(),
        comments: faker.datatype.number(),
        user: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        comments_url: faker.internet.url(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        truncated: faker.datatype.boolean(),
        forks: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
        history: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => null),
      })),
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/users/:username/gpg_keys': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        primary_key_id: faker.datatype.number(),
        key_id: faker.lorem.slug(),
        public_key: faker.lorem.slug(),
        emails: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          email: faker.lorem.slug(),
          verified: faker.datatype.boolean(),
        })),
        subkeys: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          id: faker.datatype.number(),
          primary_key_id: faker.datatype.number(),
          key_id: faker.lorem.slug(),
          public_key: faker.lorem.slug(),
          emails: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
          subkeys: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => null),
          can_sign: faker.datatype.boolean(),
          can_encrypt_comms: faker.datatype.boolean(),
          can_encrypt_storage: faker.datatype.boolean(),
          can_certify: faker.datatype.boolean(),
          created_at: faker.lorem.slug(),
          expires_at: faker.lorem.slug(),
          raw_key: faker.lorem.slug(),
        })),
        can_sign: faker.datatype.boolean(),
        can_encrypt_comms: faker.datatype.boolean(),
        can_encrypt_storage: faker.datatype.boolean(),
        can_certify: faker.datatype.boolean(),
        created_at: faker.date.recent(),
        expires_at: faker.date.recent(),
        raw_key: faker.lorem.slug(),
      })),
    },
  },
  '/users/:username/hovercard': {
    get: {
      200: {
        contexts: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          message: faker.lorem.slug(),
          octicon: faker.lorem.slug(),
        })),
      },
      404: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        url: faker.lorem.slug(),
        status: faker.lorem.slug(),
      },
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/users/:username/installation': {
    get: {
      200: {
        id: faker.datatype.number(),
        account: null,
        repository_selection: faker.random.arrayElement(['all', 'selected']),
        access_tokens_url: faker.internet.url(),
        repositories_url: faker.internet.url(),
        html_url: faker.internet.url(),
        app_id: faker.datatype.number(),
        target_id: faker.datatype.number(),
        target_type: faker.lorem.slug(),
        permissions: {
          actions: faker.random.arrayElement(['read', 'write']),
          administration: faker.random.arrayElement(['read', 'write']),
          checks: faker.random.arrayElement(['read', 'write']),
          contents: faker.random.arrayElement(['read', 'write']),
          deployments: faker.random.arrayElement(['read', 'write']),
          environments: faker.random.arrayElement(['read', 'write']),
          issues: faker.random.arrayElement(['read', 'write']),
          metadata: faker.random.arrayElement(['read', 'write']),
          packages: faker.random.arrayElement(['read', 'write']),
          pages: faker.random.arrayElement(['read', 'write']),
          pull_requests: faker.random.arrayElement(['read', 'write']),
          repository_hooks: faker.random.arrayElement(['read', 'write']),
          repository_projects: faker.random.arrayElement([
            'read',
            'write',
            'admin',
          ]),
          secret_scanning_alerts: faker.random.arrayElement(['read', 'write']),
          secrets: faker.random.arrayElement(['read', 'write']),
          security_events: faker.random.arrayElement(['read', 'write']),
          single_file: faker.random.arrayElement(['read', 'write']),
          statuses: faker.random.arrayElement(['read', 'write']),
          vulnerability_alerts: faker.random.arrayElement(['read', 'write']),
          workflows: faker.random.arrayElement(['write']),
          members: faker.random.arrayElement(['read', 'write']),
          organization_administration: faker.random.arrayElement([
            'read',
            'write',
          ]),
          organization_hooks: faker.random.arrayElement(['read', 'write']),
          organization_plan: faker.random.arrayElement(['read']),
          organization_projects: faker.random.arrayElement([
            'read',
            'write',
            'admin',
          ]),
          organization_packages: faker.random.arrayElement(['read', 'write']),
          organization_secrets: faker.random.arrayElement(['read', 'write']),
          organization_self_hosted_runners: faker.random.arrayElement([
            'read',
            'write',
          ]),
          organization_user_blocking: faker.random.arrayElement([
            'read',
            'write',
          ]),
          team_discussions: faker.random.arrayElement(['read', 'write']),
          content_references: faker.random.arrayElement(['read', 'write']),
        },
        events: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        single_file_name: faker.lorem.slug(),
        has_multiple_single_files: faker.datatype.boolean(),
        single_file_paths: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        app_slug: faker.lorem.slug(),
        suspended_by: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        suspended_at: faker.date.recent(),
        contact_email: faker.lorem.slug(),
      },
    },
  },
  '/users/:username/keys': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        key: faker.lorem.slug(),
      })),
    },
  },
  '/users/:username/orgs': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        login: faker.lorem.slug(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        url: faker.internet.url(),
        repos_url: faker.internet.url(),
        events_url: faker.internet.url(),
        hooks_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        members_url: faker.lorem.slug(),
        public_members_url: faker.lorem.slug(),
        avatar_url: faker.lorem.slug(),
        description: faker.lorem.slug(),
      })),
    },
  },
  '/users/:username/projects': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        owner_url: faker.internet.url(),
        url: faker.internet.url(),
        html_url: faker.internet.url(),
        columns_url: faker.internet.url(),
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        body: faker.lorem.slug(),
        number: faker.datatype.number(),
        state: faker.lorem.slug(),
        creator: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        organization_permission: faker.random.arrayElement([
          'read',
          'write',
          'admin',
          'none',
        ]),
        private: faker.datatype.boolean(),
      })),
      422: {
        message: faker.lorem.slug(),
        documentation_url: faker.lorem.slug(),
        errors: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => ({
          resource: faker.lorem.slug(),
          field: faker.lorem.slug(),
          message: faker.lorem.slug(),
          code: faker.lorem.slug(),
          index: faker.datatype.number(),
          value: null,
        })),
      },
    },
  },
  '/users/:username/received_events': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.lorem.slug(),
        type: faker.lorem.slug(),
        actor: {
          id: faker.datatype.number(),
          login: faker.lorem.slug(),
          display_login: faker.lorem.slug(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          avatar_url: faker.internet.url(),
        },
        repo: {
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        org: {
          id: faker.datatype.number(),
          login: faker.lorem.slug(),
          display_login: faker.lorem.slug(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          avatar_url: faker.internet.url(),
        },
        payload: {
          action: faker.lorem.slug(),
          issue: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            repository_url: faker.internet.url(),
            labels_url: faker.lorem.slug(),
            comments_url: faker.internet.url(),
            events_url: faker.internet.url(),
            html_url: faker.internet.url(),
            number: faker.datatype.number(),
            state: faker.lorem.slug(),
            title: faker.lorem.slug(),
            body: faker.lorem.slug(),
            user: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            labels: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            assignee: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            })),
            milestone: {
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.lorem.slug(),
              description: faker.lorem.slug(),
              creator: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              closed_at: faker.date.recent(),
              due_on: faker.date.recent(),
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.lorem.slug(),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.date.recent(),
              diff_url: faker.internet.url(),
              html_url: faker.internet.url(),
              patch_url: faker.internet.url(),
              url: faker.internet.url(),
            },
            closed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            body_html: faker.lorem.slug(),
            body_text: faker.lorem.slug(),
            timeline_url: faker.internet.url(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              license: {
                key: faker.lorem.slug(),
                name: faker.lorem.slug(),
                url: faker.internet.url(),
                spdx_id: faker.lorem.slug(),
                node_id: faker.lorem.slug(),
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.date.recent(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                name: faker.lorem.slug(),
                full_name: faker.lorem.slug(),
                owner: {
                  login: faker.lorem.slug(),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(),
                  avatar_url: faker.lorem.slug(),
                  gravatar_id: faker.lorem.slug(),
                  url: faker.lorem.slug(),
                  html_url: faker.lorem.slug(),
                  followers_url: faker.lorem.slug(),
                  following_url: faker.lorem.slug(),
                  gists_url: faker.lorem.slug(),
                  starred_url: faker.lorem.slug(),
                  subscriptions_url: faker.lorem.slug(),
                  organizations_url: faker.lorem.slug(),
                  repos_url: faker.lorem.slug(),
                  events_url: faker.lorem.slug(),
                  received_events_url: faker.lorem.slug(),
                  type: faker.lorem.slug(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.lorem.slug(),
                description: faker.lorem.slug(),
                fork: faker.datatype.boolean(),
                url: faker.lorem.slug(),
                archive_url: faker.lorem.slug(),
                assignees_url: faker.lorem.slug(),
                blobs_url: faker.lorem.slug(),
                branches_url: faker.lorem.slug(),
                collaborators_url: faker.lorem.slug(),
                comments_url: faker.lorem.slug(),
                commits_url: faker.lorem.slug(),
                compare_url: faker.lorem.slug(),
                contents_url: faker.lorem.slug(),
                contributors_url: faker.lorem.slug(),
                deployments_url: faker.lorem.slug(),
                downloads_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                forks_url: faker.lorem.slug(),
                git_commits_url: faker.lorem.slug(),
                git_refs_url: faker.lorem.slug(),
                git_tags_url: faker.lorem.slug(),
                git_url: faker.lorem.slug(),
                issue_comment_url: faker.lorem.slug(),
                issue_events_url: faker.lorem.slug(),
                issues_url: faker.lorem.slug(),
                keys_url: faker.lorem.slug(),
                labels_url: faker.lorem.slug(),
                languages_url: faker.lorem.slug(),
                merges_url: faker.lorem.slug(),
                milestones_url: faker.lorem.slug(),
                notifications_url: faker.lorem.slug(),
                pulls_url: faker.lorem.slug(),
                releases_url: faker.lorem.slug(),
                ssh_url: faker.lorem.slug(),
                stargazers_url: faker.lorem.slug(),
                statuses_url: faker.lorem.slug(),
                subscribers_url: faker.lorem.slug(),
                subscription_url: faker.lorem.slug(),
                tags_url: faker.lorem.slug(),
                teams_url: faker.lorem.slug(),
                trees_url: faker.lorem.slug(),
                clone_url: faker.lorem.slug(),
                mirror_url: faker.lorem.slug(),
                hooks_url: faker.lorem.slug(),
                svn_url: faker.lorem.slug(),
                homepage: faker.lorem.slug(),
                language: faker.lorem.slug(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(),
                pushed_at: faker.lorem.slug(),
                created_at: faker.lorem.slug(),
                updated_at: faker.lorem.slug(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(),
              starred_at: faker.lorem.slug(),
            },
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          },
          comment: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            body_text: faker.lorem.slug(),
            body_html: faker.lorem.slug(),
            html_url: faker.internet.url(),
            user: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            issue_url: faker.internet.url(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          },
          pages: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            page_name: faker.lorem.slug(),
            title: faker.lorem.slug(),
            summary: faker.lorem.slug(),
            action: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
          })),
        },
        public: faker.datatype.boolean(),
        created_at: faker.date.recent(),
      })),
    },
  },
  '/users/:username/received_events/public': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.lorem.slug(),
        type: faker.lorem.slug(),
        actor: {
          id: faker.datatype.number(),
          login: faker.lorem.slug(),
          display_login: faker.lorem.slug(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          avatar_url: faker.internet.url(),
        },
        repo: {
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
        },
        org: {
          id: faker.datatype.number(),
          login: faker.lorem.slug(),
          display_login: faker.lorem.slug(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          avatar_url: faker.internet.url(),
        },
        payload: {
          action: faker.lorem.slug(),
          issue: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            repository_url: faker.internet.url(),
            labels_url: faker.lorem.slug(),
            comments_url: faker.internet.url(),
            events_url: faker.internet.url(),
            html_url: faker.internet.url(),
            number: faker.datatype.number(),
            state: faker.lorem.slug(),
            title: faker.lorem.slug(),
            body: faker.lorem.slug(),
            user: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            labels: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => null),
            assignee: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            assignees: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            })),
            milestone: {
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              labels_url: faker.internet.url(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              number: faker.datatype.number(),
              state: faker.random.arrayElement(['open', 'closed']),
              title: faker.lorem.slug(),
              description: faker.lorem.slug(),
              creator: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              open_issues: faker.datatype.number(),
              closed_issues: faker.datatype.number(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              closed_at: faker.date.recent(),
              due_on: faker.date.recent(),
            },
            locked: faker.datatype.boolean(),
            active_lock_reason: faker.lorem.slug(),
            comments: faker.datatype.number(),
            pull_request: {
              merged_at: faker.date.recent(),
              diff_url: faker.internet.url(),
              html_url: faker.internet.url(),
              patch_url: faker.internet.url(),
              url: faker.internet.url(),
            },
            closed_at: faker.date.recent(),
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            draft: faker.datatype.boolean(),
            closed_by: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            body_html: faker.lorem.slug(),
            body_text: faker.lorem.slug(),
            timeline_url: faker.internet.url(),
            repository: {
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              full_name: faker.lorem.slug(),
              license: {
                key: faker.lorem.slug(),
                name: faker.lorem.slug(),
                url: faker.internet.url(),
                spdx_id: faker.lorem.slug(),
                node_id: faker.lorem.slug(),
                html_url: faker.internet.url(),
              },
              organization: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              forks: faker.datatype.number(),
              permissions: {
                admin: faker.datatype.boolean(),
                pull: faker.datatype.boolean(),
                triage: faker.datatype.boolean(),
                push: faker.datatype.boolean(),
                maintain: faker.datatype.boolean(),
              },
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              private: faker.datatype.boolean(),
              html_url: faker.internet.url(),
              description: faker.lorem.slug(),
              fork: faker.datatype.boolean(),
              url: faker.internet.url(),
              archive_url: faker.lorem.slug(),
              assignees_url: faker.lorem.slug(),
              blobs_url: faker.lorem.slug(),
              branches_url: faker.lorem.slug(),
              collaborators_url: faker.lorem.slug(),
              comments_url: faker.lorem.slug(),
              commits_url: faker.lorem.slug(),
              compare_url: faker.lorem.slug(),
              contents_url: faker.lorem.slug(),
              contributors_url: faker.internet.url(),
              deployments_url: faker.internet.url(),
              downloads_url: faker.internet.url(),
              events_url: faker.internet.url(),
              forks_url: faker.internet.url(),
              git_commits_url: faker.lorem.slug(),
              git_refs_url: faker.lorem.slug(),
              git_tags_url: faker.lorem.slug(),
              git_url: faker.lorem.slug(),
              issue_comment_url: faker.lorem.slug(),
              issue_events_url: faker.lorem.slug(),
              issues_url: faker.lorem.slug(),
              keys_url: faker.lorem.slug(),
              labels_url: faker.lorem.slug(),
              languages_url: faker.internet.url(),
              merges_url: faker.internet.url(),
              milestones_url: faker.lorem.slug(),
              notifications_url: faker.lorem.slug(),
              pulls_url: faker.lorem.slug(),
              releases_url: faker.lorem.slug(),
              ssh_url: faker.lorem.slug(),
              stargazers_url: faker.internet.url(),
              statuses_url: faker.lorem.slug(),
              subscribers_url: faker.internet.url(),
              subscription_url: faker.internet.url(),
              tags_url: faker.internet.url(),
              teams_url: faker.internet.url(),
              trees_url: faker.lorem.slug(),
              clone_url: faker.lorem.slug(),
              mirror_url: faker.internet.url(),
              hooks_url: faker.internet.url(),
              svn_url: faker.internet.url(),
              homepage: faker.internet.url(),
              language: faker.lorem.slug(),
              forks_count: faker.datatype.number(),
              stargazers_count: faker.datatype.number(),
              watchers_count: faker.datatype.number(),
              size: faker.datatype.number(),
              default_branch: faker.lorem.slug(),
              open_issues_count: faker.datatype.number(),
              is_template: faker.datatype.boolean(),
              topics: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              has_issues: faker.datatype.boolean(),
              has_projects: faker.datatype.boolean(),
              has_wiki: faker.datatype.boolean(),
              has_pages: faker.datatype.boolean(),
              has_downloads: faker.datatype.boolean(),
              archived: faker.datatype.boolean(),
              disabled: faker.datatype.boolean(),
              visibility: faker.lorem.slug(),
              pushed_at: faker.date.recent(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              allow_rebase_merge: faker.datatype.boolean(),
              template_repository: {
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                name: faker.lorem.slug(),
                full_name: faker.lorem.slug(),
                owner: {
                  login: faker.lorem.slug(),
                  id: faker.datatype.number(),
                  node_id: faker.lorem.slug(),
                  avatar_url: faker.lorem.slug(),
                  gravatar_id: faker.lorem.slug(),
                  url: faker.lorem.slug(),
                  html_url: faker.lorem.slug(),
                  followers_url: faker.lorem.slug(),
                  following_url: faker.lorem.slug(),
                  gists_url: faker.lorem.slug(),
                  starred_url: faker.lorem.slug(),
                  subscriptions_url: faker.lorem.slug(),
                  organizations_url: faker.lorem.slug(),
                  repos_url: faker.lorem.slug(),
                  events_url: faker.lorem.slug(),
                  received_events_url: faker.lorem.slug(),
                  type: faker.lorem.slug(),
                  site_admin: faker.datatype.boolean(),
                },
                private: faker.datatype.boolean(),
                html_url: faker.lorem.slug(),
                description: faker.lorem.slug(),
                fork: faker.datatype.boolean(),
                url: faker.lorem.slug(),
                archive_url: faker.lorem.slug(),
                assignees_url: faker.lorem.slug(),
                blobs_url: faker.lorem.slug(),
                branches_url: faker.lorem.slug(),
                collaborators_url: faker.lorem.slug(),
                comments_url: faker.lorem.slug(),
                commits_url: faker.lorem.slug(),
                compare_url: faker.lorem.slug(),
                contents_url: faker.lorem.slug(),
                contributors_url: faker.lorem.slug(),
                deployments_url: faker.lorem.slug(),
                downloads_url: faker.lorem.slug(),
                events_url: faker.lorem.slug(),
                forks_url: faker.lorem.slug(),
                git_commits_url: faker.lorem.slug(),
                git_refs_url: faker.lorem.slug(),
                git_tags_url: faker.lorem.slug(),
                git_url: faker.lorem.slug(),
                issue_comment_url: faker.lorem.slug(),
                issue_events_url: faker.lorem.slug(),
                issues_url: faker.lorem.slug(),
                keys_url: faker.lorem.slug(),
                labels_url: faker.lorem.slug(),
                languages_url: faker.lorem.slug(),
                merges_url: faker.lorem.slug(),
                milestones_url: faker.lorem.slug(),
                notifications_url: faker.lorem.slug(),
                pulls_url: faker.lorem.slug(),
                releases_url: faker.lorem.slug(),
                ssh_url: faker.lorem.slug(),
                stargazers_url: faker.lorem.slug(),
                statuses_url: faker.lorem.slug(),
                subscribers_url: faker.lorem.slug(),
                subscription_url: faker.lorem.slug(),
                tags_url: faker.lorem.slug(),
                teams_url: faker.lorem.slug(),
                trees_url: faker.lorem.slug(),
                clone_url: faker.lorem.slug(),
                mirror_url: faker.lorem.slug(),
                hooks_url: faker.lorem.slug(),
                svn_url: faker.lorem.slug(),
                homepage: faker.lorem.slug(),
                language: faker.lorem.slug(),
                forks_count: faker.datatype.number(),
                stargazers_count: faker.datatype.number(),
                watchers_count: faker.datatype.number(),
                size: faker.datatype.number(),
                default_branch: faker.lorem.slug(),
                open_issues_count: faker.datatype.number(),
                is_template: faker.datatype.boolean(),
                topics: [
                  ...new Array(
                    faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                  ).keys(),
                ].map(_ => faker.lorem.slug()),
                has_issues: faker.datatype.boolean(),
                has_projects: faker.datatype.boolean(),
                has_wiki: faker.datatype.boolean(),
                has_pages: faker.datatype.boolean(),
                has_downloads: faker.datatype.boolean(),
                archived: faker.datatype.boolean(),
                disabled: faker.datatype.boolean(),
                visibility: faker.lorem.slug(),
                pushed_at: faker.lorem.slug(),
                created_at: faker.lorem.slug(),
                updated_at: faker.lorem.slug(),
                permissions: {
                  admin: faker.datatype.boolean(),
                  maintain: faker.datatype.boolean(),
                  push: faker.datatype.boolean(),
                  triage: faker.datatype.boolean(),
                  pull: faker.datatype.boolean(),
                },
                allow_rebase_merge: faker.datatype.boolean(),
                temp_clone_token: faker.lorem.slug(),
                allow_squash_merge: faker.datatype.boolean(),
                allow_auto_merge: faker.datatype.boolean(),
                delete_branch_on_merge: faker.datatype.boolean(),
                allow_update_branch: faker.datatype.boolean(),
                allow_merge_commit: faker.datatype.boolean(),
                subscribers_count: faker.datatype.number(),
                network_count: faker.datatype.number(),
              },
              temp_clone_token: faker.lorem.slug(),
              allow_squash_merge: faker.datatype.boolean(),
              allow_auto_merge: faker.datatype.boolean(),
              delete_branch_on_merge: faker.datatype.boolean(),
              allow_merge_commit: faker.datatype.boolean(),
              allow_forking: faker.datatype.boolean(),
              subscribers_count: faker.datatype.number(),
              network_count: faker.datatype.number(),
              open_issues: faker.datatype.number(),
              watchers: faker.datatype.number(),
              master_branch: faker.lorem.slug(),
              starred_at: faker.lorem.slug(),
            },
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          },
          comment: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            url: faker.internet.url(),
            body: faker.lorem.slug(),
            body_text: faker.lorem.slug(),
            body_html: faker.lorem.slug(),
            html_url: faker.internet.url(),
            user: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            created_at: faker.date.recent(),
            updated_at: faker.date.recent(),
            issue_url: faker.internet.url(),
            author_association: faker.random.arrayElement([
              'COLLABORATOR',
              'CONTRIBUTOR',
              'FIRST_TIMER',
              'FIRST_TIME_CONTRIBUTOR',
              'MANNEQUIN',
              'MEMBER',
              'NONE',
              'OWNER',
            ]),
            performed_via_github_app: {
              id: faker.datatype.number(),
              slug: faker.lorem.slug(),
              node_id: faker.lorem.slug(),
              owner: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
              name: faker.lorem.slug(),
              description: faker.lorem.slug(),
              external_url: faker.internet.url(),
              html_url: faker.internet.url(),
              created_at: faker.date.recent(),
              updated_at: faker.date.recent(),
              permissions: {
                issues: faker.lorem.slug(),
                checks: faker.lorem.slug(),
                metadata: faker.lorem.slug(),
                contents: faker.lorem.slug(),
                deployments: faker.lorem.slug(),
              },
              events: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              installations_count: faker.datatype.number(),
              client_id: faker.lorem.slug(),
              client_secret: faker.lorem.slug(),
              webhook_secret: faker.lorem.slug(),
              pem: faker.lorem.slug(),
            },
            reactions: {
              url: faker.internet.url(),
              total_count: faker.datatype.number(),
              '+1': faker.datatype.number(),
              '-1': faker.datatype.number(),
              laugh: faker.datatype.number(),
              confused: faker.datatype.number(),
              heart: faker.datatype.number(),
              hooray: faker.datatype.number(),
              eyes: faker.datatype.number(),
              rocket: faker.datatype.number(),
            },
          },
          pages: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            page_name: faker.lorem.slug(),
            title: faker.lorem.slug(),
            summary: faker.lorem.slug(),
            action: faker.lorem.slug(),
            sha: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
          })),
        },
        public: faker.datatype.boolean(),
        created_at: faker.date.recent(),
      })),
    },
  },
  '/users/:username/repos': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        full_name: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.lorem.slug(),
        assignees_url: faker.lorem.slug(),
        blobs_url: faker.lorem.slug(),
        branches_url: faker.lorem.slug(),
        collaborators_url: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        compare_url: faker.lorem.slug(),
        contents_url: faker.lorem.slug(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.lorem.slug(),
        git_refs_url: faker.lorem.slug(),
        git_tags_url: faker.lorem.slug(),
        git_url: faker.lorem.slug(),
        issue_comment_url: faker.lorem.slug(),
        issue_events_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        labels_url: faker.lorem.slug(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        pulls_url: faker.lorem.slug(),
        releases_url: faker.lorem.slug(),
        ssh_url: faker.lorem.slug(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.lorem.slug(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.lorem.slug(),
        clone_url: faker.lorem.slug(),
        mirror_url: faker.lorem.slug(),
        hooks_url: faker.internet.url(),
        svn_url: faker.lorem.slug(),
        homepage: faker.lorem.slug(),
        language: faker.lorem.slug(),
        forks_count: faker.datatype.number(),
        stargazers_count: faker.datatype.number(),
        watchers_count: faker.datatype.number(),
        size: faker.datatype.number(),
        default_branch: faker.lorem.slug(),
        open_issues_count: faker.datatype.number(),
        is_template: faker.datatype.boolean(),
        topics: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
        pushed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        template_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        temp_clone_token: faker.lorem.slug(),
        delete_branch_on_merge: faker.datatype.boolean(),
        subscribers_count: faker.datatype.number(),
        network_count: faker.datatype.number(),
        code_of_conduct: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          body: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          spdx_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
        },
        forks: faker.datatype.number(),
        open_issues: faker.datatype.number(),
        watchers: faker.datatype.number(),
        allow_forking: faker.datatype.boolean(),
      })),
    },
  },
  '/users/:username/site_admin': { put: { 204: null }, delete: { 204: null } },
  '/users/:username/starred': { get: { 200: null } },
  '/users/:username/subscriptions': {
    get: {
      200: [
        ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
      ].map(_ => ({
        id: faker.datatype.number(),
        node_id: faker.lorem.slug(),
        name: faker.lorem.slug(),
        full_name: faker.lorem.slug(),
        owner: {
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        },
        private: faker.datatype.boolean(),
        html_url: faker.internet.url(),
        description: faker.lorem.slug(),
        fork: faker.datatype.boolean(),
        url: faker.internet.url(),
        archive_url: faker.lorem.slug(),
        assignees_url: faker.lorem.slug(),
        blobs_url: faker.lorem.slug(),
        branches_url: faker.lorem.slug(),
        collaborators_url: faker.lorem.slug(),
        comments_url: faker.lorem.slug(),
        commits_url: faker.lorem.slug(),
        compare_url: faker.lorem.slug(),
        contents_url: faker.lorem.slug(),
        contributors_url: faker.internet.url(),
        deployments_url: faker.internet.url(),
        downloads_url: faker.internet.url(),
        events_url: faker.internet.url(),
        forks_url: faker.internet.url(),
        git_commits_url: faker.lorem.slug(),
        git_refs_url: faker.lorem.slug(),
        git_tags_url: faker.lorem.slug(),
        git_url: faker.lorem.slug(),
        issue_comment_url: faker.lorem.slug(),
        issue_events_url: faker.lorem.slug(),
        issues_url: faker.lorem.slug(),
        keys_url: faker.lorem.slug(),
        labels_url: faker.lorem.slug(),
        languages_url: faker.internet.url(),
        merges_url: faker.internet.url(),
        milestones_url: faker.lorem.slug(),
        notifications_url: faker.lorem.slug(),
        pulls_url: faker.lorem.slug(),
        releases_url: faker.lorem.slug(),
        ssh_url: faker.lorem.slug(),
        stargazers_url: faker.internet.url(),
        statuses_url: faker.lorem.slug(),
        subscribers_url: faker.internet.url(),
        subscription_url: faker.internet.url(),
        tags_url: faker.internet.url(),
        teams_url: faker.internet.url(),
        trees_url: faker.lorem.slug(),
        clone_url: faker.lorem.slug(),
        mirror_url: faker.lorem.slug(),
        hooks_url: faker.internet.url(),
        svn_url: faker.lorem.slug(),
        homepage: faker.lorem.slug(),
        language: faker.lorem.slug(),
        forks_count: faker.datatype.number(),
        stargazers_count: faker.datatype.number(),
        watchers_count: faker.datatype.number(),
        size: faker.datatype.number(),
        default_branch: faker.lorem.slug(),
        open_issues_count: faker.datatype.number(),
        is_template: faker.datatype.boolean(),
        topics: [
          ...new Array(faker.datatype.number({ max: MAX_ARRAY_LENGTH })).keys(),
        ].map(_ => faker.lorem.slug()),
        has_issues: faker.datatype.boolean(),
        has_projects: faker.datatype.boolean(),
        has_wiki: faker.datatype.boolean(),
        has_pages: faker.datatype.boolean(),
        has_downloads: faker.datatype.boolean(),
        archived: faker.datatype.boolean(),
        disabled: faker.datatype.boolean(),
        visibility: faker.lorem.slug(),
        pushed_at: faker.date.recent(),
        created_at: faker.date.recent(),
        updated_at: faker.date.recent(),
        permissions: {
          admin: faker.datatype.boolean(),
          maintain: faker.datatype.boolean(),
          push: faker.datatype.boolean(),
          triage: faker.datatype.boolean(),
          pull: faker.datatype.boolean(),
        },
        template_repository: {
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          name: faker.lorem.slug(),
          full_name: faker.lorem.slug(),
          license: {
            key: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
            spdx_id: faker.lorem.slug(),
            node_id: faker.lorem.slug(),
            html_url: faker.internet.url(),
          },
          organization: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          forks: faker.datatype.number(),
          permissions: {
            admin: faker.datatype.boolean(),
            pull: faker.datatype.boolean(),
            triage: faker.datatype.boolean(),
            push: faker.datatype.boolean(),
            maintain: faker.datatype.boolean(),
          },
          owner: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          private: faker.datatype.boolean(),
          html_url: faker.internet.url(),
          description: faker.lorem.slug(),
          fork: faker.datatype.boolean(),
          url: faker.internet.url(),
          archive_url: faker.lorem.slug(),
          assignees_url: faker.lorem.slug(),
          blobs_url: faker.lorem.slug(),
          branches_url: faker.lorem.slug(),
          collaborators_url: faker.lorem.slug(),
          comments_url: faker.lorem.slug(),
          commits_url: faker.lorem.slug(),
          compare_url: faker.lorem.slug(),
          contents_url: faker.lorem.slug(),
          contributors_url: faker.internet.url(),
          deployments_url: faker.internet.url(),
          downloads_url: faker.internet.url(),
          events_url: faker.internet.url(),
          forks_url: faker.internet.url(),
          git_commits_url: faker.lorem.slug(),
          git_refs_url: faker.lorem.slug(),
          git_tags_url: faker.lorem.slug(),
          git_url: faker.lorem.slug(),
          issue_comment_url: faker.lorem.slug(),
          issue_events_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          keys_url: faker.lorem.slug(),
          labels_url: faker.lorem.slug(),
          languages_url: faker.internet.url(),
          merges_url: faker.internet.url(),
          milestones_url: faker.lorem.slug(),
          notifications_url: faker.lorem.slug(),
          pulls_url: faker.lorem.slug(),
          releases_url: faker.lorem.slug(),
          ssh_url: faker.lorem.slug(),
          stargazers_url: faker.internet.url(),
          statuses_url: faker.lorem.slug(),
          subscribers_url: faker.internet.url(),
          subscription_url: faker.internet.url(),
          tags_url: faker.internet.url(),
          teams_url: faker.internet.url(),
          trees_url: faker.lorem.slug(),
          clone_url: faker.lorem.slug(),
          mirror_url: faker.internet.url(),
          hooks_url: faker.internet.url(),
          svn_url: faker.internet.url(),
          homepage: faker.internet.url(),
          language: faker.lorem.slug(),
          forks_count: faker.datatype.number(),
          stargazers_count: faker.datatype.number(),
          watchers_count: faker.datatype.number(),
          size: faker.datatype.number(),
          default_branch: faker.lorem.slug(),
          open_issues_count: faker.datatype.number(),
          is_template: faker.datatype.boolean(),
          topics: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          has_issues: faker.datatype.boolean(),
          has_projects: faker.datatype.boolean(),
          has_wiki: faker.datatype.boolean(),
          has_pages: faker.datatype.boolean(),
          has_downloads: faker.datatype.boolean(),
          archived: faker.datatype.boolean(),
          disabled: faker.datatype.boolean(),
          visibility: faker.lorem.slug(),
          pushed_at: faker.date.recent(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          allow_rebase_merge: faker.datatype.boolean(),
          template_repository: {
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            full_name: faker.lorem.slug(),
            owner: {
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.lorem.slug(),
              gravatar_id: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              followers_url: faker.lorem.slug(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.lorem.slug(),
              organizations_url: faker.lorem.slug(),
              repos_url: faker.lorem.slug(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.lorem.slug(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
            },
            private: faker.datatype.boolean(),
            html_url: faker.lorem.slug(),
            description: faker.lorem.slug(),
            fork: faker.datatype.boolean(),
            url: faker.lorem.slug(),
            archive_url: faker.lorem.slug(),
            assignees_url: faker.lorem.slug(),
            blobs_url: faker.lorem.slug(),
            branches_url: faker.lorem.slug(),
            collaborators_url: faker.lorem.slug(),
            comments_url: faker.lorem.slug(),
            commits_url: faker.lorem.slug(),
            compare_url: faker.lorem.slug(),
            contents_url: faker.lorem.slug(),
            contributors_url: faker.lorem.slug(),
            deployments_url: faker.lorem.slug(),
            downloads_url: faker.lorem.slug(),
            events_url: faker.lorem.slug(),
            forks_url: faker.lorem.slug(),
            git_commits_url: faker.lorem.slug(),
            git_refs_url: faker.lorem.slug(),
            git_tags_url: faker.lorem.slug(),
            git_url: faker.lorem.slug(),
            issue_comment_url: faker.lorem.slug(),
            issue_events_url: faker.lorem.slug(),
            issues_url: faker.lorem.slug(),
            keys_url: faker.lorem.slug(),
            labels_url: faker.lorem.slug(),
            languages_url: faker.lorem.slug(),
            merges_url: faker.lorem.slug(),
            milestones_url: faker.lorem.slug(),
            notifications_url: faker.lorem.slug(),
            pulls_url: faker.lorem.slug(),
            releases_url: faker.lorem.slug(),
            ssh_url: faker.lorem.slug(),
            stargazers_url: faker.lorem.slug(),
            statuses_url: faker.lorem.slug(),
            subscribers_url: faker.lorem.slug(),
            subscription_url: faker.lorem.slug(),
            tags_url: faker.lorem.slug(),
            teams_url: faker.lorem.slug(),
            trees_url: faker.lorem.slug(),
            clone_url: faker.lorem.slug(),
            mirror_url: faker.lorem.slug(),
            hooks_url: faker.lorem.slug(),
            svn_url: faker.lorem.slug(),
            homepage: faker.lorem.slug(),
            language: faker.lorem.slug(),
            forks_count: faker.datatype.number(),
            stargazers_count: faker.datatype.number(),
            watchers_count: faker.datatype.number(),
            size: faker.datatype.number(),
            default_branch: faker.lorem.slug(),
            open_issues_count: faker.datatype.number(),
            is_template: faker.datatype.boolean(),
            topics: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            has_issues: faker.datatype.boolean(),
            has_projects: faker.datatype.boolean(),
            has_wiki: faker.datatype.boolean(),
            has_pages: faker.datatype.boolean(),
            has_downloads: faker.datatype.boolean(),
            archived: faker.datatype.boolean(),
            disabled: faker.datatype.boolean(),
            visibility: faker.lorem.slug(),
            pushed_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            updated_at: faker.lorem.slug(),
            permissions: {
              admin: faker.datatype.boolean(),
              maintain: faker.datatype.boolean(),
              push: faker.datatype.boolean(),
              triage: faker.datatype.boolean(),
              pull: faker.datatype.boolean(),
            },
            allow_rebase_merge: faker.datatype.boolean(),
            temp_clone_token: faker.lorem.slug(),
            allow_squash_merge: faker.datatype.boolean(),
            allow_auto_merge: faker.datatype.boolean(),
            delete_branch_on_merge: faker.datatype.boolean(),
            allow_update_branch: faker.datatype.boolean(),
            allow_merge_commit: faker.datatype.boolean(),
            subscribers_count: faker.datatype.number(),
            network_count: faker.datatype.number(),
          },
          temp_clone_token: faker.lorem.slug(),
          allow_squash_merge: faker.datatype.boolean(),
          allow_auto_merge: faker.datatype.boolean(),
          delete_branch_on_merge: faker.datatype.boolean(),
          allow_merge_commit: faker.datatype.boolean(),
          allow_forking: faker.datatype.boolean(),
          subscribers_count: faker.datatype.number(),
          network_count: faker.datatype.number(),
          open_issues: faker.datatype.number(),
          watchers: faker.datatype.number(),
          master_branch: faker.lorem.slug(),
          starred_at: faker.lorem.slug(),
        },
        temp_clone_token: faker.lorem.slug(),
        delete_branch_on_merge: faker.datatype.boolean(),
        subscribers_count: faker.datatype.number(),
        network_count: faker.datatype.number(),
        code_of_conduct: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          url: faker.internet.url(),
          body: faker.lorem.slug(),
          html_url: faker.internet.url(),
        },
        license: {
          key: faker.lorem.slug(),
          name: faker.lorem.slug(),
          spdx_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          node_id: faker.lorem.slug(),
        },
        forks: faker.datatype.number(),
        open_issues: faker.datatype.number(),
        watchers: faker.datatype.number(),
        allow_forking: faker.datatype.boolean(),
      })),
    },
  },
  '/users/:username/suspended': { put: { 204: null }, delete: { 204: null } },
  '/zen': { get: { 200: null } },
};
