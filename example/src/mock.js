/**
 * This file is AUTO GENERATED by openapi-to-msw, you can also commit/edit it as you prefer.
 */
/* eslint-disable */
import { setupWorker, rest } from 'msw';
import faker from '@faker-js/faker';

faker.seed(1);

const MAX_ARRAY_LENGTH = 20;

export const handlers = [
  rest.get('/admin/hooks', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            type: faker.lorem.slug(),
            id: faker.datatype.number(),
            name: faker.lorem.slug(),
            active: faker.datatype.boolean(),
            events: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            config: {
              url: faker.lorem.slug(),
              content_type: faker.lorem.slug(),
              insecure_ssl: faker.lorem.slug(),
              secret: faker.lorem.slug(),
            },
            updated_at: faker.lorem.slug(),
            created_at: faker.lorem.slug(),
            url: faker.lorem.slug(),
            ping_url: faker.lorem.slug(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.post('/admin/hooks', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          type: faker.lorem.slug(),
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          active: faker.datatype.boolean(),
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          config: {
            url: faker.lorem.slug(),
            content_type: faker.lorem.slug(),
            insecure_ssl: faker.lorem.slug(),
            secret: faker.lorem.slug(),
          },
          updated_at: faker.lorem.slug(),
          created_at: faker.lorem.slug(),
          url: faker.lorem.slug(),
          ping_url: faker.lorem.slug(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.get('/admin/hooks/:hookId', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          type: faker.lorem.slug(),
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          active: faker.datatype.boolean(),
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          config: {
            url: faker.lorem.slug(),
            content_type: faker.lorem.slug(),
            insecure_ssl: faker.lorem.slug(),
            secret: faker.lorem.slug(),
          },
          updated_at: faker.lorem.slug(),
          created_at: faker.lorem.slug(),
          url: faker.lorem.slug(),
          ping_url: faker.lorem.slug(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.patch('/admin/hooks/:hookId', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          type: faker.lorem.slug(),
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          active: faker.datatype.boolean(),
          events: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          config: {
            url: faker.lorem.slug(),
            content_type: faker.lorem.slug(),
            insecure_ssl: faker.lorem.slug(),
          },
          updated_at: faker.lorem.slug(),
          created_at: faker.lorem.slug(),
          url: faker.lorem.slug(),
          ping_url: faker.lorem.slug(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.delete('/admin/hooks/:hookId', (req, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.post('/admin/hooks/:hookId/pings', (req, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.get('/admin/keys', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            key: faker.lorem.slug(),
            user_id: faker.datatype.number(),
            repository_id: faker.datatype.number(),
            url: faker.lorem.slug(),
            title: faker.lorem.slug(),
            read_only: faker.datatype.boolean(),
            verified: faker.datatype.boolean(),
            created_at: faker.date.recent(),
            last_used: faker.date.recent(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.delete('/admin/keys/:keyIds', (req, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.patch('/admin/ldap/teams/:teamId/mapping', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          ldap_dn: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          name: faker.lorem.slug(),
          slug: faker.lorem.slug(),
          description: faker.lorem.slug(),
          privacy: faker.lorem.slug(),
          permission: faker.lorem.slug(),
          members_url: faker.lorem.slug(),
          repositories_url: faker.lorem.slug(),
          parent: null,
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.post('/admin/ldap/teams/:teamId/sync', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          status: faker.lorem.slug(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.patch('/admin/ldap/users/:username/mapping', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          ldap_dn: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          name: faker.lorem.slug(),
          company: faker.lorem.slug(),
          blog: faker.lorem.slug(),
          location: faker.lorem.slug(),
          email: faker.internet.exampleEmail(),
          hireable: faker.datatype.boolean(),
          bio: faker.lorem.slug(),
          twitter_username: faker.lorem.slug(),
          public_repos: faker.datatype.number(),
          public_gists: faker.datatype.number(),
          followers: faker.datatype.number(),
          following: faker.datatype.number(),
          created_at: faker.date.recent(),
          updated_at: faker.date.recent(),
          private_gists: faker.datatype.number(),
          total_private_repos: faker.datatype.number(),
          owned_private_repos: faker.datatype.number(),
          disk_usage: faker.datatype.number(),
          collaborators: faker.datatype.number(),
          two_factor_authentication: faker.datatype.boolean(),
          plan: {
            collaborators: faker.datatype.number(),
            name: faker.lorem.slug(),
            space: faker.datatype.number(),
            private_repos: faker.datatype.number(),
          },
          suspended_at: faker.date.recent(),
          business_plus: faker.datatype.boolean(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.post('/admin/ldap/users/:username/sync', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          status: faker.lorem.slug(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.post('/admin/organizations', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.internet.url(),
          hooks_url: faker.lorem.slug(),
          issues_url: faker.lorem.slug(),
          members_url: faker.lorem.slug(),
          public_members_url: faker.lorem.slug(),
          avatar_url: faker.lorem.slug(),
          description: faker.lorem.slug(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.patch('/admin/organizations/:org', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(202),
        ctx.json({
          message: faker.lorem.slug(),
          url: faker.lorem.slug(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.get('/admin/pre-receive-environments', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            name: faker.lorem.slug(),
            image_url: faker.lorem.slug(),
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            default_environment: faker.datatype.boolean(),
            created_at: faker.lorem.slug(),
            hooks_count: faker.datatype.number(),
            download: {
              url: faker.lorem.slug(),
              state: faker.lorem.slug(),
              downloaded_at: faker.lorem.slug(),
              message: faker.lorem.slug(),
            },
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.post('/admin/pre-receive-environments', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          image_url: faker.lorem.slug(),
          url: faker.lorem.slug(),
          html_url: faker.lorem.slug(),
          default_environment: faker.datatype.boolean(),
          created_at: faker.lorem.slug(),
          hooks_count: faker.datatype.number(),
          download: {
            url: faker.lorem.slug(),
            state: faker.lorem.slug(),
            downloaded_at: faker.lorem.slug(),
            message: faker.lorem.slug(),
          },
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.get(
    '/admin/pre-receive-environments/:preReceiveEnvironmentId',
    (req, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.lorem.slug(),
            image_url: faker.lorem.slug(),
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            default_environment: faker.datatype.boolean(),
            created_at: faker.lorem.slug(),
            hooks_count: faker.datatype.number(),
            download: {
              url: faker.lorem.slug(),
              state: faker.lorem.slug(),
              downloaded_at: faker.lorem.slug(),
              message: faker.lorem.slug(),
            },
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArray));
    }
  ),
  rest.patch(
    '/admin/pre-receive-environments/:preReceiveEnvironmentId',
    (req, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            id: faker.datatype.number(),
            name: faker.lorem.slug(),
            image_url: faker.lorem.slug(),
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            default_environment: faker.datatype.boolean(),
            created_at: faker.lorem.slug(),
            hooks_count: faker.datatype.number(),
            download: {
              url: faker.lorem.slug(),
              state: faker.lorem.slug(),
              downloaded_at: faker.lorem.slug(),
              message: faker.lorem.slug(),
            },
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(),
              code: faker.lorem.slug(),
              message: faker.lorem.slug(),
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArray));
    }
  ),
  rest.delete(
    '/admin/pre-receive-environments/:preReceiveEnvironmentId',
    (req, res, ctx) => {
      const resultArray = [
        [ctx.status(204), ctx.json(null)],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(),
              code: faker.lorem.slug(),
              message: faker.lorem.slug(),
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArray));
    }
  ),
  rest.post(
    '/admin/pre-receive-environments/:preReceiveEnvironmentId/downloads',
    (req, res, ctx) => {
      const resultArray = [
        [
          ctx.status(202),
          ctx.json({
            url: faker.lorem.slug(),
            state: faker.lorem.slug(),
            downloaded_at: faker.lorem.slug(),
            message: faker.lorem.slug(),
          }),
        ],
        [
          ctx.status(422),
          ctx.json({
            message: faker.lorem.slug(),
            errors: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => ({
              resource: faker.lorem.slug(),
              code: faker.lorem.slug(),
              message: faker.lorem.slug(),
            })),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArray));
    }
  ),
  rest.get(
    '/admin/pre-receive-environments/:preReceiveEnvironmentId/downloads/latest',
    (req, res, ctx) => {
      const resultArray = [
        [
          ctx.status(200),
          ctx.json({
            url: faker.lorem.slug(),
            state: faker.lorem.slug(),
            downloaded_at: faker.lorem.slug(),
            message: faker.lorem.slug(),
          }),
        ],
      ];
      return res(...faker.random.arrayElement(resultArray));
    }
  ),
  rest.get('/admin/pre-receive-hooks', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            name: faker.lorem.slug(),
            enforcement: faker.lorem.slug(),
            script: faker.lorem.slug(),
            script_repository: {
              id: faker.datatype.number(),
              full_name: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
            },
            environment: {
              id: faker.datatype.number(),
              name: faker.lorem.slug(),
              image_url: faker.lorem.slug(),
              url: faker.lorem.slug(),
              html_url: faker.lorem.slug(),
              default_environment: faker.datatype.boolean(),
              created_at: faker.lorem.slug(),
              hooks_count: faker.datatype.number(),
              download: {
                url: faker.lorem.slug(),
                state: faker.lorem.slug(),
                downloaded_at: faker.lorem.slug(),
                message: faker.lorem.slug(),
              },
            },
            allow_downstream_configuration: faker.datatype.boolean(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.post('/admin/pre-receive-hooks', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          enforcement: faker.lorem.slug(),
          script: faker.lorem.slug(),
          script_repository: {
            id: faker.datatype.number(),
            full_name: faker.lorem.slug(),
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
          },
          environment: {
            id: faker.datatype.number(),
            name: faker.lorem.slug(),
            image_url: faker.lorem.slug(),
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            default_environment: faker.datatype.boolean(),
            created_at: faker.lorem.slug(),
            hooks_count: faker.datatype.number(),
            download: {
              url: faker.lorem.slug(),
              state: faker.lorem.slug(),
              downloaded_at: faker.lorem.slug(),
              message: faker.lorem.slug(),
            },
          },
          allow_downstream_configuration: faker.datatype.boolean(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.get('/admin/pre-receive-hooks/:preReceiveHookId', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          enforcement: faker.lorem.slug(),
          script: faker.lorem.slug(),
          script_repository: {
            id: faker.datatype.number(),
            full_name: faker.lorem.slug(),
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
          },
          environment: {
            id: faker.datatype.number(),
            name: faker.lorem.slug(),
            image_url: faker.lorem.slug(),
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            default_environment: faker.datatype.boolean(),
            created_at: faker.lorem.slug(),
            hooks_count: faker.datatype.number(),
            download: {
              url: faker.lorem.slug(),
              state: faker.lorem.slug(),
              downloaded_at: faker.lorem.slug(),
              message: faker.lorem.slug(),
            },
          },
          allow_downstream_configuration: faker.datatype.boolean(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.patch('/admin/pre-receive-hooks/:preReceiveHookId', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json({
          id: faker.datatype.number(),
          name: faker.lorem.slug(),
          enforcement: faker.lorem.slug(),
          script: faker.lorem.slug(),
          script_repository: {
            id: faker.datatype.number(),
            full_name: faker.lorem.slug(),
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
          },
          environment: {
            id: faker.datatype.number(),
            name: faker.lorem.slug(),
            image_url: faker.lorem.slug(),
            url: faker.lorem.slug(),
            html_url: faker.lorem.slug(),
            default_environment: faker.datatype.boolean(),
            created_at: faker.lorem.slug(),
            hooks_count: faker.datatype.number(),
            download: {
              url: faker.lorem.slug(),
              state: faker.lorem.slug(),
              downloaded_at: faker.lorem.slug(),
              message: faker.lorem.slug(),
            },
          },
          allow_downstream_configuration: faker.datatype.boolean(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.delete('/admin/pre-receive-hooks/:preReceiveHookId', (req, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.get('/admin/tokens', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(200),
        ctx.json(
          [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => ({
            id: faker.datatype.number(),
            url: faker.internet.url(),
            scopes: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            token: faker.lorem.slug(),
            token_last_eight: faker.lorem.slug(),
            hashed_token: faker.lorem.slug(),
            app: {
              client_id: faker.lorem.slug(),
              name: faker.lorem.slug(),
              url: faker.internet.url(),
            },
            note: faker.lorem.slug(),
            note_url: faker.internet.url(),
            updated_at: faker.date.recent(),
            created_at: faker.date.recent(),
            fingerprint: faker.lorem.slug(),
            user: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
            installation: {
              permissions: {
                actions: faker.random.arrayElement(['read', 'write']),
                administration: faker.random.arrayElement(['read', 'write']),
                checks: faker.random.arrayElement(['read', 'write']),
                contents: faker.random.arrayElement(['read', 'write']),
                deployments: faker.random.arrayElement(['read', 'write']),
                environments: faker.random.arrayElement(['read', 'write']),
                issues: faker.random.arrayElement(['read', 'write']),
                metadata: faker.random.arrayElement(['read', 'write']),
                packages: faker.random.arrayElement(['read', 'write']),
                pages: faker.random.arrayElement(['read', 'write']),
                pull_requests: faker.random.arrayElement(['read', 'write']),
                repository_hooks: faker.random.arrayElement(['read', 'write']),
                repository_projects: faker.random.arrayElement([
                  'read',
                  'write',
                  'admin',
                ]),
                secret_scanning_alerts: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                secrets: faker.random.arrayElement(['read', 'write']),
                security_events: faker.random.arrayElement(['read', 'write']),
                single_file: faker.random.arrayElement(['read', 'write']),
                statuses: faker.random.arrayElement(['read', 'write']),
                vulnerability_alerts: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                workflows: faker.random.arrayElement(['write']),
                members: faker.random.arrayElement(['read', 'write']),
                organization_administration: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_hooks: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_plan: faker.random.arrayElement(['read']),
                organization_projects: faker.random.arrayElement([
                  'read',
                  'write',
                  'admin',
                ]),
                organization_packages: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_secrets: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_self_hosted_runners: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                organization_user_blocking: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
                team_discussions: faker.random.arrayElement(['read', 'write']),
                content_references: faker.random.arrayElement([
                  'read',
                  'write',
                ]),
              },
              repository_selection: faker.random.arrayElement([
                'all',
                'selected',
              ]),
              single_file_name: faker.lorem.slug(),
              has_multiple_single_files: faker.datatype.boolean(),
              single_file_paths: [
                ...new Array(
                  faker.datatype.number({ max: MAX_ARRAY_LENGTH })
                ).keys(),
              ].map(_ => faker.lorem.slug()),
              repositories_url: faker.internet.url(),
              account: {
                name: faker.lorem.slug(),
                email: faker.lorem.slug(),
                login: faker.lorem.slug(),
                id: faker.datatype.number(),
                node_id: faker.lorem.slug(),
                avatar_url: faker.internet.url(),
                gravatar_id: faker.lorem.slug(),
                url: faker.internet.url(),
                html_url: faker.internet.url(),
                followers_url: faker.internet.url(),
                following_url: faker.lorem.slug(),
                gists_url: faker.lorem.slug(),
                starred_url: faker.lorem.slug(),
                subscriptions_url: faker.internet.url(),
                organizations_url: faker.internet.url(),
                repos_url: faker.internet.url(),
                events_url: faker.lorem.slug(),
                received_events_url: faker.internet.url(),
                type: faker.lorem.slug(),
                site_admin: faker.datatype.boolean(),
                starred_at: faker.lorem.slug(),
              },
            },
            expires_at: faker.date.recent(),
          }))
        ),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.delete('/admin/tokens/:tokenId', (req, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.post('/admin/users', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          name: faker.lorem.slug(),
          email: faker.lorem.slug(),
          login: faker.lorem.slug(),
          id: faker.datatype.number(),
          node_id: faker.lorem.slug(),
          avatar_url: faker.internet.url(),
          gravatar_id: faker.lorem.slug(),
          url: faker.internet.url(),
          html_url: faker.internet.url(),
          followers_url: faker.internet.url(),
          following_url: faker.lorem.slug(),
          gists_url: faker.lorem.slug(),
          starred_url: faker.lorem.slug(),
          subscriptions_url: faker.internet.url(),
          organizations_url: faker.internet.url(),
          repos_url: faker.internet.url(),
          events_url: faker.lorem.slug(),
          received_events_url: faker.internet.url(),
          type: faker.lorem.slug(),
          site_admin: faker.datatype.boolean(),
          starred_at: faker.lorem.slug(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.patch('/admin/users/:username', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(202),
        ctx.json({
          message: faker.lorem.slug(),
          url: faker.lorem.slug(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.delete('/admin/users/:username', (req, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.post('/admin/users/:username/authorizations', (req, res, ctx) => {
    const resultArray = [
      [
        ctx.status(201),
        ctx.json({
          id: faker.datatype.number(),
          url: faker.internet.url(),
          scopes: [
            ...new Array(
              faker.datatype.number({ max: MAX_ARRAY_LENGTH })
            ).keys(),
          ].map(_ => faker.lorem.slug()),
          token: faker.lorem.slug(),
          token_last_eight: faker.lorem.slug(),
          hashed_token: faker.lorem.slug(),
          app: {
            client_id: faker.lorem.slug(),
            name: faker.lorem.slug(),
            url: faker.internet.url(),
          },
          note: faker.lorem.slug(),
          note_url: faker.internet.url(),
          updated_at: faker.date.recent(),
          created_at: faker.date.recent(),
          fingerprint: faker.lorem.slug(),
          user: {
            name: faker.lorem.slug(),
            email: faker.lorem.slug(),
            login: faker.lorem.slug(),
            id: faker.datatype.number(),
            node_id: faker.lorem.slug(),
            avatar_url: faker.internet.url(),
            gravatar_id: faker.lorem.slug(),
            url: faker.internet.url(),
            html_url: faker.internet.url(),
            followers_url: faker.internet.url(),
            following_url: faker.lorem.slug(),
            gists_url: faker.lorem.slug(),
            starred_url: faker.lorem.slug(),
            subscriptions_url: faker.internet.url(),
            organizations_url: faker.internet.url(),
            repos_url: faker.internet.url(),
            events_url: faker.lorem.slug(),
            received_events_url: faker.internet.url(),
            type: faker.lorem.slug(),
            site_admin: faker.datatype.boolean(),
            starred_at: faker.lorem.slug(),
          },
          installation: {
            permissions: {
              actions: faker.random.arrayElement(['read', 'write']),
              administration: faker.random.arrayElement(['read', 'write']),
              checks: faker.random.arrayElement(['read', 'write']),
              contents: faker.random.arrayElement(['read', 'write']),
              deployments: faker.random.arrayElement(['read', 'write']),
              environments: faker.random.arrayElement(['read', 'write']),
              issues: faker.random.arrayElement(['read', 'write']),
              metadata: faker.random.arrayElement(['read', 'write']),
              packages: faker.random.arrayElement(['read', 'write']),
              pages: faker.random.arrayElement(['read', 'write']),
              pull_requests: faker.random.arrayElement(['read', 'write']),
              repository_hooks: faker.random.arrayElement(['read', 'write']),
              repository_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              secret_scanning_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              secrets: faker.random.arrayElement(['read', 'write']),
              security_events: faker.random.arrayElement(['read', 'write']),
              single_file: faker.random.arrayElement(['read', 'write']),
              statuses: faker.random.arrayElement(['read', 'write']),
              vulnerability_alerts: faker.random.arrayElement([
                'read',
                'write',
              ]),
              workflows: faker.random.arrayElement(['write']),
              members: faker.random.arrayElement(['read', 'write']),
              organization_administration: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_hooks: faker.random.arrayElement(['read', 'write']),
              organization_plan: faker.random.arrayElement(['read']),
              organization_projects: faker.random.arrayElement([
                'read',
                'write',
                'admin',
              ]),
              organization_packages: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_secrets: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_self_hosted_runners: faker.random.arrayElement([
                'read',
                'write',
              ]),
              organization_user_blocking: faker.random.arrayElement([
                'read',
                'write',
              ]),
              team_discussions: faker.random.arrayElement(['read', 'write']),
              content_references: faker.random.arrayElement(['read', 'write']),
            },
            repository_selection: faker.random.arrayElement([
              'all',
              'selected',
            ]),
            single_file_name: faker.lorem.slug(),
            has_multiple_single_files: faker.datatype.boolean(),
            single_file_paths: [
              ...new Array(
                faker.datatype.number({ max: MAX_ARRAY_LENGTH })
              ).keys(),
            ].map(_ => faker.lorem.slug()),
            repositories_url: faker.internet.url(),
            account: {
              name: faker.lorem.slug(),
              email: faker.lorem.slug(),
              login: faker.lorem.slug(),
              id: faker.datatype.number(),
              node_id: faker.lorem.slug(),
              avatar_url: faker.internet.url(),
              gravatar_id: faker.lorem.slug(),
              url: faker.internet.url(),
              html_url: faker.internet.url(),
              followers_url: faker.internet.url(),
              following_url: faker.lorem.slug(),
              gists_url: faker.lorem.slug(),
              starred_url: faker.lorem.slug(),
              subscriptions_url: faker.internet.url(),
              organizations_url: faker.internet.url(),
              repos_url: faker.internet.url(),
              events_url: faker.lorem.slug(),
              received_events_url: faker.internet.url(),
              type: faker.lorem.slug(),
              site_admin: faker.datatype.boolean(),
              starred_at: faker.lorem.slug(),
            },
          },
          expires_at: faker.date.recent(),
        }),
      ],
    ];
    return res(...faker.random.arrayElement(resultArray));
  }),
  rest.delete('/admin/users/:username/authorizations', (req, res, ctx) => {
    const resultArray = [[ctx.status(204), ctx.json(null)]];
    return res(...faker.random.arrayElement(resultArray));
  }),
];

// This configures a Service Worker with the given request handlers.
export const startWorker = () => {
  const worker = setupWorker(...handlers);
  worker.start();
};
